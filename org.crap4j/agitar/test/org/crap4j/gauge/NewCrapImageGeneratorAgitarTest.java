/**
 * Generated by Agitar build: JUnitFactory Version 2.1.1.000614 (Build date: Nov 19, 2007) [2.1.1.000614]
 * JDK Version: 1.5.0_11
 *
 * Generated on Nov 27, 2007 4:13:48 PM
 * Time to generate: 02:37.149 seconds
 *
 */

package org.crap4j.gauge;

import com.agitar.lib.junit.AgitarTestCase;
import com.agitar.lib.mockingbird.Mockingbird;
import com.agitar.lib.mockingbird.MockingbirdSystem;
import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.GraphicsEnvironment;
import java.awt.HeadlessException;
import java.awt.Image;
import java.awt.Polygon;
import java.awt.RenderingHints;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.PrintStream;
import java.security.AccessControlException;
import javax.imageio.ImageIO;
import org.crap4j.benchmark.GlobalStats;

public class NewCrapImageGeneratorAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return NewCrapImageGenerator.class;
    }
    
    public void testConstructor() throws Throwable {
        NewCrapImageGenerator newCrapImageGenerator = new NewCrapImageGenerator(100.0F, "testNewCrapImageGeneratorParam2", null, true, 1000.0F, 0.0F);
        assertEquals("newCrapImageGenerator.dir", "testNewCrapImageGeneratorParam2", getPrivateField(newCrapImageGenerator, "dir"));
        assertEquals("newCrapImageGenerator.globalAverage", 0.0F, ((Number) getPrivateField(newCrapImageGenerator, "globalAverage")).floatValue(), 1.0E-6F);
        float actual = ((Image) getPrivateField(newCrapImageGenerator, "gauge")).getAccelerationPriority();
        assertEquals("newCrapImageGenerator.gauge.getAccelerationPriority()", 0.5F, actual, 1.0E-6F);
        assertEquals("newCrapImageGenerator.crapScore", 100.0F, ((Number) getPrivateField(newCrapImageGenerator, "crapScore")).floatValue(), 1.0E-6F);
        assertTrue("newCrapImageGenerator.useBlueBackground", ((Boolean) getPrivateField(newCrapImageGenerator, "useBlueBackground")).booleanValue());
        assertEquals("newCrapImageGenerator.crapGaugeFilename", "CRI.png", getPrivateField(newCrapImageGenerator, "crapGaugeFilename"));
        float actual2 = ((Image) getPrivateField(newCrapImageGenerator, "needle")).getAccelerationPriority();
        assertEquals("newCrapImageGenerator.needle.getAccelerationPriority()", 0.5F, actual2, 1.0E-6F);
        assertEquals("newCrapImageGenerator.crapThreshold", 1000.0F, ((Number) getPrivateField(newCrapImageGenerator, "crapThreshold")).floatValue(), 1.0E-6F);
    }
    
    public void testConstructor1() throws Throwable {
        NewCrapImageGenerator newCrapImageGenerator = new NewCrapImageGenerator(100.0F, "testNewCrapImageGeneratorParam2", " ", true, 1000.0F, 0.0F);
        assertEquals("newCrapImageGenerator.dir", "testNewCrapImageGeneratorParam2", getPrivateField(newCrapImageGenerator, "dir"));
        assertEquals("newCrapImageGenerator.globalAverage", 0.0F, ((Number) getPrivateField(newCrapImageGenerator, "globalAverage")).floatValue(), 1.0E-6F);
        float actual = ((Image) getPrivateField(newCrapImageGenerator, "gauge")).getAccelerationPriority();
        assertEquals("newCrapImageGenerator.gauge.getAccelerationPriority()", 0.5F, actual, 1.0E-6F);
        assertEquals("newCrapImageGenerator.crapScore", 100.0F, ((Number) getPrivateField(newCrapImageGenerator, "crapScore")).floatValue(), 1.0E-6F);
        assertTrue("newCrapImageGenerator.useBlueBackground", ((Boolean) getPrivateField(newCrapImageGenerator, "useBlueBackground")).booleanValue());
        assertEquals("newCrapImageGenerator.crapGaugeFilename", " ", getPrivateField(newCrapImageGenerator, "crapGaugeFilename"));
        float actual2 = ((Image) getPrivateField(newCrapImageGenerator, "needle")).getAccelerationPriority();
        assertEquals("newCrapImageGenerator.needle.getAccelerationPriority()", 0.5F, actual2, 1.0E-6F);
        assertEquals("newCrapImageGenerator.crapThreshold", 1000.0F, ((Number) getPrivateField(newCrapImageGenerator, "crapThreshold")).floatValue(), 1.0E-6F);
    }
    
    public void testConstructor2() throws Throwable {
        NewCrapImageGenerator newCrapImageGenerator = new NewCrapImageGenerator(100.0F, "testNewCrapImageGeneratorParam2", "", true, 1000.0F, 0.0F);
        assertEquals("newCrapImageGenerator.dir", "testNewCrapImageGeneratorParam2", getPrivateField(newCrapImageGenerator, "dir"));
        assertEquals("newCrapImageGenerator.globalAverage", 0.0F, ((Number) getPrivateField(newCrapImageGenerator, "globalAverage")).floatValue(), 1.0E-6F);
        float actual = ((Image) getPrivateField(newCrapImageGenerator, "gauge")).getAccelerationPriority();
        assertEquals("newCrapImageGenerator.gauge.getAccelerationPriority()", 0.5F, actual, 1.0E-6F);
        assertEquals("newCrapImageGenerator.crapScore", 100.0F, ((Number) getPrivateField(newCrapImageGenerator, "crapScore")).floatValue(), 1.0E-6F);
        assertTrue("newCrapImageGenerator.useBlueBackground", ((Boolean) getPrivateField(newCrapImageGenerator, "useBlueBackground")).booleanValue());
        assertEquals("newCrapImageGenerator.crapGaugeFilename", "CRI.png", getPrivateField(newCrapImageGenerator, "crapGaugeFilename"));
        float actual2 = ((Image) getPrivateField(newCrapImageGenerator, "needle")).getAccelerationPriority();
        assertEquals("newCrapImageGenerator.needle.getAccelerationPriority()", 0.5F, actual2, 1.0E-6F);
        assertEquals("newCrapImageGenerator.crapThreshold", 1000.0F, ((Number) getPrivateField(newCrapImageGenerator, "crapThreshold")).floatValue(), 1.0E-6F);
    }
    
    public void testGetBackgroundColor() throws Throwable {
        NewCrapImageGenerator newCrapImageGenerator = new NewCrapImageGenerator(100.0F, "testNewCrapImageGeneratorDir", "testNewCrapImageGeneratorFilename", true, 0.0F, 1000.0F);
        Color result = (Color) callPrivateMethod("org.crap4j.gauge.NewCrapImageGenerator", "getBackgroundColor", new Class[] {float.class}, newCrapImageGenerator, new Object[] {new Float(100.0F)});
        assertEquals("result.getAlpha()", 255, result.getAlpha());
    }
    
    public void testGetBackgroundColor1() throws Throwable {
        NewCrapImageGenerator newCrapImageGenerator = new NewCrapImageGenerator(-100.0F, "testNewCrapImageGeneratorDir", "testNewCrapImageGeneratorFilename", true, 100.0F, 1000.0F);
        Color result = (Color) callPrivateMethod("org.crap4j.gauge.NewCrapImageGenerator", "getBackgroundColor", new Class[] {float.class}, newCrapImageGenerator, new Object[] {new Float(100.0F)});
        assertEquals("result.getAlpha()", 255, result.getAlpha());
    }
    
    public void testGetDarkGreen() throws Throwable {
        NewCrapImageGenerator newCrapImageGenerator = new NewCrapImageGenerator(100.0F, "testNewCrapImageGeneratorDir", "testNewCrapImageGeneratorFilename", true, 1000.0F, 0.0F);
        Color result = (Color) callPrivateMethod("org.crap4j.gauge.NewCrapImageGenerator", "getDarkGreen", new Class[] {}, newCrapImageGenerator, new Object[] {});
        assertEquals("result.getAlpha()", 255, result.getAlpha());
    }
    
    public void testGetDarkRed() throws Throwable {
        NewCrapImageGenerator newCrapImageGenerator = new NewCrapImageGenerator(100.0F, "testNewCrapImageGeneratorDir", "testNewCrapImageGeneratorFilename", true, 1000.0F, 0.0F);
        Color result = (Color) callPrivateMethod("org.crap4j.gauge.NewCrapImageGenerator", "getDarkRed", new Class[] {}, newCrapImageGenerator, new Object[] {});
        assertEquals("result.getAlpha()", 255, result.getAlpha());
    }
    
    public void testGetDefGreen() throws Throwable {
        NewCrapImageGenerator newCrapImageGenerator = new NewCrapImageGenerator(100.0F, "testNewCrapImageGeneratorDir", "testNewCrapImageGeneratorFilename", true, 1000.0F, 0.0F);
        Color result = (Color) callPrivateMethod("org.crap4j.gauge.NewCrapImageGenerator", "getDefGreen", new Class[] {}, newCrapImageGenerator, new Object[] {});
        assertEquals("result.getAlpha()", 255, result.getAlpha());
    }
    
    public void testGetDefRed() throws Throwable {
        NewCrapImageGenerator newCrapImageGenerator = new NewCrapImageGenerator(100.0F, "testNewCrapImageGeneratorDir", "testNewCrapImageGeneratorFilename", true, 1000.0F, 0.0F);
        Color result = (Color) callPrivateMethod("org.crap4j.gauge.NewCrapImageGenerator", "getDefRed", new Class[] {}, newCrapImageGenerator, new Object[] {});
        assertEquals("result.getAlpha()", 255, result.getAlpha());
    }
    
    public void testGetPixelScore() throws Throwable {
        NewCrapImageGenerator newCrapImageGenerator = new NewCrapImageGenerator(100.0F, "testNewCrapImageGeneratorDir", "testNewCrapImageGeneratorFilename", true, 1000.0F, 0.0F);
        int result = ((Number) callPrivateMethod("org.crap4j.gauge.NewCrapImageGenerator", "getPixelScore", new Class[] {float.class, int.class, int.class, int.class}, newCrapImageGenerator, new Object[] {new Float(0.0F), new Integer(100), new Integer(1000), new Integer(0)})).intValue();
        assertEquals("result", 100, result);
    }
    
    public void testGetPixelScore1() throws Throwable {
        NewCrapImageGenerator newCrapImageGenerator = new NewCrapImageGenerator(100.0F, "testNewCrapImageGeneratorDir", "testNewCrapImageGeneratorFilename", true, 1000.0F, 0.0F);
        int result = ((Number) callPrivateMethod("org.crap4j.gauge.NewCrapImageGenerator", "getPixelScore", new Class[] {float.class, int.class, int.class, int.class}, newCrapImageGenerator, new Object[] {new Float(-0.0010F), new Integer(100), new Integer(1000), new Integer(0)})).intValue();
        assertEquals("result", 0, result);
    }
    
    public void testGetShadowColor() throws Throwable {
        NewCrapImageGenerator newCrapImageGenerator = new NewCrapImageGenerator(100.0F, "testNewCrapImageGeneratorDir", "testNewCrapImageGeneratorFilename", true, 1000.0F, 0.0F);
        Color result = (Color) callPrivateMethod("org.crap4j.gauge.NewCrapImageGenerator", "getShadowColor", new Class[] {}, newCrapImageGenerator, new Object[] {});
        assertEquals("result.getAlpha()", 155, result.getAlpha());
    }
    
    public void testIsEmpty() throws Throwable {
        boolean result = ((Boolean) callPrivateMethod("org.crap4j.gauge.NewCrapImageGenerator", "isEmpty", new Class[] {String.class}, null, new Object[] {""})).booleanValue();
        assertTrue("result", result);
    }
    
    public void testIsEmpty1() throws Throwable {
        boolean result = ((Boolean) callPrivateMethod("org.crap4j.gauge.NewCrapImageGenerator", "isEmpty", new Class[] {String.class}, null, new Object[] {" "})).booleanValue();
        assertFalse("result", result);
    }
    
    public void testIsEmpty2() throws Throwable {
        boolean result = ((Boolean) callPrivateMethod("org.crap4j.gauge.NewCrapImageGenerator", "isEmpty", new Class[] {String.class}, null, new Object[] {null})).booleanValue();
        assertTrue("result", result);
    }
    
    public void testIsRunningHeadless() throws Throwable {
        boolean result = ((Boolean) callPrivateMethod("org.crap4j.gauge.NewCrapImageGenerator", "isRunningHeadless", new Class[] {}, null, new Object[] {})).booleanValue();
        assertFalse("result", result);
    }
    
    public void testIsValidFilename() throws Throwable {
        NewCrapImageGenerator newCrapImageGenerator = new NewCrapImageGenerator(100.0F, "testNewCrapImageGeneratorDir", "testNewCrapImageGeneratorFilename", true, 1000.0F, 0.0F);
        boolean result = ((Boolean) callPrivateMethod("org.crap4j.gauge.NewCrapImageGenerator", "isValidFilename", new Class[] {String.class}, newCrapImageGenerator, new Object[] {""})).booleanValue();
        assertFalse("result", result);
    }
    
    public void testIsValidFilename1() throws Throwable {
        NewCrapImageGenerator newCrapImageGenerator = new NewCrapImageGenerator(100.0F, "testNewCrapImageGeneratorDir", "testNewCrapImageGeneratorFilename", true, 1000.0F, 0.0F);
        boolean result = ((Boolean) callPrivateMethod("org.crap4j.gauge.NewCrapImageGenerator", "isValidFilename", new Class[] {String.class}, newCrapImageGenerator, new Object[] {null})).booleanValue();
        assertFalse("result", result);
    }
    
    public void testIsValidFilename2() throws Throwable {
        NewCrapImageGenerator newCrapImageGenerator = new NewCrapImageGenerator(100.0F, "testNewCrapImageGeneratorDir", "testNewCrapImageGeneratorFilename", true, 1000.0F, 0.0F);
        boolean result = ((Boolean) callPrivateMethod("org.crap4j.gauge.NewCrapImageGenerator", "isValidFilename", new Class[] {String.class}, newCrapImageGenerator, new Object[] {" "})).booleanValue();
        assertTrue("result", result);
    }
    
    public void testMain() throws Throwable {
        storeStaticField(GlobalStats.class, "NULL_STATS");
        String[] strings = new String[0];
        Graphics2D graphics2D = (Graphics2D) Mockingbird.getProxyObject(Graphics2D.class);
        GlobalStats globalStats = (GlobalStats) Mockingbird.getProxyObject(GlobalStats.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(true, NewCrapImageGenerator.class, "isEmpty", "(java.lang.String)boolean", Boolean.TRUE, 1);
        RenderingHints.Key KEY_ANTIALIASING = RenderingHints.KEY_ANTIALIASING;
        Object VALUE_ANTIALIAS_ON = RenderingHints.VALUE_ANTIALIAS_ON;
        RenderingHints.Key KEY_RENDERING = RenderingHints.KEY_RENDERING;
        Object VALUE_RENDER_QUALITY = RenderingHints.VALUE_RENDER_QUALITY;
        setPrivateField(GlobalStats.class, "NULL_STATS", globalStats);
        Mockingbird.enterNormalMode();
        globalStats.setCrapAverage(2.8E-45F);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(true, NewCrapImageGenerator.class, "showUsage", "()void", new Object[] {}, null, 1);
        Boolean boolean2 = Boolean.FALSE;
        Mockingbird.setReturnValue(true, NewCrapImageGenerator.class, "isEmpty", "(java.lang.String)boolean", boolean2, 1);
        Mockingbird.setReturnValue(true, Float.class, "parseFloat", "(java.lang.String)float", new Float(2.8E-45F), 1);
        NewCrapImageGenerator newCrapImageGenerator = (NewCrapImageGenerator) Mockingbird.getProxyObject(NewCrapImageGenerator.class, true);
        Mockingbird.replaceObjectForRecording(NewCrapImageGenerator.class, "<init>(float,java.lang.String,java.lang.String,boolean,float,float)", newCrapImageGenerator);
        BufferedImage bufferedImage = (BufferedImage) Mockingbird.getProxyObject(BufferedImage.class);
        Mockingbird.replaceObjectForRecording(BufferedImage.class, "<init>(int,int,int)", bufferedImage);
        setPrivateField(newCrapImageGenerator, "useBlueBackground", Boolean.FALSE);
        setPrivateField(newCrapImageGenerator, "crapScore", new Float(2.8E-45F));
        setPrivateField(newCrapImageGenerator, "globalAverage", new Float(Float.MIN_VALUE));
        setPrivateField(newCrapImageGenerator, "dir", "");
        setPrivateField(newCrapImageGenerator, "crapGaugeFilename", "");
        Mockingbird.setReturnValue(false, bufferedImage, "createGraphics", "()java.awt.Graphics2D", new Object[] {}, graphics2D, 1);
        graphics2D.setRenderingHint(KEY_ANTIALIASING, VALUE_ANTIALIAS_ON);
        Mockingbird.setNormalReturnForVoid();
        graphics2D.setRenderingHint(KEY_RENDERING, VALUE_RENDER_QUALITY);
        Mockingbird.setNormalReturnForVoid();
        Color color = (Color) Mockingbird.getProxyObject(Color.class);
        Mockingbird.replaceObjectForRecording(Color.class, "<init>(int,int,int)", color);
        graphics2D.setBackground(color);
        Mockingbird.setNormalReturnForVoid();
        graphics2D.clearRect(0, 0, 500, 115);
        Mockingbird.setNormalReturnForVoid();
        Object[] objects = new Object[] {graphics2D, new Integer(40), new Integer(6), new Integer(420), new Integer(40)};
        Mockingbird.setReturnValue(false, newCrapImageGenerator, "drawShadowRect", "(java.awt.Graphics2D,int,int,int,int)void", objects, null, 1);
        Object[] objects2 = new Object[] {graphics2D, new Integer(40), new Integer(6), new Integer(140), new Integer(40)};
        Mockingbird.setReturnValue(false, newCrapImageGenerator, "drawGreenRect", "(java.awt.Graphics2D,int,int,int,int)void", objects2, null, 1);
        Object[] objects3 = new Object[] {graphics2D, new Integer(180), new Integer(6), new Integer(280), new Integer(40)};
        Mockingbird.setReturnValue(false, newCrapImageGenerator, "drawRedRect", "(java.awt.Graphics2D,int,int,int,int)void", objects3, null, 1);
        Mockingbird.setReturnValue(false, newCrapImageGenerator, "drawIncrementsOnGauge", "(java.awt.Graphics2D,int,int,int)void", new Object[] {graphics2D, new Integer(420), new Integer(60), new Integer(40)}, null, 1);
        Object[] objects4 = new Object[] {new Integer(420), new Integer(54), graphics2D, new Float(2.8E-45F), new Integer(40), new Integer(30), new Integer(20)};
        Mockingbird.setReturnValue(false, newCrapImageGenerator, "drawProjectMarker", "(int,int,java.awt.Graphics2D,float,int,int,int)void", objects4, null, 1);
        Object[] objects5 = new Object[] {new Integer(420), new Integer(0), graphics2D, new Float(Float.MIN_VALUE), new Integer(40), new Integer(30), new Integer(20)};
        Mockingbird.setReturnValue(false, newCrapImageGenerator, "drawGlobalAvgMarker", "(int,int,java.awt.Graphics2D,float,int,int,int)void", objects5, null, 1);
        Mockingbird.setReturnValue(false, newCrapImageGenerator, "drawLegend", "(java.awt.Graphics2D,int,int,int)void", new Object[] {graphics2D, new Integer(420), new Integer(108), new Integer(40)}, null, 1);
        Mockingbird.replaceObjectForRecording(File.class, "<init>(java.lang.String,java.lang.String)", Mockingbird.getProxyObject(File.class));
        FileOutputStream fileOutputStream = (FileOutputStream) Mockingbird.getProxyObject(FileOutputStream.class);
        Mockingbird.replaceObjectForRecording(FileOutputStream.class, "<init>(java.io.File)", fileOutputStream);
        Mockingbird.setReturnValue(true, ImageIO.class, "write", "(java.awt.image.RenderedImage,java.lang.String,java.io.OutputStream)boolean", new Object[] {bufferedImage, "png", fileOutputStream}, boolean2, 1);
        Mockingbird.setReturnValue(false, fileOutputStream, "close", "()void", new Object[] {}, null, 1);
        Mockingbird.setReturnValue(true, System.class, "getProperty", "(java.lang.String)java.lang.String", new Object[] {"java.awt.headless"}, "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "toUpperCase", "()java.lang.String", "true", 1);
        Mockingbird.enterTestMode(NewCrapImageGenerator.class);
        NewCrapImageGenerator.main(strings);
        boolean actual = ((Boolean) callPrivateMethod("org.crap4j.gauge.NewCrapImageGenerator", "isRunningHeadless", new Class[] {}, null, new Object[] {})).booleanValue();
        assertFalse(".isRunningHeadless()", actual);
    }
    
    public void testMakeGauge() throws Throwable {
        NewCrapImageGenerator newCrapImageGenerator = new NewCrapImageGenerator(0.0F, "testNewCrapImageGeneratorDir", "testNewCrapImageGeneratorFilename", true, 100.0F, -0.998F);
        BufferedImage result = (BufferedImage) callPrivateMethod("org.crap4j.gauge.NewCrapImageGenerator", "makeGauge", new Class[] {}, newCrapImageGenerator, new Object[] {});
        assertNull("result.getAlphaRaster()", result.getAlphaRaster());
    }
    
    public void testMakeGauge1() throws Throwable {
        NewCrapImageGenerator newCrapImageGenerator = new NewCrapImageGenerator(-1.0F, "testNewCrapImageGeneratorDir", "testNewCrapImageGeneratorFilename", false, 100.0F, 1.0F);
        BufferedImage result = (BufferedImage) callPrivateMethod("org.crap4j.gauge.NewCrapImageGenerator", "makeGauge", new Class[] {}, newCrapImageGenerator, new Object[] {});
        assertNull("result.getAlphaRaster()", result.getAlphaRaster());
    }
    
    public void testMakeGauge2() throws Throwable {
        NewCrapImageGenerator newCrapImageGenerator = new NewCrapImageGenerator(0.0F, "testNewCrapImageGeneratorDir", "testNewCrapImageGeneratorFilename", true, 100.0F, 1.0F);
        BufferedImage result = (BufferedImage) callPrivateMethod("org.crap4j.gauge.NewCrapImageGenerator", "makeGauge", new Class[] {}, newCrapImageGenerator, new Object[] {});
        assertNull("result.getAlphaRaster()", result.getAlphaRaster());
    }
    
    public void testMakeGauge3() throws Throwable {
        NewCrapImageGenerator newCrapImageGenerator = new NewCrapImageGenerator(0.0F, "testNewCrapImageGeneratorDir", "testNewCrapImageGeneratorFilename", false, 100.0F, 1000.0F);
        BufferedImage result = (BufferedImage) callPrivateMethod("org.crap4j.gauge.NewCrapImageGenerator", "makeGauge", new Class[] {}, newCrapImageGenerator, new Object[] {});
        assertNull("result.getAlphaRaster()", result.getAlphaRaster());
    }
    
    public void testMakeGauge4() throws Throwable {
        NewCrapImageGenerator newCrapImageGenerator = new NewCrapImageGenerator(-1.0F, "testNewCrapImageGeneratorDir", "testNewCrapImageGeneratorFilename", true, 100.0F, -0.998F);
        BufferedImage result = (BufferedImage) callPrivateMethod("org.crap4j.gauge.NewCrapImageGenerator", "makeGauge", new Class[] {}, newCrapImageGenerator, new Object[] {});
        assertNull("result.getAlphaRaster()", result.getAlphaRaster());
    }
    
    public void testMakeGauge5() throws Throwable {
        NewCrapImageGenerator newCrapImageGenerator = new NewCrapImageGenerator(-1.0F, "testNewCrapImageGeneratorDir", "testNewCrapImageGeneratorFilename", false, -24.0F, 100.0F);
        BufferedImage result = (BufferedImage) callPrivateMethod("org.crap4j.gauge.NewCrapImageGenerator", "makeGauge", new Class[] {}, newCrapImageGenerator, new Object[] {});
        assertNull("result.getAlphaRaster()", result.getAlphaRaster());
    }
    
    public void testMakeGauge6() throws Throwable {
        NewCrapImageGenerator newCrapImageGenerator = new NewCrapImageGenerator(0.0F, "testNewCrapImageGeneratorDir", "testNewCrapImageGeneratorFilename", false, 100.0F, 1.0F);
        BufferedImage result = (BufferedImage) callPrivateMethod("org.crap4j.gauge.NewCrapImageGenerator", "makeGauge", new Class[] {}, newCrapImageGenerator, new Object[] {});
        assertNull("result.getAlphaRaster()", result.getAlphaRaster());
    }
    
    public void testMakeGauge7() throws Throwable {
        NewCrapImageGenerator newCrapImageGenerator = new NewCrapImageGenerator(100.0F, "testNewCrapImageGeneratorDir", "testNewCrapImageGeneratorFilename", true, 0.0F, -0.998F);
        BufferedImage result = (BufferedImage) callPrivateMethod("org.crap4j.gauge.NewCrapImageGenerator", "makeGauge", new Class[] {}, newCrapImageGenerator, new Object[] {});
        assertNull("result.getAlphaRaster()", result.getAlphaRaster());
    }
    
    public void testMakeGauge8() throws Throwable {
        NewCrapImageGenerator newCrapImageGenerator = new NewCrapImageGenerator(21.944967F, "testNewCrapImageGeneratorDir", "testNewCrapImageGeneratorFilename", true, 0.0F, -1.0F);
        BufferedImage result = (BufferedImage) callPrivateMethod("org.crap4j.gauge.NewCrapImageGenerator", "makeGauge", new Class[] {}, newCrapImageGenerator, new Object[] {});
        assertNull("result.getAlphaRaster()", result.getAlphaRaster());
    }
    
    public void testMakeGauge9() throws Throwable {
        NewCrapImageGenerator newCrapImageGenerator = new NewCrapImageGenerator(-1.0F, "testNewCrapImageGeneratorDir", "testNewCrapImageGeneratorFilename", false, 100.0F, -1.0F);
        BufferedImage result = (BufferedImage) callPrivateMethod("org.crap4j.gauge.NewCrapImageGenerator", "makeGauge", new Class[] {}, newCrapImageGenerator, new Object[] {});
        assertNull("result.getAlphaRaster()", result.getAlphaRaster());
    }
    
    public void testMakeGauge10() throws Throwable {
        NewCrapImageGenerator newCrapImageGenerator = new NewCrapImageGenerator(21.944967F, "testNewCrapImageGeneratorDir", "testNewCrapImageGeneratorFilename", false, 0.0F, 100.0F);
        BufferedImage result = (BufferedImage) callPrivateMethod("org.crap4j.gauge.NewCrapImageGenerator", "makeGauge", new Class[] {}, newCrapImageGenerator, new Object[] {});
        assertNull("result.getAlphaRaster()", result.getAlphaRaster());
    }
    
    public void testMakeGauge11() throws Throwable {
        NewCrapImageGenerator newCrapImageGenerator = new NewCrapImageGenerator(-1.0F, "testNewCrapImageGeneratorDir", "testNewCrapImageGeneratorFilename", true, 100.0F, -1.0F);
        BufferedImage result = (BufferedImage) callPrivateMethod("org.crap4j.gauge.NewCrapImageGenerator", "makeGauge", new Class[] {}, newCrapImageGenerator, new Object[] {});
        assertNull("result.getAlphaRaster()", result.getAlphaRaster());
    }
    
    public void testMakeGauge12() throws Throwable {
        NewCrapImageGenerator newCrapImageGenerator = new NewCrapImageGenerator(1000.0F, "testNewCrapImageGeneratorDir", "testNewCrapImageGeneratorFilename", false, 100.0F, 0.0F);
        BufferedImage result = (BufferedImage) callPrivateMethod("org.crap4j.gauge.NewCrapImageGenerator", "makeGauge", new Class[] {}, newCrapImageGenerator, new Object[] {});
        assertNull("result.getAlphaRaster()", result.getAlphaRaster());
    }
    
    public void testMakeGauge13() throws Throwable {
        NewCrapImageGenerator newCrapImageGenerator = new NewCrapImageGenerator(-1.0F, "testNewCrapImageGeneratorDir", "testNewCrapImageGeneratorFilename", false, 100.0F, 1000.0F);
        BufferedImage result = (BufferedImage) callPrivateMethod("org.crap4j.gauge.NewCrapImageGenerator", "makeGauge", new Class[] {}, newCrapImageGenerator, new Object[] {});
        assertNull("result.getAlphaRaster()", result.getAlphaRaster());
    }
    
    public void testMakeGauge14() throws Throwable {
        NewCrapImageGenerator newCrapImageGenerator = new NewCrapImageGenerator(21.944967F, "testNewCrapImageGeneratorDir", "testNewCrapImageGeneratorFilename", true, 0.0F, 1.0F);
        BufferedImage result = (BufferedImage) callPrivateMethod("org.crap4j.gauge.NewCrapImageGenerator", "makeGauge", new Class[] {}, newCrapImageGenerator, new Object[] {});
        assertNull("result.getAlphaRaster()", result.getAlphaRaster());
    }
    
    public void testMakeGauge15() throws Throwable {
        NewCrapImageGenerator newCrapImageGenerator = new NewCrapImageGenerator(21.944967F, "testNewCrapImageGeneratorDir", "testNewCrapImageGeneratorFilename", true, 0.0F, 100.0F);
        BufferedImage result = (BufferedImage) callPrivateMethod("org.crap4j.gauge.NewCrapImageGenerator", "makeGauge", new Class[] {}, newCrapImageGenerator, new Object[] {});
        assertNull("result.getAlphaRaster()", result.getAlphaRaster());
    }
    
    public void testMakeGauge16() throws Throwable {
        NewCrapImageGenerator newCrapImageGenerator = new NewCrapImageGenerator(100.0F, "testNewCrapImageGeneratorDir", "testNewCrapImageGeneratorFilename", false, 1000.0F, -1.0F);
        BufferedImage result = (BufferedImage) callPrivateMethod("org.crap4j.gauge.NewCrapImageGenerator", "makeGauge", new Class[] {}, newCrapImageGenerator, new Object[] {});
        assertNull("result.getAlphaRaster()", result.getAlphaRaster());
    }
    
    public void testMakeGauge17() throws Throwable {
        NewCrapImageGenerator newCrapImageGenerator = new NewCrapImageGenerator(21.944967F, "testNewCrapImageGeneratorDir", "testNewCrapImageGeneratorFilename", true, 100.0F, -0.998F);
        BufferedImage result = (BufferedImage) callPrivateMethod("org.crap4j.gauge.NewCrapImageGenerator", "makeGauge", new Class[] {}, newCrapImageGenerator, new Object[] {});
        assertNull("result.getAlphaRaster()", result.getAlphaRaster());
    }
    
    public void testMakeGauge18() throws Throwable {
        NewCrapImageGenerator newCrapImageGenerator = new NewCrapImageGenerator(1.0F, "testNewCrapImageGeneratorDir", "testNewCrapImageGeneratorFilename", false, 0.0F, 100.0F);
        BufferedImage result = (BufferedImage) callPrivateMethod("org.crap4j.gauge.NewCrapImageGenerator", "makeGauge", new Class[] {}, newCrapImageGenerator, new Object[] {});
        assertNull("result.getAlphaRaster()", result.getAlphaRaster());
    }
    
    public void testMakeGauge19() throws Throwable {
        NewCrapImageGenerator newCrapImageGenerator = new NewCrapImageGenerator(21.944967F, "testNewCrapImageGeneratorDir", "testNewCrapImageGeneratorFilename", true, 0.0F, -0.998F);
        BufferedImage result = (BufferedImage) callPrivateMethod("org.crap4j.gauge.NewCrapImageGenerator", "makeGauge", new Class[] {}, newCrapImageGenerator, new Object[] {});
        assertNull("result.getAlphaRaster()", result.getAlphaRaster());
    }
    
    public void testMakeGauge20() throws Throwable {
        NewCrapImageGenerator newCrapImageGenerator = new NewCrapImageGenerator(0.0F, "testNewCrapImageGeneratorDir", "testNewCrapImageGeneratorFilename", false, 100.0F, -1.0F);
        BufferedImage result = (BufferedImage) callPrivateMethod("org.crap4j.gauge.NewCrapImageGenerator", "makeGauge", new Class[] {}, newCrapImageGenerator, new Object[] {});
        assertNull("result.getAlphaRaster()", result.getAlphaRaster());
    }
    
    public void testMakeGauge21() throws Throwable {
        NewCrapImageGenerator newCrapImageGenerator = new NewCrapImageGenerator(100.0F, "testNewCrapImageGeneratorDir", "testNewCrapImageGeneratorFilename", false, 100.0F, 0.0F);
        BufferedImage result = (BufferedImage) callPrivateMethod("org.crap4j.gauge.NewCrapImageGenerator", "makeGauge", new Class[] {}, newCrapImageGenerator, new Object[] {});
        assertNull("result.getAlphaRaster()", result.getAlphaRaster());
    }
    
    public void testMakeGauge22() throws Throwable {
        NewCrapImageGenerator newCrapImageGenerator = new NewCrapImageGenerator(21.944967F, "testNewCrapImageGeneratorDir", "testNewCrapImageGeneratorFilename", false, 100.0F, 1000.0F);
        BufferedImage result = (BufferedImage) callPrivateMethod("org.crap4j.gauge.NewCrapImageGenerator", "makeGauge", new Class[] {}, newCrapImageGenerator, new Object[] {});
        assertNull("result.getAlphaRaster()", result.getAlphaRaster());
    }
    
    public void testMakeGauge23() throws Throwable {
        NewCrapImageGenerator newCrapImageGenerator = new NewCrapImageGenerator(100.0F, "testNewCrapImageGeneratorDir", "testNewCrapImageGeneratorFilename", false, 0.0F, 1000.0F);
        BufferedImage result = (BufferedImage) callPrivateMethod("org.crap4j.gauge.NewCrapImageGenerator", "makeGauge", new Class[] {}, newCrapImageGenerator, new Object[] {});
        assertNull("result.getAlphaRaster()", result.getAlphaRaster());
    }
    
    public void testMakeGaugeAndWriteToFile() throws Throwable {
        NewCrapImageGenerator newCrapImageGenerator = new NewCrapImageGenerator(100.0F, "testNewCrapImageGeneratorDir", "testNewCrapImageGeneratorFilename", true, 0.0F, 0.0F);
        newCrapImageGenerator.makeGaugeAndWriteToFile();
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testMakeGaugeAndWriteToFile1() throws Throwable {
        NewCrapImageGenerator newCrapImageGenerator = new NewCrapImageGenerator(-1.0F, "testNewCrapImageGeneratorParam2", "testNewCrapImageGeneratorParam3", false, 100.0F, -1.0F);
        newCrapImageGenerator.makeGaugeAndWriteToFile();
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testMakeGaugeAndWriteToFile2() throws Throwable {
        NewCrapImageGenerator newCrapImageGenerator = new NewCrapImageGenerator(100.0F, "testNewCrapImageGeneratorParam2", "testNewCrapImageGeneratorParam3", false, 100.0F, -0.998F);
        newCrapImageGenerator.makeGaugeAndWriteToFile();
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testMakeGaugeAndWriteToFile3() throws Throwable {
        NewCrapImageGenerator newCrapImageGenerator = new NewCrapImageGenerator(21.944967F, "testNewCrapImageGeneratorDir", "testNewCrapImageGeneratorFilename", false, 0.0F, 1.0F);
        newCrapImageGenerator.makeGaugeAndWriteToFile();
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testMakeGaugeAndWriteToFile4() throws Throwable {
        NewCrapImageGenerator newCrapImageGenerator = new NewCrapImageGenerator(21.944967F, "testNewCrapImageGeneratorParam2", "testNewCrapImageGeneratorParam3", true, 100.0F, 1000.0F);
        newCrapImageGenerator.makeGaugeAndWriteToFile();
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testMakeGaugeAndWriteToFile5() throws Throwable {
        NewCrapImageGenerator newCrapImageGenerator = new NewCrapImageGenerator(-1.0F, "testNewCrapImageGeneratorParam2", "testNewCrapImageGeneratorParam3", true, -24.0F, 1.0F);
        newCrapImageGenerator.makeGaugeAndWriteToFile();
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testMakeGaugeAndWriteToFile6() throws Throwable {
        NewCrapImageGenerator newCrapImageGenerator = new NewCrapImageGenerator(1000.0F, "testNewCrapImageGeneratorDir", "testNewCrapImageGeneratorFilename", true, 100.0F, -0.999F);
        newCrapImageGenerator.makeGaugeAndWriteToFile();
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testMakeGaugeAndWriteToFile7() throws Throwable {
        NewCrapImageGenerator newCrapImageGenerator = new NewCrapImageGenerator(21.944967F, "testNewCrapImageGeneratorDir", "testNewCrapImageGeneratorFilename", true, 100.0F, 0.0F);
        newCrapImageGenerator.makeGaugeAndWriteToFile();
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testMakeGaugeAndWriteToFile8() throws Throwable {
        NewCrapImageGenerator newCrapImageGenerator = new NewCrapImageGenerator(100.0F, "testNewCrapImageGeneratorParam2", "testNewCrapImageGeneratorParam3", true, 100.0F, -0.998F);
        newCrapImageGenerator.makeGaugeAndWriteToFile();
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testMakeGaugeAndWriteToFile9() throws Throwable {
        NewCrapImageGenerator newCrapImageGenerator = new NewCrapImageGenerator(21.944967F, "testNewCrapImageGeneratorDir", "testNewCrapImageGeneratorFilename", true, 0.0F, -0.999F);
        newCrapImageGenerator.makeGaugeAndWriteToFile();
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testMakeGaugeAndWriteToFile10() throws Throwable {
        NewCrapImageGenerator newCrapImageGenerator = new NewCrapImageGenerator(0.0F, "testNewCrapImageGeneratorParam2", "testNewCrapImageGeneratorParam3", false, 0.0F, -1.0F);
        newCrapImageGenerator.makeGaugeAndWriteToFile();
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testMakeGaugeAndWriteToFile11() throws Throwable {
        NewCrapImageGenerator newCrapImageGenerator = new NewCrapImageGenerator(100.0F, "testNewCrapImageGeneratorParam2", "testNewCrapImageGeneratorParam3", true, 1000.0F, -1.0F);
        newCrapImageGenerator.makeGaugeAndWriteToFile();
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testMakeGaugeAndWriteToFile12() throws Throwable {
        NewCrapImageGenerator newCrapImageGenerator = new NewCrapImageGenerator(21.944967F, "testNewCrapImageGeneratorDir", "testNewCrapImageGeneratorFilename", true, 0.0F, 1.0F);
        newCrapImageGenerator.makeGaugeAndWriteToFile();
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testMakeGaugeAndWriteToFile13() throws Throwable {
        NewCrapImageGenerator newCrapImageGenerator = new NewCrapImageGenerator(-1.0F, "testNewCrapImageGeneratorParam2", "testNewCrapImageGeneratorParam3", true, 100.0F, 1000.0F);
        newCrapImageGenerator.makeGaugeAndWriteToFile();
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testMakeGaugeAndWriteToFile14() throws Throwable {
        NewCrapImageGenerator newCrapImageGenerator = new NewCrapImageGenerator(21.944967F, "testNewCrapImageGeneratorParam2", "testNewCrapImageGeneratorParam3", false, 100.0F, 1000.0F);
        newCrapImageGenerator.makeGaugeAndWriteToFile();
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testMakeGaugeAndWriteToFile15() throws Throwable {
        NewCrapImageGenerator newCrapImageGenerator = new NewCrapImageGenerator(100.0F, "testNewCrapImageGeneratorParam2", "testNewCrapImageGeneratorParam3", false, 0.0F, -1.0F);
        newCrapImageGenerator.makeGaugeAndWriteToFile();
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testMakeGaugeAndWriteToFile16() throws Throwable {
        NewCrapImageGenerator newCrapImageGenerator = new NewCrapImageGenerator(-1.0F, "testNewCrapImageGeneratorParam2", "testNewCrapImageGeneratorParam3", false, -24.0F, -1.0F);
        newCrapImageGenerator.makeGaugeAndWriteToFile();
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testMakeGaugeAndWriteToFile17() throws Throwable {
        NewCrapImageGenerator newCrapImageGenerator = new NewCrapImageGenerator(0.0F, "testNewCrapImageGeneratorParam2", "testNewCrapImageGeneratorParam3", false, 0.0F, -0.998F);
        newCrapImageGenerator.makeGaugeAndWriteToFile();
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testMakeGaugeAndWriteToFile18() throws Throwable {
        NewCrapImageGenerator newCrapImageGenerator = new NewCrapImageGenerator(-1.0F, "testNewCrapImageGeneratorParam2", "testNewCrapImageGeneratorParam3", true, 100.0F, -1.0F);
        newCrapImageGenerator.makeGaugeAndWriteToFile();
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testMakeGaugeAndWriteToFile19() throws Throwable {
        NewCrapImageGenerator newCrapImageGenerator = new NewCrapImageGenerator(-1.0F, "testNewCrapImageGeneratorParam2", "testNewCrapImageGeneratorParam3", false, -24.0F, 1.0F);
        newCrapImageGenerator.makeGaugeAndWriteToFile();
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testMakeGaugeAndWriteToFile20() throws Throwable {
        NewCrapImageGenerator newCrapImageGenerator = new NewCrapImageGenerator(21.944967F, "testNewCrapImageGeneratorParam2", "testNewCrapImageGeneratorParam3", false, 0.0F, -0.998F);
        newCrapImageGenerator.makeGaugeAndWriteToFile();
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testMakeGaugeAndWriteToFile21() throws Throwable {
        NewCrapImageGenerator newCrapImageGenerator = new NewCrapImageGenerator(-1.0F, "testNewCrapImageGeneratorParam2", "testNewCrapImageGeneratorParam3", false, 100.0F, -0.999F);
        newCrapImageGenerator.makeGaugeAndWriteToFile();
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testMakeGaugeAndWriteToFile22() throws Throwable {
        NewCrapImageGenerator newCrapImageGenerator = new NewCrapImageGenerator(1.0F, "testNewCrapImageGeneratorDir", "testNewCrapImageGeneratorFilename", true, 0.0F, -0.999F);
        newCrapImageGenerator.makeGaugeAndWriteToFile();
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testMakeGaugeAndWriteToFile23() throws Throwable {
        NewCrapImageGenerator newCrapImageGenerator = new NewCrapImageGenerator(1.0F, "testNewCrapImageGeneratorDir", "testNewCrapImageGeneratorFilename", true, 100.0F, 10.0F);
        newCrapImageGenerator.makeGaugeAndWriteToFile();
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testMakeGaugeAndWriteToFile24() throws Throwable {
        NewCrapImageGenerator newCrapImageGenerator = new NewCrapImageGenerator(0.0F, "testNewCrapImageGeneratorParam2", "testNewCrapImageGeneratorParam3", false, -1.0F, 1.0F);
        newCrapImageGenerator.makeGaugeAndWriteToFile();
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testMakeGaugeAndWriteToFile25() throws Throwable {
        NewCrapImageGenerator newCrapImageGenerator = new NewCrapImageGenerator(0.0F, "testNewCrapImageGeneratorParam2", "testNewCrapImageGeneratorParam3", false, -1.0F, -1.0F);
        newCrapImageGenerator.makeGaugeAndWriteToFile();
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testMakeGaugeAndWriteToFile26() throws Throwable {
        NewCrapImageGenerator newCrapImageGenerator = new NewCrapImageGenerator(1.0F, "testNewCrapImageGeneratorParam2", "testNewCrapImageGeneratorParam3", false, 100.0F, 10.0F);
        newCrapImageGenerator.makeGaugeAndWriteToFile();
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testMakeGaugeAndWriteToFile27() throws Throwable {
        NewCrapImageGenerator newCrapImageGenerator = new NewCrapImageGenerator(21.944967F, "testNewCrapImageGeneratorParam2", "testNewCrapImageGeneratorParam3", true, 0.0F, 100.0F);
        newCrapImageGenerator.makeGaugeAndWriteToFile();
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testMakeGaugeAndWriteToFile28() throws Throwable {
        NewCrapImageGenerator newCrapImageGenerator = new NewCrapImageGenerator(-1.0F, "testNewCrapImageGeneratorParam2", "testNewCrapImageGeneratorParam3", false, 100.0F, 0.0F);
        newCrapImageGenerator.makeGaugeAndWriteToFile();
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testMakeGaugeAndWriteToFile29() throws Throwable {
        NewCrapImageGenerator newCrapImageGenerator = new NewCrapImageGenerator(21.944967F, "testNewCrapImageGeneratorParam2", "testNewCrapImageGeneratorParam3", true, 100.0F, -0.998F);
        newCrapImageGenerator.makeGaugeAndWriteToFile();
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testMakeGaugeAndWriteToFile30() throws Throwable {
        NewCrapImageGenerator newCrapImageGenerator = new NewCrapImageGenerator(-1.0F, "testNewCrapImageGeneratorParam2", "testNewCrapImageGeneratorParam3", false, -24.0F, -0.998F);
        newCrapImageGenerator.makeGaugeAndWriteToFile();
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testMakeGaugeAndWriteToFile31() throws Throwable {
        NewCrapImageGenerator newCrapImageGenerator = new NewCrapImageGenerator(15.0F, "testNewCrapImageGeneratorDir", "testNewCrapImageGeneratorFilename", true, 100.0F, 0.0F);
        newCrapImageGenerator.makeGaugeAndWriteToFile();
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testMakeGaugeAndWriteToFile32() throws Throwable {
        NewCrapImageGenerator newCrapImageGenerator = new NewCrapImageGenerator(-1.0F, "testNewCrapImageGeneratorParam2", "testNewCrapImageGeneratorParam3", true, -24.0F, -0.998F);
        newCrapImageGenerator.makeGaugeAndWriteToFile();
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testMakeGaugeAndWriteToFile33() throws Throwable {
        NewCrapImageGenerator newCrapImageGenerator = new NewCrapImageGenerator(21.944967F, "testNewCrapImageGeneratorParam2", "testNewCrapImageGeneratorParam3", true, 0.0F, -1.0F);
        newCrapImageGenerator.makeGaugeAndWriteToFile();
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testMakeGaugeAndWriteToFile34() throws Throwable {
        NewCrapImageGenerator newCrapImageGenerator = new NewCrapImageGenerator(1000.0F, "testNewCrapImageGeneratorDir", "testNewCrapImageGeneratorFilename", false, 100.0F, 0.0F);
        newCrapImageGenerator.makeGaugeAndWriteToFile();
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testMakeGaugeAndWriteToFile35() throws Throwable {
        NewCrapImageGenerator newCrapImageGenerator = new NewCrapImageGenerator(100.0F, "testNewCrapImageGeneratorParam2", "testNewCrapImageGeneratorParam3", true, 0.0F, -1.0F);
        newCrapImageGenerator.makeGaugeAndWriteToFile();
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testMakeGaugeAndWriteToFile36() throws Throwable {
        NewCrapImageGenerator newCrapImageGenerator = new NewCrapImageGenerator(-1.0F, "testNewCrapImageGeneratorParam2", "testNewCrapImageGeneratorParam3", true, 100.0F, 0.0F);
        newCrapImageGenerator.makeGaugeAndWriteToFile();
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testMakeGaugeAndWriteToFile37() throws Throwable {
        NewCrapImageGenerator newCrapImageGenerator = new NewCrapImageGenerator(-1.0F, "testNewCrapImageGeneratorParam2", "testNewCrapImageGeneratorParam3", true, 100.0F, -0.998F);
        newCrapImageGenerator.makeGaugeAndWriteToFile();
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testMakeGaugeAndWriteToFile38() throws Throwable {
        NewCrapImageGenerator newCrapImageGenerator = new NewCrapImageGenerator(0.0F, "testNewCrapImageGeneratorParam2", "testNewCrapImageGeneratorParam3", false, -1.0F, -0.998F);
        newCrapImageGenerator.makeGaugeAndWriteToFile();
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testMakeGaugeAndWriteToFile39() throws Throwable {
        NewCrapImageGenerator newCrapImageGenerator = new NewCrapImageGenerator(21.944967F, "testNewCrapImageGeneratorParam2", "testNewCrapImageGeneratorParam3", false, 0.0F, 100.0F);
        newCrapImageGenerator.makeGaugeAndWriteToFile();
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testMakeGaugeAndWriteToFile40() throws Throwable {
        NewCrapImageGenerator newCrapImageGenerator = new NewCrapImageGenerator(-1.0F, "testNewCrapImageGeneratorParam2", "testNewCrapImageGeneratorParam3", false, -24.0F, 100.0F);
        newCrapImageGenerator.makeGaugeAndWriteToFile();
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testMakeGaugeAndWriteToFile41() throws Throwable {
        NewCrapImageGenerator newCrapImageGenerator = new NewCrapImageGenerator(100.0F, "testNewCrapImageGeneratorParam2", "testNewCrapImageGeneratorParam3", false, 100.0F, 1000.0F);
        newCrapImageGenerator.makeGaugeAndWriteToFile();
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testMakeGaugeAndWriteToFile42() throws Throwable {
        NewCrapImageGenerator newCrapImageGenerator = new NewCrapImageGenerator(1.0F, "testNewCrapImageGeneratorParam2", "testNewCrapImageGeneratorParam3", true, 0.0F, -1.0F);
        newCrapImageGenerator.makeGaugeAndWriteToFile();
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testMakeGaugeAndWriteToFile43() throws Throwable {
        NewCrapImageGenerator newCrapImageGenerator = new NewCrapImageGenerator(-1.0F, "testNewCrapImageGeneratorParam2", "testNewCrapImageGeneratorParam3", true, -24.0F, -1.0F);
        newCrapImageGenerator.makeGaugeAndWriteToFile();
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testMakeGaugeAndWriteToFile44() throws Throwable {
        NewCrapImageGenerator newCrapImageGenerator = new NewCrapImageGenerator(1.0F, "testNewCrapImageGeneratorParam2", "testNewCrapImageGeneratorParam3", true, 100.0F, -1.0F);
        newCrapImageGenerator.makeGaugeAndWriteToFile();
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testMakeGaugeAndWriteToFile45() throws Throwable {
        NewCrapImageGenerator newCrapImageGenerator = new NewCrapImageGenerator(1.0F, "testNewCrapImageGeneratorParam2", "testNewCrapImageGeneratorParam3", true, 100.0F, -0.998F);
        newCrapImageGenerator.makeGaugeAndWriteToFile();
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testMakeGaugeAndWriteToFile46() throws Throwable {
        NewCrapImageGenerator newCrapImageGenerator = new NewCrapImageGenerator(1000.0F, "testNewCrapImageGeneratorParam2", "testNewCrapImageGeneratorParam3", false, 100.0F, -0.998F);
        newCrapImageGenerator.makeGaugeAndWriteToFile();
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testMakeGaugeAndWriteToFile47() throws Throwable {
        NewCrapImageGenerator newCrapImageGenerator = new NewCrapImageGenerator(1.0F, "testNewCrapImageGeneratorDir", "testNewCrapImageGeneratorFilename", false, 100.0F, 1000.0F);
        newCrapImageGenerator.makeGaugeAndWriteToFile();
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testMakeGaugeAndWriteToFile48() throws Throwable {
        NewCrapImageGenerator newCrapImageGenerator = new NewCrapImageGenerator(21.944967F, "testNewCrapImageGeneratorParam2", "testNewCrapImageGeneratorParam3", false, 0.0F, -1.0F);
        newCrapImageGenerator.makeGaugeAndWriteToFile();
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testMakeGaugeAndWriteToFile49() throws Throwable {
        NewCrapImageGenerator newCrapImageGenerator = new NewCrapImageGenerator(100.0F, "testNewCrapImageGeneratorParam2", "testNewCrapImageGeneratorParam3", true, 0.0F, 1000.0F);
        newCrapImageGenerator.makeGaugeAndWriteToFile();
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testMakeGaugeAndWriteToFile50() throws Throwable {
        NewCrapImageGenerator newCrapImageGenerator = new NewCrapImageGenerator(21.944967F, "testNewCrapImageGeneratorParam2", "testNewCrapImageGeneratorParam3", false, 100.0F, -1.0F);
        newCrapImageGenerator.makeGaugeAndWriteToFile();
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testMakeGaugeAndWriteToFile51() throws Throwable {
        NewCrapImageGenerator newCrapImageGenerator = new NewCrapImageGenerator(21.944967F, "testNewCrapImageGeneratorParam2", "testNewCrapImageGeneratorParam3", false, 100.0F, -0.998F);
        newCrapImageGenerator.makeGaugeAndWriteToFile();
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testMakeGaugeAndWriteToFile52() throws Throwable {
        NewCrapImageGenerator newCrapImageGenerator = new NewCrapImageGenerator(100.0F, "testNewCrapImageGeneratorParam2", "testNewCrapImageGeneratorParam3", false, 100.0F, -1.0F);
        newCrapImageGenerator.makeGaugeAndWriteToFile();
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testMakeGaugeAndWriteToFile53() throws Throwable {
        NewCrapImageGenerator newCrapImageGenerator = new NewCrapImageGenerator(21.944967F, "testNewCrapImageGeneratorParam2", "testNewCrapImageGeneratorParam3", true, 100.0F, -1.0F);
        newCrapImageGenerator.makeGaugeAndWriteToFile();
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testMakeGaugeAndWriteToFile54() throws Throwable {
        NewCrapImageGenerator newCrapImageGenerator = new NewCrapImageGenerator(-1.0F, "testNewCrapImageGeneratorParam2", "testNewCrapImageGeneratorParam3", false, 100.0F, 1000.0F);
        newCrapImageGenerator.makeGaugeAndWriteToFile();
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testMakeGaugeAndWriteToFile55() throws Throwable {
        NewCrapImageGenerator newCrapImageGenerator = new NewCrapImageGenerator(100.0F, "testNewCrapImageGeneratorParam2", "testNewCrapImageGeneratorParam3", true, 100.0F, 1000.0F);
        newCrapImageGenerator.makeGaugeAndWriteToFile();
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testMakeGaugeAndWriteToFile56() throws Throwable {
        NewCrapImageGenerator newCrapImageGenerator = new NewCrapImageGenerator(1.0F, "testNewCrapImageGeneratorParam2", "testNewCrapImageGeneratorParam3", true, 0.0F, 10.0F);
        newCrapImageGenerator.makeGaugeAndWriteToFile();
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testMakeGaugeAndWriteToFile57() throws Throwable {
        NewCrapImageGenerator newCrapImageGenerator = new NewCrapImageGenerator(100.0F, "testNewCrapImageGeneratorParam2", "testNewCrapImageGeneratorParam3", false, 0.0F, 1000.0F);
        newCrapImageGenerator.makeGaugeAndWriteToFile();
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testMakeGaugeAndWriteToFile58() throws Throwable {
        NewCrapImageGenerator newCrapImageGenerator = new NewCrapImageGenerator(100.0F, "testNewCrapImageGeneratorParam2", "testNewCrapImageGeneratorParam3", false, 100.0F, 1.0F);
        newCrapImageGenerator.makeGaugeAndWriteToFile();
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testMakeGaugeAndWriteToFile59() throws Throwable {
        NewCrapImageGenerator newCrapImageGenerator = new NewCrapImageGenerator(100.0F, "testNewCrapImageGeneratorParam2", "testNewCrapImageGeneratorParam3", true, 100.0F, 1.0F);
        newCrapImageGenerator.makeGaugeAndWriteToFile();
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testMakeGaugeAndWriteToFileWithAggressiveMocks() throws Throwable {
        storeStaticField(GlobalStats.class, "NULL_STATS");
        NewCrapImageGenerator newCrapImageGenerator = (NewCrapImageGenerator) Mockingbird.getProxyObject(NewCrapImageGenerator.class, true);
        Graphics2D graphics2D = (Graphics2D) Mockingbird.getProxyObject(Graphics2D.class);
        GlobalStats globalStats = (GlobalStats) Mockingbird.getProxyObject(GlobalStats.class);
        IOException iOException = (IOException) Mockingbird.getProxyObject(IOException.class);
        setPrivateField(newCrapImageGenerator, "useBlueBackground", Boolean.FALSE);
        setPrivateField(newCrapImageGenerator, "crapScore", new Float(2.8E-45F));
        setPrivateField(newCrapImageGenerator, "globalAverage", new Float(Float.MIN_VALUE));
        setPrivateField(newCrapImageGenerator, "dir", "");
        setPrivateField(newCrapImageGenerator, "crapGaugeFilename", "");
        Mockingbird.enterRecordingMode();
        BufferedImage bufferedImage = (BufferedImage) Mockingbird.getProxyObject(BufferedImage.class);
        Mockingbird.replaceObjectForRecording(BufferedImage.class, "<init>(int,int,int)", bufferedImage);
        RenderingHints.Key KEY_ANTIALIASING = RenderingHints.KEY_ANTIALIASING;
        Object VALUE_ANTIALIAS_ON = RenderingHints.VALUE_ANTIALIAS_ON;
        RenderingHints.Key KEY_RENDERING = RenderingHints.KEY_RENDERING;
        Object VALUE_RENDER_QUALITY = RenderingHints.VALUE_RENDER_QUALITY;
        setPrivateField(GlobalStats.class, "NULL_STATS", globalStats);
        Mockingbird.enterNormalMode();
        globalStats.setCrapAverage(2.8E-45F);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, bufferedImage, "createGraphics", "()java.awt.Graphics2D", new Object[] {}, graphics2D, 1);
        graphics2D.setRenderingHint(KEY_ANTIALIASING, VALUE_ANTIALIAS_ON);
        Mockingbird.setNormalReturnForVoid();
        graphics2D.setRenderingHint(KEY_RENDERING, VALUE_RENDER_QUALITY);
        Mockingbird.setNormalReturnForVoid();
        Color color = (Color) Mockingbird.getProxyObject(Color.class);
        Mockingbird.replaceObjectForRecording(Color.class, "<init>(int,int,int)", color);
        graphics2D.setBackground(color);
        Mockingbird.setNormalReturnForVoid();
        graphics2D.clearRect(0, 0, 500, 115);
        Mockingbird.setNormalReturnForVoid();
        Object[] objects = new Object[] {graphics2D, new Integer(40), new Integer(6), new Integer(420), new Integer(40)};
        Mockingbird.setReturnValue(false, newCrapImageGenerator, "drawShadowRect", "(java.awt.Graphics2D,int,int,int,int)void", objects, null, 1);
        Object[] objects2 = new Object[] {graphics2D, new Integer(40), new Integer(6), new Integer(140), new Integer(40)};
        Mockingbird.setReturnValue(false, newCrapImageGenerator, "drawGreenRect", "(java.awt.Graphics2D,int,int,int,int)void", objects2, null, 1);
        Object[] objects3 = new Object[] {graphics2D, new Integer(180), new Integer(6), new Integer(280), new Integer(40)};
        Mockingbird.setReturnValue(false, newCrapImageGenerator, "drawRedRect", "(java.awt.Graphics2D,int,int,int,int)void", objects3, null, 1);
        Mockingbird.setReturnValue(false, newCrapImageGenerator, "drawIncrementsOnGauge", "(java.awt.Graphics2D,int,int,int)void", new Object[] {graphics2D, new Integer(420), new Integer(60), new Integer(40)}, null, 1);
        Object[] objects4 = new Object[] {new Integer(420), new Integer(54), graphics2D, new Float(2.8E-45F), new Integer(40), new Integer(30), new Integer(20)};
        Mockingbird.setReturnValue(false, newCrapImageGenerator, "drawProjectMarker", "(int,int,java.awt.Graphics2D,float,int,int,int)void", objects4, null, 1);
        Object[] objects5 = new Object[] {new Integer(420), new Integer(0), graphics2D, new Float(Float.MIN_VALUE), new Integer(40), new Integer(30), new Integer(20)};
        Mockingbird.setReturnValue(false, newCrapImageGenerator, "drawGlobalAvgMarker", "(int,int,java.awt.Graphics2D,float,int,int,int)void", objects5, null, 1);
        Mockingbird.setReturnValue(false, newCrapImageGenerator, "drawLegend", "(java.awt.Graphics2D,int,int,int)void", new Object[] {graphics2D, new Integer(420), new Integer(108), new Integer(40)}, null, 1);
        Mockingbird.replaceObjectForRecording(File.class, "<init>(java.lang.String,java.lang.String)", Mockingbird.getProxyObject(File.class));
        FileOutputStream fileOutputStream = (FileOutputStream) Mockingbird.getProxyObject(FileOutputStream.class);
        Mockingbird.replaceObjectForRecording(FileOutputStream.class, "<init>(java.io.File)", fileOutputStream);
        Mockingbird.setReturnValue(true, ImageIO.class, "write", "(java.awt.image.RenderedImage,java.lang.String,java.io.OutputStream)boolean", new Object[] {bufferedImage, "png", fileOutputStream}, Boolean.FALSE, 1);
        Mockingbird.setException(false, fileOutputStream, "close", "()void", new Object[] {}, iOException, 1);
        Mockingbird.setReturnValue(false, iOException, "printStackTrace", "()void", new Object[] {}, null, 1);
        Mockingbird.enterTestMode(NewCrapImageGenerator.class);
        newCrapImageGenerator.makeGaugeAndWriteToFile();
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testMakeTriangle() throws Throwable {
        NewCrapImageGenerator newCrapImageGenerator = new NewCrapImageGenerator(100.0F, "testNewCrapImageGeneratorDir", "testNewCrapImageGeneratorFilename", true, 1000.0F, 0.0F);
        Polygon result = (Polygon) callPrivateMethod("org.crap4j.gauge.NewCrapImageGenerator", "makeTriangle", new Class[] {int.class, int.class, int.class, int.class, int.class, int.class}, newCrapImageGenerator, new Object[] {new Integer(100), new Integer(1000), new Integer(0), new Integer(-1), new Integer(1), new Integer(10)});
        assertNotNull("result", result);
    }
    
    public void testMakeTrianglePointDown() throws Throwable {
        NewCrapImageGenerator newCrapImageGenerator = new NewCrapImageGenerator(100.0F, "testNewCrapImageGeneratorDir", "testNewCrapImageGeneratorFilename", true, 1000.0F, 0.0F);
        Polygon result = (Polygon) callPrivateMethod("org.crap4j.gauge.NewCrapImageGenerator", "makeTrianglePointDown", new Class[] {int.class, int.class, int.class, int.class}, newCrapImageGenerator, new Object[] {new Integer(100), new Integer(1000), new Integer(0), new Integer(-1)});
        assertNotNull("result", result);
    }
    
    public void testMakeTrianglePointUp() throws Throwable {
        NewCrapImageGenerator newCrapImageGenerator = new NewCrapImageGenerator(100.0F, "testNewCrapImageGeneratorDir", "testNewCrapImageGeneratorFilename", true, 1000.0F, 0.0F);
        Polygon result = (Polygon) callPrivateMethod("org.crap4j.gauge.NewCrapImageGenerator", "makeTrianglePointUp", new Class[] {int.class, int.class, int.class, int.class}, newCrapImageGenerator, new Object[] {new Integer(100), new Integer(1000), new Integer(0), new Integer(-1)});
        assertNotNull("result", result);
    }
    
    public void testScaleOffsetForScore() throws Throwable {
        NewCrapImageGenerator newCrapImageGenerator = new NewCrapImageGenerator(100.0F, "testNewCrapImageGeneratorDir", "testNewCrapImageGeneratorFilename", true, 1000.0F, 0.0F);
        int result = ((Number) callPrivateMethod("org.crap4j.gauge.NewCrapImageGenerator", "scaleOffsetForScore", new Class[] {int.class, float.class, int.class, int.class}, newCrapImageGenerator, new Object[] {new Integer(100), new Float(0.0F), new Integer(1000), new Integer(0)})).intValue();
        assertEquals("result", 1000, result);
    }
    
    public void testScaleOffsetForScore1() throws Throwable {
        NewCrapImageGenerator newCrapImageGenerator = new NewCrapImageGenerator(100.0F, "testNewCrapImageGeneratorDir", "testNewCrapImageGeneratorFilename", true, 1000.0F, 0.0F);
        int result = ((Number) callPrivateMethod("org.crap4j.gauge.NewCrapImageGenerator", "scaleOffsetForScore", new Class[] {int.class, float.class, int.class, int.class}, newCrapImageGenerator, new Object[] {new Integer(100), new Float(-1.0F), new Integer(1000), new Integer(0)})).intValue();
        assertEquals("result", 0, result);
    }
    
    public void testScaleOffsetForScore2() throws Throwable {
        NewCrapImageGenerator newCrapImageGenerator = new NewCrapImageGenerator(100.0F, "testNewCrapImageGeneratorDir", "testNewCrapImageGeneratorFilename", true, 1000.0F, 0.0F);
        int result = ((Number) callPrivateMethod("org.crap4j.gauge.NewCrapImageGenerator", "scaleOffsetForScore", new Class[] {int.class, float.class, int.class, int.class}, newCrapImageGenerator, new Object[] {new Integer(100), new Float(100.0F), new Integer(1000), new Integer(0)})).intValue();
        assertEquals("result", 1100, result);
    }
    
    public void testShowUsage() throws Throwable {
        callPrivateMethod("org.crap4j.gauge.NewCrapImageGenerator", "showUsage", new Class[] {}, null, new Object[] {});
        boolean actual = ((Boolean) callPrivateMethod("org.crap4j.gauge.NewCrapImageGenerator", "isRunningHeadless", new Class[] {}, null, new Object[] {})).booleanValue();
        assertFalse(".isRunningHeadless()", actual);
    }
    
    public void testValidateArgs() throws Throwable {
        String[] strings = new String[1];
        callPrivateMethod("org.crap4j.gauge.NewCrapImageGenerator", "validateArgs", new Class[] {String[].class}, null, new Object[] {strings});
        boolean actual = ((Boolean) callPrivateMethod("org.crap4j.gauge.NewCrapImageGenerator", "isRunningHeadless", new Class[] {}, null, new Object[] {})).booleanValue();
        assertFalse(".isRunningHeadless()", actual);
    }
    
    public void testValidateArgs1() throws Throwable {
        PrintStream printStream = (PrintStream) Mockingbird.getProxyObject(PrintStream.class);
        MockingbirdSystem.out = printStream;
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, printStream, "println", "(java.lang.String)void", new Object[] {"Usage: crapScore destination_directory"}, null, 1);
        Mockingbird.setReturnValue(true, System.class, "exit", "(int)void", new Object[] {new Integer(0)}, null, 1);
        Mockingbird.enterTestMode(NewCrapImageGenerator.class);
        callPrivateMethod("org.crap4j.gauge.NewCrapImageGenerator", "validateArgs", new Class[] {String[].class}, null, new Object[] {null});
        boolean actual = ((Boolean) callPrivateMethod("org.crap4j.gauge.NewCrapImageGenerator", "isRunningHeadless", new Class[] {}, null, new Object[] {})).booleanValue();
        assertFalse(".isRunningHeadless()", actual);
    }
    
    public void testValidateArgs2() throws Throwable {
        String[] strings = new String[0];
        PrintStream printStream = (PrintStream) Mockingbird.getProxyObject(PrintStream.class);
        MockingbirdSystem.out = printStream;
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, printStream, "println", "(java.lang.String)void", new Object[] {"Usage: crapScore destination_directory"}, null, 1);
        Mockingbird.setReturnValue(true, System.class, "exit", "(int)void", new Object[] {new Integer(0)}, null, 1);
        Mockingbird.enterTestMode(NewCrapImageGenerator.class);
        callPrivateMethod("org.crap4j.gauge.NewCrapImageGenerator", "validateArgs", new Class[] {String[].class}, null, new Object[] {strings});
        boolean actual = ((Boolean) callPrivateMethod("org.crap4j.gauge.NewCrapImageGenerator", "isRunningHeadless", new Class[] {}, null, new Object[] {})).booleanValue();
        assertFalse(".isRunningHeadless()", actual);
    }
    
    public void testValidateCrapScore() throws Throwable {
        Object result = callPrivateMethod("org.crap4j.gauge.NewCrapImageGenerator", "validateCrapScore", new Class[] {String.class}, null, new Object[] {null});
        assertNull("result", result);
    }
    
    public void testValidateCrapScore1() throws Throwable {
        String result = (String) callPrivateMethod("org.crap4j.gauge.NewCrapImageGenerator", "validateCrapScore", new Class[] {String.class}, null, new Object[] {"testNewCrapImageGeneratorCrapScore"});
        assertEquals("result", "testNewCrapImageGeneratorCrapScore", result);
    }
    
    public void testValidateCrapScore2() throws Throwable {
        String result = (String) callPrivateMethod("org.crap4j.gauge.NewCrapImageGenerator", "validateCrapScore", new Class[] {String.class}, null, new Object[] {""});
        assertEquals("result", "", result);
    }
    
    public void testValidateOutputDirectory() throws Throwable {
        String result = (String) callPrivateMethod("org.crap4j.gauge.NewCrapImageGenerator", "validateOutputDirectory", new Class[] {String.class}, null, new Object[] {"testNewCrapImageGeneratorDir"});
        assertEquals("result", "testNewCrapImageGeneratorDir", result);
    }
    
    public void testValidateOutputDirectory1() throws Throwable {
        String result = (String) callPrivateMethod("org.crap4j.gauge.NewCrapImageGenerator", "validateOutputDirectory", new Class[] {String.class}, null, new Object[] {" "});
        assertEquals("result", " ", result);
    }
    
    public void testValidateOutputDirectory2() throws Throwable {
        PrintStream printStream = (PrintStream) Mockingbird.getProxyObject(PrintStream.class);
        MockingbirdSystem.out = printStream;
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, printStream, "println", "(java.lang.String)void", new Object[] {"Usage: crapScore destination_directory"}, null, 1);
        Mockingbird.setReturnValue(true, System.class, "exit", "(int)void", new Object[] {new Integer(0)}, null, 1);
        Mockingbird.enterTestMode(NewCrapImageGenerator.class);
        String result = (String) callPrivateMethod("org.crap4j.gauge.NewCrapImageGenerator", "validateOutputDirectory", new Class[] {String.class}, null, new Object[] {null});
        assertNull("result", result);
    }
    
    public void testWriteImageToFile() throws Throwable {
        NewCrapImageGenerator newCrapImageGenerator = new NewCrapImageGenerator(100.0F, "testNewCrapImageGeneratorDir", "testNewCrapImageGeneratorFilename", true, 1000.0F, 0.0F);
        callPrivateMethod("org.crap4j.gauge.NewCrapImageGenerator", "writeImageToFile", new Class[] {BufferedImage.class}, newCrapImageGenerator, new Object[] {new BufferedImage(100, 1000, 1)});
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testDisplayOnScreenThrowsHeadlessException() throws Throwable {
        try {
            callPrivateMethod("org.crap4j.gauge.NewCrapImageGenerator", "displayOnScreen", new Class[] {BufferedImage.class}, null, new Object[] {new BufferedImage(100, 1000, 1)});
            fail("Expected HeadlessException to be thrown");
        } catch (HeadlessException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(GraphicsEnvironment.class, ex);
        }
    }
    
    public void testDrawCrapScoreThrowsNullPointerException() throws Throwable {
        NewCrapImageGenerator newCrapImageGenerator = new NewCrapImageGenerator(0.47319025F, "testNewCrapImageGeneratorDir", "testNewCrapImageGeneratorFilename", true, 0.47319025F, 100.0F);
        try {
            callPrivateMethod("org.crap4j.gauge.NewCrapImageGenerator", "drawCrapScore", new Class[] {int.class, int.class, Graphics2D.class, float.class, int.class, int.class}, newCrapImageGenerator, new Object[] {new Integer(100), new Integer(1000), null, new Float(100.0F), new Integer(0), new Integer(-1)});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(NewCrapImageGenerator.class, ex);
        }
    }
    
    public void testDrawCrapScoreThrowsNullPointerException1() throws Throwable {
        NewCrapImageGenerator newCrapImageGenerator = new NewCrapImageGenerator(100.0F, "testNewCrapImageGeneratorDir", "testNewCrapImageGeneratorFilename", true, 0.0F, 1000.0F);
        try {
            callPrivateMethod("org.crap4j.gauge.NewCrapImageGenerator", "drawCrapScore", new Class[] {int.class, int.class, Graphics2D.class, float.class, int.class, int.class}, newCrapImageGenerator, new Object[] {new Integer(100), new Integer(1000), null, new Float(100.0F), new Integer(0), new Integer(-1)});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(NewCrapImageGenerator.class, ex);
        }
    }
    
    public void testDrawDownwardMarkerThrowsNullPointerException() throws Throwable {
        NewCrapImageGenerator newCrapImageGenerator = new NewCrapImageGenerator(100.0F, "testNewCrapImageGeneratorDir", "testNewCrapImageGeneratorFilename", true, 1000.0F, 0.0F);
        try {
            callPrivateMethod("org.crap4j.gauge.NewCrapImageGenerator", "drawDownwardMarker", new Class[] {Graphics2D.class, int.class, int.class, int.class, int.class}, newCrapImageGenerator, new Object[] {null, new Integer(100), new Integer(1000), new Integer(0), new Integer(-1)});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(NewCrapImageGenerator.class, ex);
        }
    }
    
    public void testDrawGlobalAvgMarkerThrowsNullPointerException() throws Throwable {
        NewCrapImageGenerator newCrapImageGenerator = new NewCrapImageGenerator(100.0F, "testNewCrapImageGeneratorDir", "testNewCrapImageGeneratorFilename", true, 1000.0F, 0.0F);
        try {
            callPrivateMethod("org.crap4j.gauge.NewCrapImageGenerator", "drawGlobalAvgMarker", new Class[] {int.class, int.class, Graphics2D.class, float.class, int.class, int.class, int.class}, newCrapImageGenerator, new Object[] {new Integer(100), new Integer(1000), null, new Float(0.0F), new Integer(0), new Integer(-1), new Integer(1)});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(NewCrapImageGenerator.class, ex);
        }
    }
    
    public void testDrawGlobalAvgMarkerThrowsNullPointerException1() throws Throwable {
        NewCrapImageGenerator newCrapImageGenerator = new NewCrapImageGenerator(100.0F, "testNewCrapImageGeneratorDir", "testNewCrapImageGeneratorFilename", true, 1000.0F, 0.0F);
        try {
            callPrivateMethod("org.crap4j.gauge.NewCrapImageGenerator", "drawGlobalAvgMarker", new Class[] {int.class, int.class, Graphics2D.class, float.class, int.class, int.class, int.class}, newCrapImageGenerator, new Object[] {new Integer(100), new Integer(1000), null, new Float(-1.0F), new Integer(0), new Integer(-1), new Integer(1)});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(NewCrapImageGenerator.class, ex);
        }
    }
    
    public void testDrawGlobalAvgMarkerThrowsNullPointerException2() throws Throwable {
        NewCrapImageGenerator newCrapImageGenerator = new NewCrapImageGenerator(100.0F, "testNewCrapImageGeneratorDir", "testNewCrapImageGeneratorFilename", true, 1000.0F, 0.0F);
        try {
            callPrivateMethod("org.crap4j.gauge.NewCrapImageGenerator", "drawGlobalAvgMarker", new Class[] {int.class, int.class, Graphics2D.class, float.class, int.class, int.class, int.class}, newCrapImageGenerator, new Object[] {new Integer(100), new Integer(1000), null, new Float(100.0F), new Integer(0), new Integer(-1), new Integer(1)});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(NewCrapImageGenerator.class, ex);
        }
    }
    
    public void testDrawGreenRectThrowsNullPointerException() throws Throwable {
        NewCrapImageGenerator newCrapImageGenerator = new NewCrapImageGenerator(100.0F, "testNewCrapImageGeneratorDir", "testNewCrapImageGeneratorFilename", true, 1000.0F, 0.0F);
        try {
            callPrivateMethod("org.crap4j.gauge.NewCrapImageGenerator", "drawGreenRect", new Class[] {Graphics2D.class, int.class, int.class, int.class, int.class}, newCrapImageGenerator, new Object[] {null, new Integer(100), new Integer(1000), new Integer(0), new Integer(-1)});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(NewCrapImageGenerator.class, ex);
        }
    }
    
    public void testDrawIncrementsOnGaugeThrowsNullPointerException() throws Throwable {
        NewCrapImageGenerator newCrapImageGenerator = new NewCrapImageGenerator(100.0F, "testNewCrapImageGeneratorDir", "testNewCrapImageGeneratorFilename", true, 1000.0F, 0.0F);
        try {
            callPrivateMethod("org.crap4j.gauge.NewCrapImageGenerator", "drawIncrementsOnGauge", new Class[] {Graphics2D.class, int.class, int.class, int.class}, newCrapImageGenerator, new Object[] {null, new Integer(100), new Integer(1000), new Integer(0)});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(NewCrapImageGenerator.class, ex);
        }
    }
    
    public void testDrawLegendThrowsNullPointerException() throws Throwable {
        NewCrapImageGenerator newCrapImageGenerator = new NewCrapImageGenerator(100.0F, "testNewCrapImageGeneratorDir", "testNewCrapImageGeneratorFilename", true, 1000.0F, 0.0F);
        try {
            callPrivateMethod("org.crap4j.gauge.NewCrapImageGenerator", "drawLegend", new Class[] {Graphics2D.class, int.class, int.class, int.class}, newCrapImageGenerator, new Object[] {null, new Integer(100), new Integer(1000), new Integer(0)});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(NewCrapImageGenerator.class, ex);
        }
    }
    
    public void testDrawProjectMarkerThrowsNullPointerException() throws Throwable {
        NewCrapImageGenerator newCrapImageGenerator = new NewCrapImageGenerator(100.0F, "testNewCrapImageGeneratorDir", "testNewCrapImageGeneratorFilename", true, 1000.0F, 0.0F);
        try {
            callPrivateMethod("org.crap4j.gauge.NewCrapImageGenerator", "drawProjectMarker", new Class[] {int.class, int.class, Graphics2D.class, float.class, int.class, int.class, int.class}, newCrapImageGenerator, new Object[] {new Integer(100), new Integer(1000), null, new Float(100.0F), new Integer(0), new Integer(-1), new Integer(1)});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(NewCrapImageGenerator.class, ex);
        }
    }
    
    public void testDrawRedRectThrowsNullPointerException() throws Throwable {
        NewCrapImageGenerator newCrapImageGenerator = new NewCrapImageGenerator(100.0F, "testNewCrapImageGeneratorDir", "testNewCrapImageGeneratorFilename", true, 1000.0F, 0.0F);
        try {
            callPrivateMethod("org.crap4j.gauge.NewCrapImageGenerator", "drawRedRect", new Class[] {Graphics2D.class, int.class, int.class, int.class, int.class}, newCrapImageGenerator, new Object[] {null, new Integer(100), new Integer(1000), new Integer(0), new Integer(-1)});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(NewCrapImageGenerator.class, ex);
        }
    }
    
    public void testDrawShadowRectThrowsNullPointerException() throws Throwable {
        NewCrapImageGenerator newCrapImageGenerator = new NewCrapImageGenerator(100.0F, "testNewCrapImageGeneratorDir", "testNewCrapImageGeneratorFilename", true, 1000.0F, 0.0F);
        try {
            callPrivateMethod("org.crap4j.gauge.NewCrapImageGenerator", "drawShadowRect", new Class[] {Graphics2D.class, int.class, int.class, int.class, int.class}, newCrapImageGenerator, new Object[] {null, new Integer(100), new Integer(1000), new Integer(0), new Integer(-1)});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(NewCrapImageGenerator.class, ex);
        }
    }
    
    public void testDrawTextThrowsNullPointerException() throws Throwable {
        NewCrapImageGenerator newCrapImageGenerator = new NewCrapImageGenerator(100.0F, "testNewCrapImageGeneratorDir", "testNewCrapImageGeneratorFilename", true, 1000.0F, 0.0F);
        try {
            callPrivateMethod("org.crap4j.gauge.NewCrapImageGenerator", "drawText", new Class[] {Graphics2D.class, int.class, int.class, String.class}, newCrapImageGenerator, new Object[] {null, new Integer(100), new Integer(1000), "testNewCrapImageGeneratorText"});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(NewCrapImageGenerator.class, ex);
        }
    }
    
    public void testDrawUpwardMarkerThrowsNullPointerException() throws Throwable {
        NewCrapImageGenerator newCrapImageGenerator = new NewCrapImageGenerator(100.0F, "testNewCrapImageGeneratorDir", "testNewCrapImageGeneratorFilename", true, 1000.0F, 0.0F);
        try {
            callPrivateMethod("org.crap4j.gauge.NewCrapImageGenerator", "drawUpwardMarker", new Class[] {Graphics2D.class, int.class, int.class, int.class, int.class}, newCrapImageGenerator, new Object[] {null, new Integer(100), new Integer(1000), new Integer(0), new Integer(-1)});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(NewCrapImageGenerator.class, ex);
        }
    }
    
    public void testMainThrowsHeadlessException() throws Throwable {
        String[] argv = new String[1];
        Mockingbird.enterRecordingMode();
        Mockingbird.setConstructorForException(FileOutputStream.class, "<init>(java.io.File)", (Throwable) Mockingbird.getProxyObject(AccessControlException.class));
        callPrivateMethod("org.crap4j.gauge.NewCrapImageGenerator", "displayOnScreen", new Class[] {BufferedImage.class}, null, new Object[] {null});
        Mockingbird.setExceptionForVoid(true, (Throwable) Mockingbird.getProxyObject(HeadlessException.class));
        Mockingbird.enterTestMode(NewCrapImageGenerator.class);
        try {
            NewCrapImageGenerator.main(argv);
            fail("Expected HeadlessException to be thrown");
        } catch (HeadlessException ex) {
            boolean actual = ((Boolean) callPrivateMethod("org.crap4j.gauge.NewCrapImageGenerator", "isRunningHeadless", new Class[] {}, null, new Object[] {})).booleanValue();
            assertFalse(".isRunningHeadless()", actual);
        }
    }
}

