/**
 * Generated by Agitar build: JUnitFactory Version 2.1.0.000576 (Build date: Oct 19, 2007) [2.1.0.000576]
 * JDK Version: 1.5.0_11
 *
 * Generated on Oct 26, 2007 3:58:15 PM
 * Time to generate: 00:18.430 seconds
 *
 */

package org.crap4j.external;

import com.agitar.lib.junit.AgitarTestCase;
import com.agitar.lib.mockingbird.Mockingbird;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import org.crap4j.CrapProject;
import org.crap4j.complexity.CyclomaticComplexity;
import org.crap4j.util.FileUtil;

public class MetricsComplexityReaderAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return MetricsComplexityReader.class;
    }
    
    public void testConstructor() throws Throwable {
        CrapProject p = new CrapProject("testMetricsComplexityReaderProjectDir", new ArrayList(100), new ArrayList(1000), new ArrayList(0), new ArrayList(1), "/home/agitar/work/sexy-dolphin-03-agitar-0/tmp/agitar-agitar/Agitator51218.dir/Agitator22552.tmp");
        MetricsComplexityReader metricsComplexityReader = new MetricsComplexityReader(p);
        assertSame("metricsComplexityReader.project", p, metricsComplexityReader.project);
    }
    
    public void testReadMethodComplexities() throws Throwable {
        CrapProject p = new CrapProject("testMetricsComplexityReaderProjectDir", new ArrayList(100), new ArrayList(1000), new ArrayList(0), new ArrayList(1), "/home/agitar/work/sexy-dolphin-03-agitar-0/tmp/agitar-agitar/Agitator51218.dir/Agitator22552.tmp");
        MetricsComplexityReader metricsComplexityReader = new MetricsComplexityReader(p);
        ArrayList result = (ArrayList) metricsComplexityReader.readMethodComplexities();
        assertEquals("result.size()", 0, result.size());
        assertSame("metricsComplexityReader.project", p, metricsComplexityReader.project);
    }
    
    public void testReadMethodComplexitiesWithAggressiveMocks() throws Throwable {
        MetricsComplexityReader metricsComplexityReader = (MetricsComplexityReader) Mockingbird.getProxyObject(MetricsComplexityReader.class, true);
        CrapProject crapProject = (CrapProject) Mockingbird.getProxyObject(CrapProject.class);
        Mockingbird.enterRecordingMode();
        ArrayList arrayList = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList);
        List list = (List) Mockingbird.getProxyObject(List.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        metricsComplexityReader.project = crapProject;
        Mockingbird.setReturnValue(crapProject.getAllProjectClasses(), null);
        Mockingbird.setReturnValue(FileUtil.removeTestClassFiles(null), list);
        CyclomaticComplexity cyclomaticComplexity = new CyclomaticComplexity();
        Mockingbird.replaceObjectForRecording(CyclomaticComplexity.class, "<init>()", cyclomaticComplexity);
        Mockingbird.setReturnValue(list.iterator(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), null);
        Mockingbird.setReturnValue(cyclomaticComplexity.getMethodComplexitiesFor(null), null);
        Mockingbird.setReturnValue(arrayList.addAll(null), false);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), null);
        Mockingbird.setReturnValue(cyclomaticComplexity.getMethodComplexitiesFor(null), null);
        Mockingbird.setReturnValue(arrayList.addAll(null), false);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.enterTestMode(MetricsComplexityReader.class);
        List result = metricsComplexityReader.readMethodComplexities();
        assertNotNull("result", result);
        assertNull("metricsComplexityReader.project.classDirs()", metricsComplexityReader.project.classDirs());
    }
    
    public void testReadMethodComplexitiesThrowsNullPointerException() throws Throwable {
        MetricsComplexityReader metricsComplexityReader = new MetricsComplexityReader(null);
        try {
            metricsComplexityReader.readMethodComplexities();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(MetricsComplexityReader.class, ex);
            assertNull("metricsComplexityReader.project", metricsComplexityReader.project);
        }
    }
}

