/**
 * Generated by Agitar build: JUnitFactory Version 2.1.0.000576 (Build date: Oct 19, 2007) [2.1.0.000576]
 * JDK Version: 1.5.0_11
 *
 * Generated on Nov 6, 2007 1:41:42 PM
 * Time to generate: 01:36.312 seconds
 *
 */

package org.crap4j.external;

import com.agitar.lib.junit.AgitarTestCase;
import com.agitar.lib.mockingbird.Mockingbird;
import com.agitar.lib.mockingbird.MockingbirdSystem;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInput;
import java.io.DataInputStream;
import java.io.EOFException;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PrintStream;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Stack;
import java.util.Vector;
import org.crap4j.CrapProject;
import org.crap4j.MethodCoverage;
import org.crap4j.util.FileUtil;

public class SuperRunnerCoverageReaderAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return SuperRunnerCoverageReader.class;
    }
    
    public void testConstructor() throws Throwable {
        SuperRunnerCoverageReader superRunnerCoverageReader = new SuperRunnerCoverageReader(null);
        assertNull("superRunnerCoverageReader.project", getPrivateField(superRunnerCoverageReader, "project"));
    }
    
    public void testCreateMethodCoverages() throws Throwable {
        SuperRunnerCoverageReader superRunnerCoverageReader = new SuperRunnerCoverageReader(null);
        Collection arrayList = new ArrayList(100);
        arrayList.add(new MyCoveragePoint());
        List methodCoverages = new ArrayList(1000);
        List methodNames = new ArrayList(0);
        methodNames.add("testString");
        methodNames.add("2");
        methodNames.add("2");
        methodNames.add("testString");
        methodNames.add("testString");
        methodNames.add("\\tZk\\1ZJPIKhwfpT\f5if");
        Map covPoints = new HashMap(100, 100.0F);
        Integer integer = new Integer(5);
        covPoints.put(integer, new ArrayList());
        covPoints.put(integer, arrayList);
        superRunnerCoverageReader.createMethodCoverages(methodCoverages, methodNames, covPoints);
        assertEquals("(ArrayList) methodCoverages.size()", 6, methodCoverages.size());
    }
    
    public void testCreateMethodCoverages1() throws Throwable {
        SuperRunnerCoverageReader superRunnerCoverageReader = new SuperRunnerCoverageReader(null);
        Collection arrayList = new ArrayList(100);
        arrayList.add(new MyCoveragePoint());
        List methodNames = new ArrayList(1000);
        methodNames.add("testString");
        methodNames.add("2");
        methodNames.add("2");
        methodNames.add("testString");
        methodNames.add("testString");
        methodNames.add("\\tZk\\1ZJPIKhwfpT\f5if");
        Map covPoints = new HashMap(100, 100.0F);
        Integer integer = new Integer(5);
        covPoints.put(integer, new ArrayList());
        covPoints.put(integer, arrayList);
        ArrayList methodCoverages = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, methodCoverages, "add", "(java.lang.Object)boolean", Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, methodCoverages, "add", "(java.lang.Object)boolean", Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, methodCoverages, "add", "(java.lang.Object)boolean", Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, methodCoverages, "add", "(java.lang.Object)boolean", Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, methodCoverages, "add", "(java.lang.Object)boolean", Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, methodCoverages, "add", "(java.lang.Object)boolean", Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, methodCoverages, "add", "(java.lang.Object)boolean", Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, methodCoverages, "add", "(java.lang.Object)boolean", Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, methodCoverages, "add", "(java.lang.Object)boolean", Boolean.TRUE, 1);
        Mockingbird.enterTestMode(SuperRunnerCoverageReader.class);
        ArrayList result = (ArrayList) superRunnerCoverageReader.createMethodCoverages(methodCoverages, methodNames, covPoints);
        assertSame("result", methodCoverages, result);
    }
    
    public void testCreateMethodCoverages2() throws Throwable {
        SuperRunnerCoverageReader superRunnerCoverageReader = new SuperRunnerCoverageReader(null);
        Collection arrayList = new ArrayList(100);
        arrayList.add(new MyCoveragePoint());
        List arrayList2 = new ArrayList(1000);
        List arrayList3 = new ArrayList(0);
        arrayList3.add("testString");
        Map hashMap = new HashMap(100, 100.0F);
        hashMap.put(new Integer(0), arrayList);
        superRunnerCoverageReader.createMethodCoverages(arrayList2, arrayList3, hashMap);
        assertEquals("(ArrayList) arrayList2.size()", 1, arrayList2.size());
    }
    
    public void testCreateMethodCoverages3() throws Throwable {
        SuperRunnerCoverageReader superRunnerCoverageReader = new SuperRunnerCoverageReader(null);
        List arrayList = new ArrayList(100);
        List result = superRunnerCoverageReader.createMethodCoverages(null, arrayList, new HashMap(100, 100.0F));
        assertNull("result", result);
    }
    
    public void testCreateMethodCoverages4() throws Throwable {
        SuperRunnerCoverageReader superRunnerCoverageReader = new SuperRunnerCoverageReader(null);
        List arrayList = new ArrayList(100);
        List arrayList2 = new ArrayList(1000);
        arrayList2.add(".");
        Map hashMap = new HashMap(100, 100.0F);
        hashMap.put(new Integer(0), new Vector());
        superRunnerCoverageReader.createMethodCoverages(arrayList, arrayList2, hashMap);
        assertEquals("(ArrayList) arrayList.size()", 1, arrayList.size());
    }
    
    public void testCreateMethodCoverages5() throws Throwable {
        SuperRunnerCoverageReader superRunnerCoverageReader = new SuperRunnerCoverageReader(null);
        List arrayList = new ArrayList(100);
        List arrayList2 = new ArrayList(1000);
        arrayList2.add("testString");
        superRunnerCoverageReader.createMethodCoverages(arrayList, arrayList2, new HashMap(100, 100.0F));
        assertEquals("(ArrayList) arrayList.size()", 1, arrayList.size());
    }
    
    public void testCreateMethodCoverages6() throws Throwable {
        SuperRunnerCoverageReader superRunnerCoverageReader = new SuperRunnerCoverageReader(null);
        List arrayList = new ArrayList(100);
        List result = superRunnerCoverageReader.createMethodCoverages(arrayList, new ArrayList(1000), new HashMap(100, 100.0F));
        assertSame("result", arrayList, result);
    }
    
    public void testCreateMethodCoverages7() throws Throwable {
        SuperRunnerCoverageReader superRunnerCoverageReader = new SuperRunnerCoverageReader(null);
        List arrayList = new ArrayList(100);
        List arrayList2 = new ArrayList(1000);
        arrayList2.add("unknown");
        arrayList2.add("Cannot find coverage results files in ");
        Map hashMap = new HashMap(100, 100.0F);
        hashMap.put(new Integer(0), new LinkedList());
        superRunnerCoverageReader.createMethodCoverages(arrayList, arrayList2, hashMap);
        assertEquals("(ArrayList) arrayList.size()", 2, arrayList.size());
    }
    
    public void testMakeFullyQualifiedMethodName() throws Throwable {
        SuperRunnerCoverageReader superRunnerCoverageReader = new SuperRunnerCoverageReader(null);
        String result = (String) callPrivateMethod("org.crap4j.external.SuperRunnerCoverageReader", "makeFullyQualifiedMethodName", new Class[] {String.class, String.class}, superRunnerCoverageReader, new Object[] {"testSuperRunnerCoverageReaderClassName", "testSuperRunnerCoverageReaderMethodName"});
        assertEquals("result", "testSuperRunnerCoverageReaderClassName.testSuperRunnerCoverageReaderMethodName", result);
    }
    
    public void testRead() throws Throwable {
        ArrayList result = (ArrayList) new SuperRunnerCoverageReader(null).read();
        assertEquals("result.size()", 0, result.size());
    }
    
    public void testReadCoveragePointsWithAggressiveMocks() throws Throwable {
        SuperRunnerCoverageReader superRunnerCoverageReader = (SuperRunnerCoverageReader) Mockingbird.getProxyObject(SuperRunnerCoverageReader.class, true);
        DataInput dataInput = (DataInput) Mockingbird.getProxyObject(DataInput.class);
        List list = (List) Mockingbird.getProxyObject(List.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(dataInput.readInt(), 2);
        HashMap hashMap = (HashMap) Mockingbird.getProxyObject(HashMap.class);
        Mockingbird.replaceObjectForRecording(HashMap.class, "<init>()", hashMap);
        MyCoveragePoint myCoveragePoint = (MyCoveragePoint) Mockingbird.getProxyObject(MyCoveragePoint.class);
        Mockingbird.replaceObjectForRecording(MyCoveragePoint.class, "<init>(java.io.DataInput)", myCoveragePoint);
        Mockingbird.setReturnValue(false, hashMap, "get", "(java.lang.Object)java.lang.Object", list, 1);
        Mockingbird.enterNormalMode();
        myCoveragePoint.setType(0);
        myCoveragePoint.setMethodNumber(0);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(list.add(myCoveragePoint), false);
        Mockingbird.setReturnValue(false, hashMap, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        MyCoveragePoint myCoveragePoint2 = (MyCoveragePoint) Mockingbird.getProxyObject(MyCoveragePoint.class);
        Mockingbird.replaceObjectForRecording(MyCoveragePoint.class, "<init>(java.io.DataInput)", myCoveragePoint2);
        Mockingbird.setReturnValue(false, hashMap, "get", "(java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.enterNormalMode();
        myCoveragePoint2.setType(0);
        myCoveragePoint2.setMethodNumber(0);
        Mockingbird.enterRecordingMode();
        ArrayList arrayList = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList);
        Mockingbird.setReturnValue(arrayList.add(myCoveragePoint2), false);
        Mockingbird.setReturnValue(false, hashMap, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.enterTestMode(SuperRunnerCoverageReader.class);
        Map result = (Map) callPrivateMethod("org.crap4j.external.SuperRunnerCoverageReader", "readCoveragePoints", new Class[] {DataInput.class}, superRunnerCoverageReader, new Object[] {dataInput});
        assertNotNull("result", result);
    }
    
    public void testReadWithAggressiveMocks() throws Throwable {
        SuperRunnerCoverageReader superRunnerCoverageReader = (SuperRunnerCoverageReader) Mockingbird.getProxyObject(SuperRunnerCoverageReader.class, true);
        CrapProject crapProject = (CrapProject) Mockingbird.getProxyObject(CrapProject.class);
        Mockingbird.enterRecordingMode();
        ArrayList arrayList = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList);
        List list = (List) Mockingbird.getProxyObject(List.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        File file = (File) Mockingbird.getProxyObject(File.class);
        IOException iOException = (IOException) Mockingbird.getProxyObject(IOException.class);
        File file2 = (File) Mockingbird.getProxyObject(File.class);
        setPrivateField(superRunnerCoverageReader, "project", crapProject);
        Mockingbird.setReturnValue(crapProject.getCoverageDir(), "");
        PrintStream printStream = (PrintStream) Mockingbird.getProxyObject(PrintStream.class);
        MockingbirdSystem.err = printStream;
        Mockingbird.setReturnValue(true, FileUtil.class, "getAllFilesInDirMatchingPattern", "(java.lang.String,java.lang.String,boolean)java.util.List", null, 1);
        Mockingbird.setReturnValue(FileUtil.removeTestClassFiles(null), list);
        Mockingbird.setReturnValue(list.size(), 1);
        Mockingbird.setReturnValue(list.iterator(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), null);
        Mockingbird.replaceObjectForRecording(FileInputStream.class, "<init>(java.io.File)", Mockingbird.getProxyObject(FileInputStream.class));
        Mockingbird.replaceObjectForRecording(BufferedInputStream.class, "<init>(java.io.InputStream)", Mockingbird.getProxyObject(BufferedInputStream.class));
        DataInputStream dataInputStream = (DataInputStream) Mockingbird.getProxyObject(DataInputStream.class);
        Mockingbird.replaceObjectForRecording(DataInputStream.class, "<init>(java.io.InputStream)", dataInputStream);
        Mockingbird.setReturnValue(superRunnerCoverageReader.read(dataInputStream), null);
        Mockingbird.setReturnValue(false, dataInputStream, "close", "()void", new Object[] {}, null, 1);
        Mockingbird.setReturnValue(arrayList.addAll(null), false);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), file);
        Mockingbird.replaceObjectForRecording(FileInputStream.class, "<init>(java.io.File)", Mockingbird.getProxyObject(FileInputStream.class));
        Mockingbird.replaceObjectForRecording(BufferedInputStream.class, "<init>(java.io.InputStream)", Mockingbird.getProxyObject(BufferedInputStream.class));
        DataInputStream dataInputStream2 = (DataInputStream) Mockingbird.getProxyObject(DataInputStream.class);
        Mockingbird.replaceObjectForRecording(DataInputStream.class, "<init>(java.io.InputStream)", dataInputStream2);
        Mockingbird.setReturnValue(superRunnerCoverageReader.read(dataInputStream2), null);
        Mockingbird.setException(false, dataInputStream2, "close", "()void", new Object[] {}, iOException, 1);
        Mockingbird.setReturnValue(false, file, "getAbsolutePath", "()java.lang.String", new Object[] {}, "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, printStream, "println", "(java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), file2);
        Mockingbird.replaceObjectForRecording(FileInputStream.class, "<init>(java.io.File)", Mockingbird.getProxyObject(FileInputStream.class));
        Mockingbird.replaceObjectForRecording(BufferedInputStream.class, "<init>(java.io.InputStream)", Mockingbird.getProxyObject(BufferedInputStream.class));
        DataInputStream dataInputStream3 = (DataInputStream) Mockingbird.getProxyObject(DataInputStream.class);
        Mockingbird.replaceObjectForRecording(DataInputStream.class, "<init>(java.io.InputStream)", dataInputStream3);
        Mockingbird.setReturnValue(superRunnerCoverageReader.read(dataInputStream3), null);
        Mockingbird.setException(false, dataInputStream3, "close", "()void", new Object[] {}, iOException, 1);
        Mockingbird.setReturnValue(false, file2, "getAbsolutePath", "()java.lang.String", new Object[] {}, "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, printStream, "println", "(java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), null);
        Mockingbird.replaceObjectForRecording(FileInputStream.class, "<init>(java.io.File)", Mockingbird.getProxyObject(FileInputStream.class));
        Mockingbird.replaceObjectForRecording(BufferedInputStream.class, "<init>(java.io.InputStream)", Mockingbird.getProxyObject(BufferedInputStream.class));
        DataInputStream dataInputStream4 = (DataInputStream) Mockingbird.getProxyObject(DataInputStream.class);
        Mockingbird.replaceObjectForRecording(DataInputStream.class, "<init>(java.io.InputStream)", dataInputStream4);
        Mockingbird.setReturnValue(superRunnerCoverageReader.read(dataInputStream4), null);
        Mockingbird.setReturnValue(false, dataInputStream4, "close", "()void", new Object[] {}, null, 1);
        Mockingbird.setReturnValue(arrayList.addAll(null), false);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.enterTestMode(SuperRunnerCoverageReader.class);
        List result = superRunnerCoverageReader.read();
        assertNotNull("result", result);
    }
    
    public void testReadWithAggressiveMocks1() throws Throwable {
        SuperRunnerCoverageReader superRunnerCoverageReader = (SuperRunnerCoverageReader) Mockingbird.getProxyObject(SuperRunnerCoverageReader.class, true);
        CrapProject crapProject = (CrapProject) Mockingbird.getProxyObject(CrapProject.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", Mockingbird.getProxyObject(ArrayList.class));
        setPrivateField(superRunnerCoverageReader, "project", crapProject);
        Mockingbird.setReturnValue(crapProject.getCoverageDir(), "");
        PrintStream printStream = (PrintStream) Mockingbird.getProxyObject(PrintStream.class);
        MockingbirdSystem.err = printStream;
        Mockingbird.setReturnValue(true, FileUtil.class, "getAllFilesInDirMatchingPattern", "(java.lang.String,java.lang.String,boolean)java.util.List", null, 1);
        Mockingbird.setReturnValue(FileUtil.removeTestClassFiles(null), null);
        Mockingbird.setReturnValue(crapProject.getCoverageDir(), "");
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, printStream, "println", "(java.lang.String)void", null, 1);
        Mockingbird.enterTestMode(SuperRunnerCoverageReader.class);
        List result = superRunnerCoverageReader.read();
        assertNotNull("result", result);
    }
    
    public void testReadWithAggressiveMocks2() throws Throwable {
        SuperRunnerCoverageReader superRunnerCoverageReader = (SuperRunnerCoverageReader) Mockingbird.getProxyObject(SuperRunnerCoverageReader.class, true);
        CrapProject crapProject = (CrapProject) Mockingbird.getProxyObject(CrapProject.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", Mockingbird.getProxyObject(ArrayList.class));
        List list = (List) Mockingbird.getProxyObject(List.class);
        setPrivateField(superRunnerCoverageReader, "project", crapProject);
        Mockingbird.setReturnValue(crapProject.getCoverageDir(), "");
        PrintStream printStream = (PrintStream) Mockingbird.getProxyObject(PrintStream.class);
        MockingbirdSystem.err = printStream;
        Mockingbird.setReturnValue(true, FileUtil.class, "getAllFilesInDirMatchingPattern", "(java.lang.String,java.lang.String,boolean)java.util.List", null, 1);
        Mockingbird.setReturnValue(FileUtil.removeTestClassFiles(null), list);
        Mockingbird.setReturnValue(list.size(), -1);
        Mockingbird.setReturnValue(crapProject.getCoverageDir(), "");
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, printStream, "println", "(java.lang.String)void", null, 1);
        Mockingbird.enterTestMode(SuperRunnerCoverageReader.class);
        List result = superRunnerCoverageReader.read();
        assertNotNull("result", result);
    }
    
    public void testXreadWithAggressiveMocks() throws Throwable {
        SuperRunnerCoverageReader superRunnerCoverageReader = (SuperRunnerCoverageReader) Mockingbird.getProxyObject(SuperRunnerCoverageReader.class, true);
        DataInput dataInput = (DataInput) Mockingbird.getProxyObject(DataInput.class);
        Mockingbird.enterRecordingMode();
        ArrayList arrayList = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        MyCoveragePoint myCoveragePoint = (MyCoveragePoint) Mockingbird.getProxyObject(MyCoveragePoint.class);
        Iterator iterator2 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        MyCoveragePoint myCoveragePoint2 = (MyCoveragePoint) Mockingbird.getProxyObject(MyCoveragePoint.class);
        MyCoveragePoint myCoveragePoint3 = (MyCoveragePoint) Mockingbird.getProxyObject(MyCoveragePoint.class);
        MyCoveragePoint myCoveragePoint4 = (MyCoveragePoint) Mockingbird.getProxyObject(MyCoveragePoint.class);
        MyCoveragePoint myCoveragePoint5 = (MyCoveragePoint) Mockingbird.getProxyObject(MyCoveragePoint.class);
        Mockingbird.setReturnValue(dataInput.readInt(), -1);
        Mockingbird.enterNormalMode();
        myCoveragePoint.setType(0);
        setPrivateField(myCoveragePoint, "timesReached", new Integer(-1));
        myCoveragePoint2.setType(-1);
        myCoveragePoint3.setType(0);
        setPrivateField(myCoveragePoint3, "timesReached", new Integer(1));
        myCoveragePoint4.setType(0);
        setPrivateField(myCoveragePoint4, "timesReached", new Integer(1));
        myCoveragePoint5.setType(-1);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(dataInput.readUTF(), "");
        Mockingbird.setReturnValue(dataInput.readUTF(), "");
        Mockingbird.setReturnValue(dataInput.readLong(), 0L);
        Mockingbird.setReturnValue(dataInput.readUTF(), "");
        Mockingbird.setReturnValue(dataInput.readInt(), 2);
        ArrayList arrayList2 = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList2);
        Mockingbird.setReturnValue(dataInput.readUTF(), "");
        Mockingbird.setReturnValue(false, superRunnerCoverageReader, "makeFullyQualifiedMethodName", "(java.lang.String,java.lang.String)java.lang.String", "", 1);
        Boolean boolean2 = Boolean.FALSE;
        Mockingbird.setReturnValue(false, arrayList2, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(dataInput.readBoolean(), false);
        Mockingbird.setReturnValue(dataInput.readUTF(), "");
        Mockingbird.setReturnValue(false, superRunnerCoverageReader, "makeFullyQualifiedMethodName", "(java.lang.String,java.lang.String)java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, arrayList2, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(dataInput.readBoolean(), false);
        Mockingbird.setReturnValue(dataInput.readInt(), 2);
        HashMap hashMap = (HashMap) Mockingbird.getProxyObject(HashMap.class);
        Mockingbird.replaceObjectForRecording(HashMap.class, "<init>()", hashMap);
        MyCoveragePoint myCoveragePoint6 = (MyCoveragePoint) Mockingbird.getProxyObject(MyCoveragePoint.class);
        Mockingbird.replaceObjectForRecording(MyCoveragePoint.class, "<init>(java.io.DataInput)", myCoveragePoint6);
        Mockingbird.setReturnValue(false, hashMap, "get", "(java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.enterNormalMode();
        myCoveragePoint6.setType(0);
        myCoveragePoint6.setMethodNumber(0);
        Mockingbird.enterRecordingMode();
        ArrayList arrayList3 = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList3);
        Mockingbird.setReturnValue(arrayList3.add(myCoveragePoint6), false);
        Mockingbird.setReturnValue(false, hashMap, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        MyCoveragePoint myCoveragePoint7 = (MyCoveragePoint) Mockingbird.getProxyObject(MyCoveragePoint.class);
        Mockingbird.replaceObjectForRecording(MyCoveragePoint.class, "<init>(java.io.DataInput)", myCoveragePoint7);
        Mockingbird.setReturnValue(arrayList2.size(), 1);
        Mockingbird.enterNormalMode();
        myCoveragePoint7.setType(-1);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(arrayList2.get(0), "");
        Mockingbird.setReturnValue(false, hashMap, "get", "(java.lang.Object)java.lang.Object", null, 1);
        ArrayList arrayList4 = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList4);
        Mockingbird.setReturnValue(arrayList4.iterator(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), myCoveragePoint);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        MethodCoverage methodCoverage = (MethodCoverage) Mockingbird.getProxyObject(MethodCoverage.class);
        Mockingbird.replaceObjectForRecording(MethodCoverage.class, "<init>(java.lang.String,float)", methodCoverage);
        Mockingbird.setReturnValue(arrayList.add(methodCoverage), false);
        Mockingbird.setReturnValue(arrayList2.size(), 2);
        Mockingbird.setReturnValue(arrayList2.get(1), "");
        Mockingbird.setReturnValue(false, hashMap, "get", "(java.lang.Object)java.lang.Object", null, 1);
        ArrayList arrayList5 = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList5);
        Mockingbird.setReturnValue(arrayList5.iterator(), iterator2);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), myCoveragePoint2);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), myCoveragePoint3);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), myCoveragePoint4);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), myCoveragePoint5);
        Mockingbird.setReturnValue(iterator2.hasNext(), false);
        MethodCoverage methodCoverage2 = (MethodCoverage) Mockingbird.getProxyObject(MethodCoverage.class);
        Mockingbird.replaceObjectForRecording(MethodCoverage.class, "<init>(java.lang.String,float)", methodCoverage2);
        Mockingbird.setReturnValue(arrayList.add(methodCoverage2), false);
        Mockingbird.setReturnValue(arrayList2.size(), 1);
        Mockingbird.enterTestMode(SuperRunnerCoverageReader.class);
        List result = superRunnerCoverageReader.Xread(dataInput);
        assertNotNull("result", result);
    }
    
    public void testXreadWithAggressiveMocks1() throws Throwable {
        SuperRunnerCoverageReader superRunnerCoverageReader = (SuperRunnerCoverageReader) Mockingbird.getProxyObject(SuperRunnerCoverageReader.class, true);
        DataInput dataInput = (DataInput) Mockingbird.getProxyObject(DataInput.class);
        Mockingbird.enterRecordingMode();
        ArrayList arrayList = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        MyCoveragePoint myCoveragePoint = (MyCoveragePoint) Mockingbird.getProxyObject(MyCoveragePoint.class);
        Iterator iterator2 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        MyCoveragePoint myCoveragePoint2 = (MyCoveragePoint) Mockingbird.getProxyObject(MyCoveragePoint.class);
        MyCoveragePoint myCoveragePoint3 = (MyCoveragePoint) Mockingbird.getProxyObject(MyCoveragePoint.class);
        MyCoveragePoint myCoveragePoint4 = (MyCoveragePoint) Mockingbird.getProxyObject(MyCoveragePoint.class);
        MyCoveragePoint myCoveragePoint5 = (MyCoveragePoint) Mockingbird.getProxyObject(MyCoveragePoint.class);
        Mockingbird.setReturnValue(dataInput.readInt(), 4);
        Mockingbird.enterNormalMode();
        myCoveragePoint.setType(0);
        setPrivateField(myCoveragePoint, "timesReached", new Integer(-1));
        myCoveragePoint2.setType(-1);
        myCoveragePoint3.setType(0);
        setPrivateField(myCoveragePoint3, "timesReached", new Integer(1));
        myCoveragePoint4.setType(0);
        setPrivateField(myCoveragePoint4, "timesReached", new Integer(1));
        myCoveragePoint5.setType(-1);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(dataInput.readBoolean(), false);
        Mockingbird.setReturnValue(dataInput.readUTF(), "");
        Mockingbird.setReturnValue(dataInput.readUTF(), "");
        Mockingbird.setReturnValue(dataInput.readLong(), 0L);
        Mockingbird.setReturnValue(dataInput.readUTF(), "");
        Mockingbird.setReturnValue(dataInput.readLong(), 0L);
        Mockingbird.setReturnValue(dataInput.readInt(), 2);
        ArrayList arrayList2 = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList2);
        Mockingbird.setReturnValue(dataInput.readUTF(), "");
        Mockingbird.setReturnValue(false, superRunnerCoverageReader, "makeFullyQualifiedMethodName", "(java.lang.String,java.lang.String)java.lang.String", "", 1);
        Boolean boolean2 = Boolean.FALSE;
        Mockingbird.setReturnValue(false, arrayList2, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(dataInput.readBoolean(), false);
        Mockingbird.setReturnValue(dataInput.readUTF(), "");
        Mockingbird.setReturnValue(false, superRunnerCoverageReader, "makeFullyQualifiedMethodName", "(java.lang.String,java.lang.String)java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, arrayList2, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(dataInput.readBoolean(), false);
        Mockingbird.setReturnValue(dataInput.readInt(), 2);
        HashMap hashMap = (HashMap) Mockingbird.getProxyObject(HashMap.class);
        Mockingbird.replaceObjectForRecording(HashMap.class, "<init>()", hashMap);
        MyCoveragePoint myCoveragePoint6 = (MyCoveragePoint) Mockingbird.getProxyObject(MyCoveragePoint.class);
        Mockingbird.replaceObjectForRecording(MyCoveragePoint.class, "<init>(java.io.DataInput)", myCoveragePoint6);
        Mockingbird.setReturnValue(false, hashMap, "get", "(java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.enterNormalMode();
        myCoveragePoint6.setType(0);
        myCoveragePoint6.setMethodNumber(0);
        Mockingbird.enterRecordingMode();
        ArrayList arrayList3 = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList3);
        Mockingbird.setReturnValue(arrayList3.add(myCoveragePoint6), false);
        Mockingbird.setReturnValue(false, hashMap, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        MyCoveragePoint myCoveragePoint7 = (MyCoveragePoint) Mockingbird.getProxyObject(MyCoveragePoint.class);
        Mockingbird.replaceObjectForRecording(MyCoveragePoint.class, "<init>(java.io.DataInput)", myCoveragePoint7);
        Mockingbird.setReturnValue(arrayList2.size(), 1);
        Mockingbird.enterNormalMode();
        myCoveragePoint7.setType(-1);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(arrayList2.get(0), "");
        Mockingbird.setReturnValue(false, hashMap, "get", "(java.lang.Object)java.lang.Object", null, 1);
        ArrayList arrayList4 = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList4);
        Mockingbird.setReturnValue(arrayList4.iterator(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), myCoveragePoint);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        MethodCoverage methodCoverage = (MethodCoverage) Mockingbird.getProxyObject(MethodCoverage.class);
        Mockingbird.replaceObjectForRecording(MethodCoverage.class, "<init>(java.lang.String,float)", methodCoverage);
        Mockingbird.setReturnValue(arrayList.add(methodCoverage), false);
        Mockingbird.setReturnValue(arrayList2.size(), 2);
        Mockingbird.setReturnValue(arrayList2.get(1), "");
        Mockingbird.setReturnValue(false, hashMap, "get", "(java.lang.Object)java.lang.Object", null, 1);
        ArrayList arrayList5 = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList5);
        Mockingbird.setReturnValue(arrayList5.iterator(), iterator2);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), myCoveragePoint2);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), myCoveragePoint3);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), myCoveragePoint4);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), myCoveragePoint5);
        Mockingbird.setReturnValue(iterator2.hasNext(), false);
        MethodCoverage methodCoverage2 = (MethodCoverage) Mockingbird.getProxyObject(MethodCoverage.class);
        Mockingbird.replaceObjectForRecording(MethodCoverage.class, "<init>(java.lang.String,float)", methodCoverage2);
        Mockingbird.setReturnValue(arrayList.add(methodCoverage2), false);
        Mockingbird.setReturnValue(arrayList2.size(), 1);
        Mockingbird.enterTestMode(SuperRunnerCoverageReader.class);
        List result = superRunnerCoverageReader.Xread(dataInput);
        assertNotNull("result", result);
    }
    
    public void testCreateMethodCoveragesThrowsClassCastException() throws Throwable {
        SuperRunnerCoverageReader superRunnerCoverageReader = new SuperRunnerCoverageReader(null);
        ArrayList methodCoverages = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        ArrayList methodNames = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        HashMap covPoints = (HashMap) Mockingbird.getProxyObject(HashMap.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, methodNames, "size", "()int", new Object[] {}, new Integer(4), 1);
        Mockingbird.setReturnValue(false, methodNames, "get", "(int)java.lang.Object", new Object[] {new Integer(0)}, "", 1);
        ArrayList arrayList = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.setReturnValue(false, covPoints, "get", "(java.lang.Object)java.lang.Object", new Object[] {new Integer(0)}, arrayList, 1);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.setReturnValue(false, arrayList, "iterator", "()java.util.Iterator", new Object[] {}, iterator, 1);
        Mockingbird.setReturnValue(false, iterator, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        MyCoveragePoint myCoveragePoint = (MyCoveragePoint) Mockingbird.getProxyObject(MyCoveragePoint.class);
        Mockingbird.setReturnValue(false, iterator, "next", "()java.lang.Object", new Object[] {}, myCoveragePoint, 1);
        Mockingbird.setReturnValue(myCoveragePoint.getType(), -1);
        Mockingbird.setReturnValue(false, iterator, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        MyCoveragePoint myCoveragePoint2 = (MyCoveragePoint) Mockingbird.getProxyObject(MyCoveragePoint.class);
        Mockingbird.setReturnValue(false, iterator, "next", "()java.lang.Object", new Object[] {}, myCoveragePoint2, 1);
        Mockingbird.setReturnValue(myCoveragePoint2.getType(), -1);
        Mockingbird.setReturnValue(false, iterator, "hasNext", "()boolean", new Object[] {}, Boolean.FALSE, 1);
        MethodCoverage methodCoverage = (MethodCoverage) Mockingbird.getProxyObject(MethodCoverage.class);
        Mockingbird.replaceObjectForRecording(MethodCoverage.class, "<init>(java.lang.String,float)", methodCoverage);
        Mockingbird.setReturnValue(false, methodCoverages, "add", "(java.lang.Object)boolean", new Object[] {methodCoverage}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, methodNames, "size", "()int", new Object[] {}, new Integer(4), 1);
        Mockingbird.setReturnValue(false, methodNames, "get", "(int)java.lang.Object", new Object[] {new Integer(1)}, "", 1);
        ArrayList arrayList2 = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.setReturnValue(false, covPoints, "get", "(java.lang.Object)java.lang.Object", new Object[] {new Integer(1)}, arrayList2, 1);
        Iterator iterator2 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.setReturnValue(false, arrayList2, "iterator", "()java.util.Iterator", new Object[] {}, iterator2, 1);
        Mockingbird.setReturnValue(false, iterator2, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator2, "next", "()java.lang.Object", new Object[] {}, Mockingbird.getProxyObject(Object.class), 1);
        Mockingbird.enterTestMode(SuperRunnerCoverageReader.class);
        try {
            superRunnerCoverageReader.createMethodCoverages(methodCoverages, methodNames, covPoints);
            fail("Expected ClassCastException to be thrown");
        } catch (ClassCastException ex) {
            assertEquals("ex.getClass()", ClassCastException.class, ex.getClass());
            assertThrownBy(SuperRunnerCoverageReader.class, ex);
            assertEquals("methodCoverages.size()", 0, methodCoverages.size());
            assertEquals("covPoints.size()", 0, covPoints.size());
            assertEquals("methodNames.size()", 0, methodNames.size());
        }
    }
    
    public void testCreateMethodCoveragesThrowsClassCastException1() throws Throwable {
        SuperRunnerCoverageReader superRunnerCoverageReader = new SuperRunnerCoverageReader(null);
        Collection arrayList = new ArrayList(100);
        arrayList.add(new Object());
        List arrayList2 = new ArrayList(1000);
        arrayList2.add("testString");
        Map hashMap = new HashMap(100, 100.0F);
        hashMap.put(new Integer(0), arrayList);
        try {
            superRunnerCoverageReader.createMethodCoverages(new ArrayList(0), arrayList2, hashMap);
            fail("Expected ClassCastException to be thrown");
        } catch (ClassCastException ex) {
            assertEquals("ex.getClass()", ClassCastException.class, ex.getClass());
            assertThrownBy(SuperRunnerCoverageReader.class, ex);
        }
    }
    
    public void testCreateMethodCoveragesThrowsClassCastException2() throws Throwable {
        SuperRunnerCoverageReader superRunnerCoverageReader = new SuperRunnerCoverageReader(null);
        Collection arrayList = new ArrayList(100);
        arrayList.add(new Object());
        List arrayList2 = new ArrayList(1000);
        List arrayList3 = new ArrayList(0);
        arrayList3.add("testString");
        arrayList3.add("testString");
        Map hashMap = new HashMap(100, 100.0F);
        Integer integer = new Integer(1);
        hashMap.put(integer, new ArrayList());
        hashMap.put(new Integer(0), new LinkedList());
        hashMap.put(integer, arrayList);
        try {
            superRunnerCoverageReader.createMethodCoverages(arrayList2, arrayList3, hashMap);
            fail("Expected ClassCastException to be thrown");
        } catch (ClassCastException ex) {
            assertEquals("(ArrayList) arrayList2.size()", 1, arrayList2.size());
            assertEquals("ex.getClass()", ClassCastException.class, ex.getClass());
            assertThrownBy(SuperRunnerCoverageReader.class, ex);
        }
    }
    
    public void testCreateMethodCoveragesThrowsClassCastException3() throws Throwable {
        SuperRunnerCoverageReader superRunnerCoverageReader = new SuperRunnerCoverageReader(null);
        Collection arrayList = new ArrayList(100);
        arrayList.add(new Object());
        List methodCoverages = new ArrayList(1000);
        List methodNames = new ArrayList(0);
        methodNames.add("\\");
        methodNames.add("5");
        methodNames.add("testString");
        Map covPoints = new HashMap(100, 100.0F);
        Integer integer = new Integer(2);
        covPoints.put(integer, new Stack());
        covPoints.put(integer, arrayList);
        try {
            superRunnerCoverageReader.createMethodCoverages(methodCoverages, methodNames, covPoints);
            fail("Expected ClassCastException to be thrown");
        } catch (ClassCastException ex) {
            assertEquals("(ArrayList) methodCoverages.size()", 2, methodCoverages.size());
            assertEquals("ex.getClass()", ClassCastException.class, ex.getClass());
            assertThrownBy(SuperRunnerCoverageReader.class, ex);
            assertEquals("(HashMap) covPoints.size()", 1, covPoints.size());
            assertEquals("(ArrayList) methodNames.size()", 3, methodNames.size());
        }
    }
    
    public void testCreateMethodCoveragesThrowsNullPointerException() throws Throwable {
        SuperRunnerCoverageReader superRunnerCoverageReader = new SuperRunnerCoverageReader(null);
        ArrayList methodCoverages = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        ArrayList methodNames = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        HashMap covPoints = (HashMap) Mockingbird.getProxyObject(HashMap.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, methodNames, "size", "()int", new Object[] {}, new Integer(3), 1);
        Mockingbird.setReturnValue(false, methodNames, "get", "(int)java.lang.Object", new Object[] {new Integer(0)}, "Cannot find coverage reslts files in ", 1);
        ArrayList arrayList = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.setReturnValue(false, covPoints, "get", "(java.lang.Object)java.lang.Object", new Object[] {new Integer(0)}, arrayList, 1);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.setReturnValue(false, arrayList, "iterator", "()java.util.Iterator", new Object[] {}, iterator, 1);
        Mockingbird.setReturnValue(false, iterator, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        MyCoveragePoint myCoveragePoint = (MyCoveragePoint) Mockingbird.getProxyObject(MyCoveragePoint.class);
        Mockingbird.setReturnValue(false, iterator, "next", "()java.lang.Object", new Object[] {}, myCoveragePoint, 1);
        Mockingbird.setReturnValue(myCoveragePoint.getType(), -1);
        Mockingbird.setReturnValue(false, iterator, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator, "next", "()java.lang.Object", new Object[] {}, null, 1);
        Mockingbird.enterTestMode(SuperRunnerCoverageReader.class);
        try {
            superRunnerCoverageReader.createMethodCoverages(methodCoverages, methodNames, covPoints);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(SuperRunnerCoverageReader.class, ex);
            assertEquals("methodCoverages.size()", 0, methodCoverages.size());
            assertEquals("covPoints.size()", 0, covPoints.size());
            assertEquals("methodNames.size()", 0, methodNames.size());
        }
    }
    
    public void testCreateMethodCoveragesThrowsNullPointerException1() throws Throwable {
        SuperRunnerCoverageReader superRunnerCoverageReader = new SuperRunnerCoverageReader(null);
        List arrayList = new ArrayList(100);
        try {
            superRunnerCoverageReader.createMethodCoverages(arrayList, null, new HashMap(100, 100.0F));
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(SuperRunnerCoverageReader.class, ex);
        }
    }
    
    public void testCreateMethodCoveragesThrowsNullPointerException2() throws Throwable {
        SuperRunnerCoverageReader superRunnerCoverageReader = new SuperRunnerCoverageReader(null);
        List arrayList = new ArrayList(100);
        arrayList.add("unknown");
        Map hashMap = new HashMap(100, 100.0F);
        hashMap.put(new Integer(0), new LinkedList());
        try {
            superRunnerCoverageReader.createMethodCoverages(null, arrayList, hashMap);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(SuperRunnerCoverageReader.class, ex);
        }
    }
    
    public void testCreateMethodCoveragesThrowsNullPointerException3() throws Throwable {
        SuperRunnerCoverageReader superRunnerCoverageReader = new SuperRunnerCoverageReader(null);
        ArrayList methodCoverages = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        ArrayList methodNames = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        HashMap covPoints = (HashMap) Mockingbird.getProxyObject(HashMap.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, methodNames, "size", "()int", new Object[] {}, new Integer(2), 1);
        Mockingbird.setReturnValue(false, methodNames, "get", "(int)java.lang.Object", new Object[] {new Integer(0)}, "\\-.", 1);
        ArrayList arrayList = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.setReturnValue(false, covPoints, "get", "(java.lang.Object)java.lang.Object", new Object[] {new Integer(0)}, arrayList, 1);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.setReturnValue(false, arrayList, "iterator", "()java.util.Iterator", new Object[] {}, iterator, 1);
        Mockingbird.setReturnValue(false, iterator, "hasNext", "()boolean", new Object[] {}, Boolean.FALSE, 1);
        MethodCoverage methodCoverage = (MethodCoverage) Mockingbird.getProxyObject(MethodCoverage.class);
        Mockingbird.replaceObjectForRecording(MethodCoverage.class, "<init>(java.lang.String,float)", methodCoverage);
        Mockingbird.setReturnValue(false, methodCoverages, "add", "(java.lang.Object)boolean", new Object[] {methodCoverage}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, methodNames, "size", "()int", new Object[] {}, new Integer(2), 1);
        Mockingbird.setReturnValue(false, methodNames, "get", "(int)java.lang.Object", new Object[] {new Integer(1)}, "Y@h=kbK+\u0002hR\u0002W@Q=~{fDU\u000Fbz\u0008\u00106A(", 1);
        ArrayList arrayList2 = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.setReturnValue(false, covPoints, "get", "(java.lang.Object)java.lang.Object", new Object[] {new Integer(1)}, arrayList2, 1);
        Iterator iterator2 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.setReturnValue(false, arrayList2, "iterator", "()java.util.Iterator", new Object[] {}, iterator2, 1);
        Mockingbird.setReturnValue(false, iterator2, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator2, "next", "()java.lang.Object", new Object[] {}, null, 1);
        Mockingbird.enterTestMode(SuperRunnerCoverageReader.class);
        try {
            superRunnerCoverageReader.createMethodCoverages(methodCoverages, methodNames, covPoints);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(SuperRunnerCoverageReader.class, ex);
            assertEquals("methodCoverages.size()", 0, methodCoverages.size());
            assertEquals("covPoints.size()", 0, covPoints.size());
            assertEquals("methodNames.size()", 0, methodNames.size());
        }
    }
    
    public void testCreateMethodCoveragesThrowsNullPointerException4() throws Throwable {
        SuperRunnerCoverageReader superRunnerCoverageReader = new SuperRunnerCoverageReader(null);
        List arrayList = new ArrayList(100);
        arrayList.add("Ilqlegal Capacity: ");
        try {
            superRunnerCoverageReader.createMethodCoverages(null, arrayList, new HashMap(100, 100.0F));
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(SuperRunnerCoverageReader.class, ex);
        }
    }
    
    public void testCreateMethodCoveragesThrowsNullPointerException5() throws Throwable {
        SuperRunnerCoverageReader superRunnerCoverageReader = new SuperRunnerCoverageReader(null);
        List arrayList = new ArrayList(100);
        arrayList.add("testString");
        try {
            superRunnerCoverageReader.createMethodCoverages(new ArrayList(1000), arrayList, null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(SuperRunnerCoverageReader.class, ex);
        }
    }
    
    public void testMakeFullyQualifiedMethodNameThrowsNullPointerException() throws Throwable {
        SuperRunnerCoverageReader superRunnerCoverageReader = new SuperRunnerCoverageReader(null);
        try {
            callPrivateMethod("org.crap4j.external.SuperRunnerCoverageReader", "makeFullyQualifiedMethodName", new Class[] {String.class, String.class}, superRunnerCoverageReader, new Object[] {null, "testSuperRunnerCoverageReaderMethodName"});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(SuperRunnerCoverageReader.class, ex);
        }
    }
    
    public void testMakeFullyQualifiedMethodNameThrowsNullPointerException1() throws Throwable {
        SuperRunnerCoverageReader superRunnerCoverageReader = new SuperRunnerCoverageReader(null);
        try {
            callPrivateMethod("org.crap4j.external.SuperRunnerCoverageReader", "makeFullyQualifiedMethodName", new Class[] {String.class, String.class}, superRunnerCoverageReader, new Object[] {"testSuperRunnerCoverageReaderClassName", null});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(SuperRunnerCoverageReader.class, ex);
        }
    }
    
    public void testReadCoveragePointsThrowsEOFException() throws Throwable {
        SuperRunnerCoverageReader superRunnerCoverageReader = new SuperRunnerCoverageReader(null);
        DataInput dataInputStream = new DataInputStream(new ByteArrayInputStream("mark/rset not supported".getBytes()));
        try {
            callPrivateMethod("org.crap4j.external.SuperRunnerCoverageReader", "readCoveragePoints", new Class[] {DataInput.class}, superRunnerCoverageReader, new Object[] {dataInputStream});
            fail("Expected EOFException to be thrown");
        } catch (EOFException ex) {
            assertEquals("ex.getClass()", EOFException.class, ex.getClass());
            assertThrownBy(DataInputStream.class, ex);
            assertEquals("(DataInputStream) dataInputStream.available()", 0, ((InputStream) dataInputStream).available());
        }
    }
    
    public void testReadCoveragePointsThrowsNullPointerException() throws Throwable {
        SuperRunnerCoverageReader superRunnerCoverageReader = new SuperRunnerCoverageReader(null);
        DataInput dataInputStream = new DataInputStream(null);
        try {
            callPrivateMethod("org.crap4j.external.SuperRunnerCoverageReader", "readCoveragePoints", new Class[] {DataInput.class}, superRunnerCoverageReader, new Object[] {dataInputStream});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(DataInputStream.class, ex);
        }
    }
    
    public void testReadFileThrowsNullPointerException() throws Throwable {
        SuperRunnerCoverageReader superRunnerCoverageReader = new SuperRunnerCoverageReader(null);
        try {
            superRunnerCoverageReader.readFile(new File("testSuperRunnerCoverageReaderParam1"));
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(SuperRunnerCoverageReader.class, ex);
            assertNull("superRunnerCoverageReader.project", getPrivateField(superRunnerCoverageReader, "project"));
        }
    }
    
    public void testReadMethodsThrowsEOFException() throws Throwable {
        SuperRunnerCoverageReader superRunnerCoverageReader = new SuperRunnerCoverageReader(null);
        DataInput dataInputStream = new DataInputStream(new ByteArrayInputStream(" y ".getBytes()));
        try {
            callPrivateMethod("org.crap4j.external.SuperRunnerCoverageReader", "readMethods", new Class[] {DataInput.class, String.class}, superRunnerCoverageReader, new Object[] {dataInputStream, "testSuperRunnerCoverageReaderClassName"});
            fail("Expected EOFException to be thrown");
        } catch (EOFException ex) {
            assertEquals("ex.getClass()", EOFException.class, ex.getClass());
            assertThrownBy(DataInputStream.class, ex);
            assertEquals("(DataInputStream) dataInputStream.available()", 0, ((InputStream) dataInputStream).available());
        }
    }
    
    public void testReadMethodsThrowsEOFException1() throws Throwable {
        SuperRunnerCoverageReader superRunnerCoverageReader = new SuperRunnerCoverageReader(null);
        DataInput dataInputStream = new DataInputStream(new ByteArrayInputStream("mark/rset not supported".getBytes()));
        try {
            callPrivateMethod("org.crap4j.external.SuperRunnerCoverageReader", "readMethods", new Class[] {DataInput.class, String.class}, superRunnerCoverageReader, new Object[] {dataInputStream, "testSuperRunnerCoverageReaderClassName"});
            fail("Expected EOFException to be thrown");
        } catch (EOFException ex) {
            assertEquals("ex.getClass()", EOFException.class, ex.getClass());
            assertThrownBy(DataInputStream.class, ex);
            assertEquals("(DataInputStream) dataInputStream.available()", 0, ((InputStream) dataInputStream).available());
        }
    }
    
    public void testReadMethodsThrowsNullPointerException() throws Throwable {
        SuperRunnerCoverageReader superRunnerCoverageReader = new SuperRunnerCoverageReader(null);
        DataInput dataInputStream = new DataInputStream(null);
        try {
            callPrivateMethod("org.crap4j.external.SuperRunnerCoverageReader", "readMethods", new Class[] {DataInput.class, String.class}, superRunnerCoverageReader, new Object[] {dataInputStream, "testSuperRunnerCoverageReaderClassName"});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(DataInputStream.class, ex);
        }
    }
    
    public void testReadThrowsNullPointerException() throws Throwable {
        SuperRunnerCoverageReader superRunnerCoverageReader = new SuperRunnerCoverageReader(null);
        DataInputStream in = (DataInputStream) Mockingbird.getProxyObject(DataInputStream.class);
        Mockingbird.enterTestMode(SuperRunnerCoverageReader.class);
        try {
            superRunnerCoverageReader.read(in);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(SuperRunnerCoverageReader.class, ex);
            assertNull("superRunnerCoverageReader.project", getPrivateField(superRunnerCoverageReader, "project"));
        }
    }
    
    public void testXreadThrowsEOFException() throws Throwable {
        DataInput in = new DataInputStream(new ByteArrayInputStream(" y ".getBytes()));
        try {
            new SuperRunnerCoverageReader(null).Xread(in);
            fail("Expected EOFException to be thrown");
        } catch (EOFException ex) {
            assertEquals("ex.getClass()", EOFException.class, ex.getClass());
            assertThrownBy(DataInputStream.class, ex);
            assertEquals("(DataInputStream) in.available()", 0, ((InputStream) in).available());
        }
    }
    
    public void testXreadThrowsEOFException1() throws Throwable {
        try {
            new SuperRunnerCoverageReader(null).Xread(new DataInputStream(new ByteArrayInputStream("testString".getBytes())));
            fail("Expected EOFException to be thrown");
        } catch (EOFException ex) {
            assertEquals("ex.getClass()", EOFException.class, ex.getClass());
            assertThrownBy(DataInputStream.class, ex);
        }
    }
    
    public void testXreadThrowsNullPointerException() throws Throwable {
        SuperRunnerCoverageReader superRunnerCoverageReader = new SuperRunnerCoverageReader(null);
        try {
            superRunnerCoverageReader.Xread(new DataInputStream(null));
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(DataInputStream.class, ex);
        }
    }
}

