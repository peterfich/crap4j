/**
 * Generated by Agitar build: JUnitFactory Version 2.1.0.000576 (Build date: Oct 19, 2007) [2.1.0.000576]
 * JDK Version: 1.5.0_11
 *
 * Generated on Nov 1, 2007 12:01:51 AM
 * Time to generate: 00:23.445 seconds
 *
 */

package org.crap4j;

import com.agitar.lib.junit.AgitarTestCase;
import com.agitar.lib.mockingbird.Mockingbird;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import org.crap4j.external.MetricsComplexityReader;
import org.crap4j.external.SuperRunnerCoverageReader;

public class Crap4jRunnerAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return Crap4jRunner.class;
    }
    
    public void testConstructor() throws Throwable {
        CoverageGeneratorStrategy antSuperrunnerCoverageStrategy = new AntSuperrunnerCoverageStrategy(Main.createMain());
        Crap4jRunner crap4jRunner = new Crap4jRunner(true, false, antSuperrunnerCoverageStrategy, 100.0F, 1000.0F, 0.0F);
        assertTrue("crap4jRunner.debug", ((Boolean) getPrivateField(crap4jRunner, "debug")).booleanValue());
        assertEquals("crap4jRunner.crapPercentCriticalThreshold", 0.0F, ((Number) getPrivateField(crap4jRunner, "crapPercentCriticalThreshold")).floatValue(), 1.0E-6F);
        assertSame("crap4jRunner.coverageStrategy", antSuperrunnerCoverageStrategy, getPrivateField(crap4jRunner, "coverageStrategy"));
        assertEquals("crap4jRunner.crapThreshold", 100.0F, ((Number) getPrivateField(crap4jRunner, "crapThreshold")).floatValue(), 1.0E-6F);
        assertFalse("crap4jRunner.dontTest", ((Boolean) getPrivateField(crap4jRunner, "dontTest")).booleanValue());
        assertEquals("crap4jRunner.crapPercentWarningThreshold", 1000.0F, ((Number) getPrivateField(crap4jRunner, "crapPercentWarningThreshold")).floatValue(), 1.0E-6F);
    }
    
    public void testBuildMethodCrap() throws Throwable {
        Crap4jRunner crap4jRunner = new Crap4jRunner(true, false, new AntSuperrunnerCoverageStrategy(Main.createMain()), 100.0F, 1000.0F, 0.0F);
        ArrayList result = (ArrayList) callPrivateMethod("org.crap4j.Crap4jRunner", "buildMethodCrap", new Class[] {List.class, List.class}, crap4jRunner, new Object[] {new ArrayList(100), new ArrayList(1000)});
        assertEquals("result.size()", 0, result.size());
    }
    
    public void testBuildMethodCrap1() throws Throwable {
        Crap4jRunner crap4jRunner = new Crap4jRunner(true, false, new AntSuperrunnerCoverageStrategy(Main.createMain()), 100.0F, 1000.0F, 0.0F);
        List arrayList = new ArrayList(100);
        MethodComplexity methodComplexity = new MethodComplexity("testCrap4jRunnerMethodSignature", "testCrap4jRunnerPkgclassName", "testCrap4jRunnerMethodName", "testCrap4jRunnerMethodDescriptor", "testCrap4jRunnerJava5Signature", 100, "testCrap4jRunnerPrettyMethodSignature");
        List arrayList2 = new ArrayList(1000);
        arrayList2.add(methodComplexity);
        ArrayList result = (ArrayList) callPrivateMethod("org.crap4j.Crap4jRunner", "buildMethodCrap", new Class[] {List.class, List.class}, crap4jRunner, new Object[] {arrayList, arrayList2});
        assertEquals("result.size()", 1, result.size());
    }
    
    public void testDoProject() throws Throwable {
        CoverageGeneratorStrategy antSuperrunnerCoverageStrategy = new AntSuperrunnerCoverageStrategy(Main.createMain());
        Crap4jRunner crap4jRunner = new Crap4jRunner(true, true, antSuperrunnerCoverageStrategy, 100.0F, 1000.0F, 0.0F);
        crap4jRunner.doProject(null);
        assertSame("crap4jRunner.coverageStrategy", antSuperrunnerCoverageStrategy, getPrivateField(crap4jRunner, "coverageStrategy"));
    }
    
    public void testDoProjectWithAggressiveMocks() throws Throwable {
        Crap4jRunner crap4jRunner = (Crap4jRunner) Mockingbird.getProxyObject(Crap4jRunner.class, true);
        CoverageGeneratorStrategy coverageGeneratorStrategy = (CoverageGeneratorStrategy) Mockingbird.getProxyObject(CoverageGeneratorStrategy.class);
        setPrivateField(crap4jRunner, "dontTest", Boolean.FALSE);
        setPrivateField(crap4jRunner, "coverageStrategy", coverageGeneratorStrategy);
        setPrivateField(crap4jRunner, "debug", Boolean.FALSE);
        Mockingbird.enterRecordingMode();
        coverageGeneratorStrategy.execute(crap4jRunner, null, false);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(Crap4jRunner.class);
        crap4jRunner.doProject(null);
        assertNotNull("crap4jRunner.coverageStrategy", getPrivateField(crap4jRunner, "coverageStrategy"));
    }
    
    public void testReadCoverage() throws Throwable {
        Crap4jRunner crap4jRunner = new Crap4jRunner(true, false, new AntSuperrunnerCoverageStrategy(Main.createMain()), 100.0F, 1000.0F, 0.0F);
        ArrayList result = (ArrayList) callPrivateMethod("org.crap4j.Crap4jRunner", "readCoverage", new Class[] {CrapProject.class}, crap4jRunner, new Object[] {null});
        assertEquals("result.size()", 0, result.size());
    }
    
    public void testReadResultsWithAggressiveMocks() throws Throwable {
        Crap4jRunner crap4jRunner = (Crap4jRunner) Mockingbird.getProxyObject(Crap4jRunner.class, true);
        setPrivateField(crap4jRunner, "crapThreshold", new Float(2.8E-45F));
        setPrivateField(crap4jRunner, "crapPercentWarningThreshold", new Float(2.8E-45F));
        setPrivateField(crap4jRunner, "crapPercentCriticalThreshold", new Float(2.8E-45F));
        Mockingbird.enterRecordingMode();
        SuperRunnerCoverageReader superRunnerCoverageReader = (SuperRunnerCoverageReader) Mockingbird.getProxyObject(SuperRunnerCoverageReader.class);
        Mockingbird.replaceObjectForRecording(SuperRunnerCoverageReader.class, "<init>(org.crap4j.CrapProject)", superRunnerCoverageReader);
        Mockingbird.setReturnValue(superRunnerCoverageReader.read(), null);
        MetricsComplexityReader metricsComplexityReader = (MetricsComplexityReader) Mockingbird.getProxyObject(MetricsComplexityReader.class);
        Mockingbird.replaceObjectForRecording(MetricsComplexityReader.class, "<init>(org.crap4j.CrapProject)", metricsComplexityReader);
        Mockingbird.setReturnValue(metricsComplexityReader.readMethodComplexities(), null);
        Mockingbird.setReturnValue(MethodCrap.combine(null, null), null);
        SystemCrapStats systemCrapStats = (SystemCrapStats) Mockingbird.getProxyObject(SystemCrapStats.class);
        Mockingbird.replaceObjectForRecording(SystemCrapStats.class, "<init>(java.util.List,java.lang.String,org.crap4j.CrapProject,float,float,float)", systemCrapStats);
        systemCrapStats.writeReport();
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(Crap4jRunner.class);
        crap4jRunner.readResults(null);
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testBuildMethodCrapThrowsIllegalArgumentException() throws Throwable {
        MethodComplexity methodComplexity = new MethodComplexity("testCrap4jRunnerParam1", "testCrap4jRunnerParam2", "testCrap4jRunnerParam3", "testCrap4jRunnerParam4", "testCrap4jRunnerParam5", -1, "testCrap4jRunnerParam7");
        Crap4jRunner crap4jRunner = new Crap4jRunner(true, false, new AntSuperrunnerCoverageStrategy(Main.createMain()), 100.0F, 1000.0F, 0.0F);
        List arrayList = new ArrayList(1000);
        arrayList.add(methodComplexity);
        try {
            callPrivateMethod("org.crap4j.Crap4jRunner", "buildMethodCrap", new Class[] {List.class, List.class}, crap4jRunner, new Object[] {new ArrayList(100), arrayList});
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertEquals("ex.getMessage()", "coverage is 0 or greater and complexity is 0 (really 1) or greater", ex.getMessage());
            assertThrownBy(MethodCrap.class, ex);
        }
    }
    
    public void testBuildMethodCrapThrowsNullPointerException() throws Throwable {
        Crap4jRunner crap4jRunner = new Crap4jRunner(true, false, new AntSuperrunnerCoverageStrategy(Main.createMain()), 100.0F, 1000.0F, 0.0F);
        try {
            callPrivateMethod("org.crap4j.Crap4jRunner", "buildMethodCrap", new Class[] {List.class, List.class}, crap4jRunner, new Object[] {null, new ArrayList(100)});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(Collections.class, ex);
        }
    }
    
    public void testDoProjectThrowsNullPointerException() throws Throwable {
        CoverageGeneratorStrategy antSuperrunnerCoverageStrategy = new AntSuperrunnerCoverageStrategy(Main.createMain());
        Crap4jRunner crap4jRunner = new Crap4jRunner(true, false, antSuperrunnerCoverageStrategy, 100.0F, 1000.0F, 0.0F);
        try {
            crap4jRunner.doProject(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(AntSuperrunnerCoverageStrategy.class, ex);
            assertSame("crap4jRunner.coverageStrategy", antSuperrunnerCoverageStrategy, getPrivateField(crap4jRunner, "coverageStrategy"));
        }
    }
    
    public void testGenerateCoverageDataStatsForThrowsNullPointerException() throws Throwable {
        CoverageGeneratorStrategy strategy = new AntSuperrunnerCoverageStrategy(Main.createMain());
        Crap4jRunner crap4jRunner = new Crap4jRunner(true, false, strategy, 100.0F, 1000.0F, 0.0F);
        try {
            callPrivateMethod("org.crap4j.Crap4jRunner", "generateCoverageDataStatsFor", new Class[] {CrapProject.class}, crap4jRunner, new Object[] {null});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(AntSuperrunnerCoverageStrategy.class, ex);
            assertSame("crap4jRunner.coverageStrategy", strategy, getPrivateField(crap4jRunner, "coverageStrategy"));
        }
    }
    
    public void testReadMethodComplexityThrowsNullPointerException() throws Throwable {
        Crap4jRunner crap4jRunner = new Crap4jRunner(true, false, new AntSuperrunnerCoverageStrategy(Main.createMain()), 100.0F, 1000.0F, 0.0F);
        try {
            callPrivateMethod("org.crap4j.Crap4jRunner", "readMethodComplexity", new Class[] {CrapProject.class}, crap4jRunner, new Object[] {null});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(MetricsComplexityReader.class, ex);
        }
    }
    
    public void testReadResultsThrowsNullPointerException() throws Throwable {
        Crap4jRunner crap4jRunner = new Crap4jRunner(true, false, new AntSuperrunnerCoverageStrategy(Main.createMain()), 100.0F, 1000.0F, 0.0F);
        try {
            crap4jRunner.readResults(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(MetricsComplexityReader.class, ex);
        }
    }
}

