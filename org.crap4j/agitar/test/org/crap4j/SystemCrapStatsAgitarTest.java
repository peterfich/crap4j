/**
 * Generated by Agitar build: JUnitFactory Version 2.1.0.000576 (Build date: Oct 19, 2007) [2.1.0.000576]
 * JDK Version: 1.5.0_11
 *
 * Generated on Oct 26, 2007 4:02:03 PM
 * Time to generate: 03:33.674 seconds
 *
 */

package org.crap4j;

import com.agitar.lib.junit.AgitarTestCase;
import com.agitar.lib.mockingbird.Mockingbird;
import java.awt.image.DirectColorModel;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.FilePermission;
import java.io.InputStream;
import java.io.Writer;
import java.text.NumberFormat;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Iterator;
import java.util.List;
import java.util.zip.ZipFile;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerConfigurationException;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.stream.StreamResult;
import javax.xml.transform.stream.StreamSource;
import org.crap4j.gauge.CrapImageGenerator;
import org.crap4j.gauge.NewCrapImageGenerator;
import org.crap4j.util.FileUtil;
import org.crap4j.util.FormatUtil;
import org.crap4j.util.MyStringBuilder;
import org.crap4j.util.StreamCopier;

public class SystemCrapStatsAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return SystemCrapStats.class;
    }
    
    public void testConstructor() throws Throwable {
        MethodComplexity complexity2 = new MethodComplexity("testSystemCrapStatsMethodSignature", "testSystemCrapStatsPkgclassName", "testSystemCrapStatsMethodName", "testSystemCrapStatsMethodDescriptor", "testSystemCrapStatsJava5Signature", 100, "testSystemCrapStatsPrettyMethodSignature");
        MethodCrap methodCrap = new MethodCrap("testSystemCrapStatsMethodSignature", 0.0F, complexity2);
        List crapValues = new ArrayList(100);
        crapValues.add(methodCrap);
        crapValues.add(new MethodCrap("testSystemCrapStatsMethodSignature1", 1.0F, complexity2));
        CrapProject crapProject = new CrapProject("testSystemCrapStatsProjectDir", new ArrayList(1000), new ArrayList(0), new ArrayList(1), new ArrayList(10), "/home/agitar/work/sexy-dolphin-05-agitar-0/tmp/agitar-agitar/Agitator48455.dir/Agitator71.tmp");
        SystemCrapStats systemCrapStats = new SystemCrapStats(crapValues, "testSystemCrapStatsName", crapProject, 100.0F, 1000.0F, 0.0F);
        assertEquals("systemCrapStats.toString()", "testSystemCrapStatsName\n_____________________\nTotal Crap: 10200.00, Crap: 5100.00, Median: 10100.00, Average: 5100.00, Std Dev: 5000.00, Method Count: 2, crapMethodCount: 2.00, crapMethodPercent: 100.00%", systemCrapStats.toString());
        assertEquals("systemCrapStats.crapPercentWarningThreshold", 1000.0F, ((Number) getPrivateField(systemCrapStats, "crapPercentWarningThreshold")).floatValue(), 1.0E-6F);
        assertEquals("systemCrapStats.getCrapNumber()", 5100.0F, systemCrapStats.getCrapNumber(), 1.0E-6F);
        assertEquals("systemCrapStats.getStdDev()", 5000.0, systemCrapStats.getStdDev(), 1.0E-6);
        assertEquals("systemCrapStats.crapMethodCount", new Integer(2), getPrivateField(systemCrapStats, "crapMethodCount"));
        assertEquals("systemCrapStats.crapThreshold", 100.0F, ((Number) getPrivateField(systemCrapStats, "crapThreshold")).floatValue(), 1.0E-6F);
        assertEquals("systemCrapStats.crapWorkLoad", 102, ((Number) getPrivateField(systemCrapStats, "crapWorkLoad")).intValue());
        assertSame("systemCrapStats.crapProject", crapProject, getPrivateField(systemCrapStats, "crapProject"));
        assertSame("systemCrapStats.getSubjects()", crapValues, systemCrapStats.getSubjects());
        assertEquals("systemCrapStats.getSubjectCount()", 2, systemCrapStats.getSubjectCount());
        assertEquals("systemCrapStats.crapPercentCriticalThreshold", 0.0F, ((Number) getPrivateField(systemCrapStats, "crapPercentCriticalThreshold")).floatValue(), 1.0E-6F);
        assertEquals("systemCrapStats.getAverage()", 5100.0F, systemCrapStats.getAverage(), 1.0E-6F);
        assertEquals("systemCrapStats.getMedian()", 10100.0F, systemCrapStats.getMedian(), 1.0E-6F);
        assertEquals("systemCrapStats.getTotal()", 10200.0F, systemCrapStats.getTotal(), 1.0E-6F);
    }
    
    public void testConstructor1() throws Throwable {
        MethodComplexity complexity2 = new MethodComplexity("testSystemCrapStatsMethodSignature", "testSystemCrapStatsPkgclassName", "testSystemCrapStatsMethodName", "testSystemCrapStatsMethodDescriptor", "testSystemCrapStatsJava5Signature", 100, "testSystemCrapStatsPrettyMethodSignature");
        CrapProject crapProject = new CrapProject("testSystemCrapStatsProjectDir", new ArrayList(100), new ArrayList(1000), new ArrayList(0), new ArrayList(1), "/home/agitar/work/sexy-dolphin-05-agitar-0/tmp/agitar-agitar/Agitator48455.dir/Agitator71.tmp");
        List crapValues = new ArrayList(10);
        crapValues.add(new MethodCrap("testSystemCrapStatsMethodSignature", 0.0F, complexity2));
        SystemCrapStats systemCrapStats = new SystemCrapStats(crapValues, "testSystemCrapStatsName", crapProject, 100.0F, 1000.0F, 0.0F);
        assertEquals("systemCrapStats.toString()", "testSystemCrapStatsName\n_____________________\nTotal Crap: 10100.00, Crap: 10100.00, Median: 10100.00, Average: 10100.00, Std Dev: 0.00, Method Count: 1, crapMethodCount: 1.00, crapMethodPercent: 100.00%", systemCrapStats.toString());
        assertEquals("systemCrapStats.crapPercentWarningThreshold", 1000.0F, ((Number) getPrivateField(systemCrapStats, "crapPercentWarningThreshold")).floatValue(), 1.0E-6F);
        assertEquals("systemCrapStats.getCrapNumber()", 10100.0F, systemCrapStats.getCrapNumber(), 1.0E-6F);
        assertEquals("systemCrapStats.getStdDev()", 0.0, systemCrapStats.getStdDev(), 1.0E-6);
        assertEquals("systemCrapStats.crapMethodCount", new Integer(1), getPrivateField(systemCrapStats, "crapMethodCount"));
        assertEquals("systemCrapStats.crapThreshold", 100.0F, ((Number) getPrivateField(systemCrapStats, "crapThreshold")).floatValue(), 1.0E-6F);
        assertEquals("systemCrapStats.crapWorkLoad", 101, ((Number) getPrivateField(systemCrapStats, "crapWorkLoad")).intValue());
        assertSame("systemCrapStats.crapProject", crapProject, getPrivateField(systemCrapStats, "crapProject"));
        assertSame("systemCrapStats.getSubjects()", crapValues, systemCrapStats.getSubjects());
        assertEquals("systemCrapStats.getSubjectCount()", 1, systemCrapStats.getSubjectCount());
        assertEquals("systemCrapStats.crapPercentCriticalThreshold", 0.0F, ((Number) getPrivateField(systemCrapStats, "crapPercentCriticalThreshold")).floatValue(), 1.0E-6F);
        assertEquals("systemCrapStats.getAverage()", 10100.0F, systemCrapStats.getAverage(), 1.0E-6F);
        assertEquals("systemCrapStats.getMedian()", 10100.0F, systemCrapStats.getMedian(), 1.0E-6F);
        assertEquals("systemCrapStats.getTotal()", 10100.0F, systemCrapStats.getTotal(), 1.0E-6F);
    }
    
    public void testConstructor2() throws Throwable {
        CrapProject crapProject = new CrapProject("testSystemCrapStatsProjectDir", new ArrayList(100), new ArrayList(1000), new ArrayList(0), new ArrayList(1), "/home/agitar/work/sexy-dolphin-05-agitar-0/tmp/agitar-agitar/Agitator48455.dir/Agitator71.tmp");
        List crapValues = new ArrayList(10);
        MethodComplexity complexity2 = new MethodComplexity("testSystemCrapStatsMethodSignature", "testSystemCrapStatsPkgclassName", "testSystemCrapStatsMethodName", "testSystemCrapStatsMethodDescriptor", "testSystemCrapStatsJava5Signature", 0, "testSystemCrapStatsPrettyMethodSignature");
        MethodComplexity complexity2_2 = new MethodComplexity("testSystemCrapStatsMethodSignature1", "testSystemCrapStatsPkgclassName1", "testSystemCrapStatsMethodName1", "testSystemCrapStatsMethodDescriptor1", "testSystemCrapStatsJava5Signature1", 1, "testSystemCrapStatsPrettyMethodSignature1");
        crapValues.add(new MethodCrap("testSystemCrapStatsMethodSignature", 0.0F, complexity2));
        crapValues.add(new MethodCrap("testSystemCrapStatsMethodSignature1", 1.0F, complexity2_2));
        SystemCrapStats systemCrapStats = new SystemCrapStats(crapValues, "testSystemCrapStatsName", crapProject, 100.0F, 1000.0F, 0.0F);
        assertEquals("systemCrapStats.toString()", "testSystemCrapStatsName\n_____________________\nTotal Crap: 1.00, Crap: 0.50, Median: 1.00, Average: 0.50, Std Dev: 0.50, Method Count: 2, crapMethodCount: 0.00, crapMethodPercent: 0.00%", systemCrapStats.toString());
        assertEquals("systemCrapStats.crapPercentWarningThreshold", 1000.0F, ((Number) getPrivateField(systemCrapStats, "crapPercentWarningThreshold")).floatValue(), 1.0E-6F);
        assertEquals("systemCrapStats.getCrapNumber()", 0.5F, systemCrapStats.getCrapNumber(), 1.0E-6F);
        assertEquals("systemCrapStats.getStdDev()", 0.5, systemCrapStats.getStdDev(), 1.0E-6);
        assertEquals("systemCrapStats.crapMethodCount", new Integer(0), getPrivateField(systemCrapStats, "crapMethodCount"));
        assertEquals("systemCrapStats.crapThreshold", 100.0F, ((Number) getPrivateField(systemCrapStats, "crapThreshold")).floatValue(), 1.0E-6F);
        assertEquals("systemCrapStats.crapWorkLoad", 0, ((Number) getPrivateField(systemCrapStats, "crapWorkLoad")).intValue());
        assertSame("systemCrapStats.crapProject", crapProject, getPrivateField(systemCrapStats, "crapProject"));
        assertSame("systemCrapStats.getSubjects()", crapValues, systemCrapStats.getSubjects());
        assertEquals("systemCrapStats.getSubjectCount()", 2, systemCrapStats.getSubjectCount());
        assertEquals("systemCrapStats.crapPercentCriticalThreshold", 0.0F, ((Number) getPrivateField(systemCrapStats, "crapPercentCriticalThreshold")).floatValue(), 1.0E-6F);
        assertEquals("systemCrapStats.getAverage()", 0.5F, systemCrapStats.getAverage(), 1.0E-6F);
        assertEquals("systemCrapStats.getMedian()", 1.0F, systemCrapStats.getMedian(), 1.0E-6F);
        assertEquals("systemCrapStats.getTotal()", 1.0F, systemCrapStats.getTotal(), 1.0E-6F);
    }
    
    public void testConstructor3() throws Throwable {
        CrapProject crapProject = new CrapProject("testSystemCrapStatsProjectDir", new ArrayList(100), new ArrayList(1000), new ArrayList(0), new ArrayList(1), "/home/agitar/work/sexy-dolphin-05-agitar-0/tmp/agitar-agitar/Agitator48455.dir/Agitator71.tmp");
        List crapValues = new ArrayList(10);
        MethodComplexity complexity2 = new MethodComplexity("testSystemCrapStatsMethodSignature", "testSystemCrapStatsPkgclassName", "testSystemCrapStatsMethodName", "testSystemCrapStatsMethodDescriptor", "testSystemCrapStatsJava5Signature", 0, "testSystemCrapStatsPrettyMethodSignature");
        crapValues.add(new MethodCrap("testSystemCrapStatsMethodSignature", 0.0F, complexity2));
        SystemCrapStats systemCrapStats = new SystemCrapStats(crapValues, "testSystemCrapStatsName", crapProject, 100.0F, 1000.0F, 0.0F);
        assertEquals("systemCrapStats.toString()", "testSystemCrapStatsName\n_____________________\nTotal Crap: 0.00, Crap: 0.00, Median: 0.00, Average: 0.00, Std Dev: 0.00, Method Count: 1, crapMethodCount: 0.00, crapMethodPercent: 0.00%", systemCrapStats.toString());
        assertEquals("systemCrapStats.crapPercentWarningThreshold", 1000.0F, ((Number) getPrivateField(systemCrapStats, "crapPercentWarningThreshold")).floatValue(), 1.0E-6F);
        assertEquals("systemCrapStats.getCrapNumber()", 0.0F, systemCrapStats.getCrapNumber(), 1.0E-6F);
        assertEquals("systemCrapStats.getStdDev()", 0.0, systemCrapStats.getStdDev(), 1.0E-6);
        assertEquals("systemCrapStats.crapMethodCount", new Integer(0), getPrivateField(systemCrapStats, "crapMethodCount"));
        assertEquals("systemCrapStats.crapThreshold", 100.0F, ((Number) getPrivateField(systemCrapStats, "crapThreshold")).floatValue(), 1.0E-6F);
        assertEquals("systemCrapStats.crapWorkLoad", 0, ((Number) getPrivateField(systemCrapStats, "crapWorkLoad")).intValue());
        assertSame("systemCrapStats.crapProject", crapProject, getPrivateField(systemCrapStats, "crapProject"));
        assertSame("systemCrapStats.getSubjects()", crapValues, systemCrapStats.getSubjects());
        assertEquals("systemCrapStats.getSubjectCount()", 1, systemCrapStats.getSubjectCount());
        assertEquals("systemCrapStats.crapPercentCriticalThreshold", 0.0F, ((Number) getPrivateField(systemCrapStats, "crapPercentCriticalThreshold")).floatValue(), 1.0E-6F);
        assertEquals("systemCrapStats.getAverage()", 0.0F, systemCrapStats.getAverage(), 1.0E-6F);
        assertEquals("systemCrapStats.getMedian()", 0.0F, systemCrapStats.getMedian(), 1.0E-6F);
        assertEquals("systemCrapStats.getTotal()", 0.0F, systemCrapStats.getTotal(), 1.0E-6F);
    }
    
    public void testConstructor4() throws Throwable {
        CrapProject crapProject = new CrapProject("testSystemCrapStatsProjectDir", new ArrayList(100), new ArrayList(1000), new ArrayList(0), new ArrayList(1), "/home/agitar/work/sexy-dolphin-05-agitar-0/tmp/agitar-agitar/Agitator48455.dir/Agitator71.tmp");
        List crapValues = new ArrayList(10);
        SystemCrapStats systemCrapStats = new SystemCrapStats(crapValues, "testSystemCrapStatsName", crapProject, 100.0F, 1000.0F, 0.0F);
        assertEquals("systemCrapStats.toString()", "testSystemCrapStatsName\n_____________________\nTotal Crap: 0.00, Crap: \uFFFD, Median: 0.00, Average: \uFFFD, Std Dev: \uFFFD, Method Count: 0, crapMethodCount: 0.00, crapMethodPercent: \uFFFD%", systemCrapStats.toString());
        assertEquals("systemCrapStats.crapPercentWarningThreshold", 1000.0F, ((Number) getPrivateField(systemCrapStats, "crapPercentWarningThreshold")).floatValue(), 1.0E-6F);
        assertEquals("systemCrapStats.crapMethodCount", new Integer(0), getPrivateField(systemCrapStats, "crapMethodCount"));
        assertEquals("systemCrapStats.crapThreshold", 100.0F, ((Number) getPrivateField(systemCrapStats, "crapThreshold")).floatValue(), 1.0E-6F);
        assertEquals("systemCrapStats.crapWorkLoad", 0, ((Number) getPrivateField(systemCrapStats, "crapWorkLoad")).intValue());
        assertSame("systemCrapStats.crapProject", crapProject, getPrivateField(systemCrapStats, "crapProject"));
        assertSame("systemCrapStats.getSubjects()", crapValues, systemCrapStats.getSubjects());
        assertEquals("systemCrapStats.getSubjectCount()", 0, systemCrapStats.getSubjectCount());
        assertEquals("systemCrapStats.crapPercentCriticalThreshold", 0.0F, ((Number) getPrivateField(systemCrapStats, "crapPercentCriticalThreshold")).floatValue(), 1.0E-6F);
        assertEquals("systemCrapStats.getMedian()", 0.0F, systemCrapStats.getMedian(), 1.0E-6F);
        assertEquals("systemCrapStats.getTotal()", 0.0F, systemCrapStats.getTotal(), 1.0E-6F);
    }
    
    public void testConstructor5() throws Throwable {
        MethodComplexity complexity2 = new MethodComplexity("testSystemCrapStatsMethodSignature", "testSystemCrapStatsPkgclassName", "testSystemCrapStatsMethodName", "testSystemCrapStatsMethodDescriptor", "testSystemCrapStatsJava5Signature", 100, "testSystemCrapStatsPrettyMethodSignature");
        CrapProject crapProject = new CrapProject("testSystemCrapStatsProjectDir", new ArrayList(100), new ArrayList(1000), new ArrayList(0), new ArrayList(1), "/home/agitar/work/sexy-dolphin-05-agitar-0/tmp/agitar-agitar/Agitator48455.dir/Agitator71.tmp");
        MethodComplexity complexity2_2 = new MethodComplexity("testSystemCrapStatsMethodSignature1", "testSystemCrapStatsPkgclassName1", "testSystemCrapStatsMethodName1", "testSystemCrapStatsMethodDescriptor1", "testSystemCrapStatsJava5Signature1", 0, "testSystemCrapStatsPrettyMethodSignature1");
        List crapValues = new ArrayList(10);
        crapValues.add(new MethodCrap("testSystemCrapStatsMethodSignature", 0.0F, complexity2_2));
        crapValues.add(new MethodCrap("testSystemCrapStatsMethodSignature1", 1.0F, complexity2));
        SystemCrapStats systemCrapStats = new SystemCrapStats(crapValues, "testSystemCrapStatsName", crapProject, 100.0F, 1000.0F, 0.0F);
        assertEquals("systemCrapStats.toString()", "testSystemCrapStatsName\n_____________________\nTotal Crap: 100.00, Crap: 50.00, Median: 100.00, Average: 50.00, Std Dev: 50.00, Method Count: 2, crapMethodCount: 1.00, crapMethodPercent: 50.00%", systemCrapStats.toString());
        assertEquals("systemCrapStats.crapPercentWarningThreshold", 1000.0F, ((Number) getPrivateField(systemCrapStats, "crapPercentWarningThreshold")).floatValue(), 1.0E-6F);
        assertEquals("systemCrapStats.getCrapNumber()", 50.0F, systemCrapStats.getCrapNumber(), 1.0E-6F);
        assertEquals("systemCrapStats.getStdDev()", 50.0, systemCrapStats.getStdDev(), 1.0E-6);
        assertEquals("systemCrapStats.crapMethodCount", new Integer(1), getPrivateField(systemCrapStats, "crapMethodCount"));
        assertEquals("systemCrapStats.crapThreshold", 100.0F, ((Number) getPrivateField(systemCrapStats, "crapThreshold")).floatValue(), 1.0E-6F);
        assertEquals("systemCrapStats.crapWorkLoad", 1, ((Number) getPrivateField(systemCrapStats, "crapWorkLoad")).intValue());
        assertSame("systemCrapStats.crapProject", crapProject, getPrivateField(systemCrapStats, "crapProject"));
        assertSame("systemCrapStats.getSubjects()", crapValues, systemCrapStats.getSubjects());
        assertEquals("systemCrapStats.getSubjectCount()", 2, systemCrapStats.getSubjectCount());
        assertEquals("systemCrapStats.crapPercentCriticalThreshold", 0.0F, ((Number) getPrivateField(systemCrapStats, "crapPercentCriticalThreshold")).floatValue(), 1.0E-6F);
        assertEquals("systemCrapStats.getAverage()", 50.0F, systemCrapStats.getAverage(), 1.0E-6F);
        assertEquals("systemCrapStats.getMedian()", 100.0F, systemCrapStats.getMedian(), 1.0E-6F);
        assertEquals("systemCrapStats.getTotal()", 100.0F, systemCrapStats.getTotal(), 1.0E-6F);
    }
    
    public void testAdjustedHeight() throws Throwable {
        CrapProject crapProject = new CrapProject("testSystemCrapStatsProjectDir", new ArrayList(100), new ArrayList(1000), new ArrayList(0), new ArrayList(1), "/home/agitar/work/sexy-dolphin-05-agitar-0/tmp/agitar-agitar/Agitator48455.dir/Agitator71.tmp");
        SystemCrapStats systemCrapStats = new SystemCrapStats(new ArrayList(10), "testSystemCrapStatsName", crapProject, 100.0F, 1000.0F, 0.0F);
        float result = ((Number) callPrivateMethod("org.crap4j.SystemCrapStats", "adjustedHeight", new Class[] {int.class, float.class}, systemCrapStats, new Object[] {new Integer(1), new Float(100.0F)})).floatValue();
        assertEquals("result", 100.0F, result, 1.0E-6F);
    }
    
    public void testAdjustedHeight1() throws Throwable {
        SystemCrapStats systemCrapStats = new SystemCrapStats(new ArrayList(100), "testSystemCrapStatsName", null, 100.0F, 1000.0F, 0.0F);
        float result = ((Number) callPrivateMethod("org.crap4j.SystemCrapStats", "adjustedHeight", new Class[] {int.class, float.class}, systemCrapStats, new Object[] {new Integer(0), new Float(100.0F)})).floatValue();
        assertEquals("result", 0.0F, result, 1.0E-6F);
    }
    
    public void testAdjustedHeight2() throws Throwable {
        CrapProject crapProject = new CrapProject("testSystemCrapStatsProjectDir", new ArrayList(100), new ArrayList(1000), new ArrayList(0), new ArrayList(1), "/home/agitar/work/sexy-dolphin-05-agitar-0/tmp/agitar-agitar/Agitator48455.dir/Agitator71.tmp");
        SystemCrapStats systemCrapStats = new SystemCrapStats(new ArrayList(10), "testSystemCrapStatsName", crapProject, 100.0F, 1000.0F, 0.0F);
        float result = ((Number) callPrivateMethod("org.crap4j.SystemCrapStats", "adjustedHeight", new Class[] {int.class, float.class}, systemCrapStats, new Object[] {new Integer(-1), new Float(100.0F)})).floatValue();
        assertEquals("result", 0.0F, result, 1.0E-6F);
    }
    
    public void testComputeCrapWorkLoad() throws Throwable {
        CrapProject crapProject = new CrapProject("testSystemCrapStatsProjectDir", new ArrayList(100), new ArrayList(1000), new ArrayList(0), new ArrayList(1), "/home/agitar/work/sexy-dolphin-05-agitar-0/tmp/agitar-agitar/Agitator48455.dir/Agitator71.tmp");
        SystemCrapStats systemCrapStats = new SystemCrapStats(new ArrayList(10), "testSystemCrapStatsName", crapProject, 100.0F, 1000.0F, 0.0F);
        List arrayList = new ArrayList(10000);
        MethodComplexity complexity2 = new MethodComplexity("testSystemCrapStatsMethodSignature", "testSystemCrapStatsPkgclassName", "testSystemCrapStatsMethodName", "testSystemCrapStatsMethodDescriptor", "testSystemCrapStatsJava5Signature", 0, "testSystemCrapStatsPrettyMethodSignature");
        arrayList.add(new MethodCrap("testSystemCrapStatsMethodSignature", 0.0F, complexity2));
        int result = ((Number) callPrivateMethod("org.crap4j.SystemCrapStats", "computeCrapWorkLoad", new Class[] {List.class}, systemCrapStats, new Object[] {arrayList})).intValue();
        assertEquals("result", 0, result);
    }
    
    public void testComputeCrapWorkLoad1() throws Throwable {
        CrapProject crapProject = new CrapProject("testSystemCrapStatsProjectDir", new ArrayList(100), new ArrayList(1000), new ArrayList(0), new ArrayList(1), "/home/agitar/work/sexy-dolphin-05-agitar-0/tmp/agitar-agitar/Agitator48455.dir/Agitator71.tmp");
        SystemCrapStats systemCrapStats = new SystemCrapStats(new ArrayList(10), "testSystemCrapStatsName", crapProject, 100.0F, 1000.0F, 0.0F);
        int result = ((Number) callPrivateMethod("org.crap4j.SystemCrapStats", "computeCrapWorkLoad", new Class[] {List.class}, systemCrapStats, new Object[] {new ArrayList(10000)})).intValue();
        assertEquals("result", 0, result);
    }
    
    public void testComputeCrapWorkLoad2() throws Throwable {
        CrapProject crapProject = new CrapProject("testSystemCrapStatsProjectDir", new ArrayList(100), new ArrayList(1000), new ArrayList(0), new ArrayList(1), "/home/agitar/work/sexy-dolphin-05-agitar-0/tmp/agitar-agitar/Agitator48455.dir/Agitator71.tmp");
        MethodComplexity complexity2 = new MethodComplexity("testSystemCrapStatsMethodSignature", "testSystemCrapStatsPkgclassName", "testSystemCrapStatsMethodName", "testSystemCrapStatsMethodDescriptor", "testSystemCrapStatsJava5Signature", 100, "testSystemCrapStatsPrettyMethodSignature");
        MethodCrap methodCrap = new MethodCrap("testSystemCrapStatsMethodSignature", 0.0F, complexity2);
        SystemCrapStats systemCrapStats = new SystemCrapStats(new ArrayList(10), "testSystemCrapStatsName", crapProject, 100.0F, 1000.0F, 0.0F);
        List arrayList = new ArrayList(10000);
        arrayList.add(methodCrap);
        int result = ((Number) callPrivateMethod("org.crap4j.SystemCrapStats", "computeCrapWorkLoad", new Class[] {List.class}, systemCrapStats, new Object[] {arrayList})).intValue();
        assertEquals("result", 101, result);
    }
    
    public void testComputeMedian() throws Throwable {
        CrapProject crapProject = new CrapProject("testSystemCrapStatsProjectDir", new ArrayList(100), new ArrayList(1000), new ArrayList(0), new ArrayList(1), "/home/agitar/work/sexy-dolphin-05-agitar-0/tmp/agitar-agitar/Agitator48455.dir/Agitator71.tmp");
        SystemCrapStats systemCrapStats = new SystemCrapStats(new ArrayList(10), "testSystemCrapStatsName", crapProject, 100.0F, 1000.0F, 0.0F);
        float result = ((Number) callPrivateMethod("org.crap4j.SystemCrapStats", "computeMedian", new Class[] {}, systemCrapStats, new Object[] {})).floatValue();
        assertEquals("result", 0.0F, result, 1.0E-6F);
    }
    
    public void testComputeMedian1() throws Throwable {
        MethodComplexity complexity2 = new MethodComplexity("testSystemCrapStatsMethodSignature", "testSystemCrapStatsPkgclassName", "testSystemCrapStatsMethodName", "testSystemCrapStatsMethodDescriptor", "testSystemCrapStatsJava5Signature", 100, "testSystemCrapStatsPrettyMethodSignature");
        MethodCrap methodCrap = new MethodCrap("testSystemCrapStatsMethodSignature", 0.0F, complexity2);
        List crapValues = new ArrayList(100);
        crapValues.add(methodCrap);
        crapValues.add(new MethodCrap("testSystemCrapStatsMethodSignature1", 1.0F, complexity2));
        CrapProject crapProject = new CrapProject("testSystemCrapStatsProjectDir", new ArrayList(1000), new ArrayList(0), new ArrayList(1), new ArrayList(10), "/home/agitar/work/sexy-dolphin-05-agitar-0/tmp/agitar-agitar/Agitator48455.dir/Agitator71.tmp");
        SystemCrapStats systemCrapStats = new SystemCrapStats(crapValues, "testSystemCrapStatsName", crapProject, 100.0F, 1000.0F, 0.0F);
        float result = ((Number) callPrivateMethod("org.crap4j.SystemCrapStats", "computeMedian", new Class[] {}, systemCrapStats, new Object[] {})).floatValue();
        assertEquals("result", 10100.0F, result, 1.0E-6F);
        assertSame("systemCrapStats.getSubjects()", crapValues, systemCrapStats.getSubjects());
    }
    
    public void testComputeMedian2() throws Throwable {
        CrapProject crapProject = new CrapProject("testSystemCrapStatsProjectDir", new ArrayList(100), new ArrayList(1000), new ArrayList(0), new ArrayList(1), "/home/agitar/work/sexy-dolphin-05-agitar-0/tmp/agitar-agitar/Agitator48455.dir/Agitator71.tmp");
        List crapValues = new ArrayList(10);
        MethodComplexity complexity2 = new MethodComplexity("testSystemCrapStatsMethodSignature", "testSystemCrapStatsPkgclassName", "testSystemCrapStatsMethodName", "testSystemCrapStatsMethodDescriptor", "testSystemCrapStatsJava5Signature", 100, "testSystemCrapStatsPrettyMethodSignature");
        crapValues.add(new MethodCrap("testSystemCrapStatsMethodSignature", 0.0F, complexity2));
        SystemCrapStats systemCrapStats = new SystemCrapStats(crapValues, "testSystemCrapStatsName", crapProject, 100.0F, 1000.0F, 0.0F);
        float result = ((Number) callPrivateMethod("org.crap4j.SystemCrapStats", "computeMedian", new Class[] {}, systemCrapStats, new Object[] {})).floatValue();
        assertEquals("result", 10100.0F, result, 1.0E-6F);
        assertSame("systemCrapStats.getSubjects()", crapValues, systemCrapStats.getSubjects());
    }
    
    public void testComputeStdDev() throws Throwable {
        CrapProject crapProject = new CrapProject("testSystemCrapStatsProjectDir", new ArrayList(100), new ArrayList(1000), new ArrayList(0), new ArrayList(1), "/home/agitar/work/sexy-dolphin-05-agitar-0/tmp/agitar-agitar/Agitator48455.dir/Agitator71.tmp");
        List crapValues = new ArrayList(10);
        MethodComplexity complexity2 = new MethodComplexity("testSystemCrapStatsMethodSignature", "testSystemCrapStatsPkgclassName", "testSystemCrapStatsMethodName", "testSystemCrapStatsMethodDescriptor", "testSystemCrapStatsJava5Signature", 100, "testSystemCrapStatsPrettyMethodSignature");
        crapValues.add(new MethodCrap("testSystemCrapStatsMethodSignature", 0.0F, complexity2));
        SystemCrapStats systemCrapStats = new SystemCrapStats(crapValues, "testSystemCrapStatsName", crapProject, 100.0F, 1000.0F, 0.0F);
        double result = ((Number) callPrivateMethod("org.crap4j.SystemCrapStats", "computeStdDev", new Class[] {}, systemCrapStats, new Object[] {})).doubleValue();
        assertEquals("result", 0.0, result, 1.0E-6);
        assertSame("systemCrapStats.getSubjects()", crapValues, systemCrapStats.getSubjects());
    }
    
    public void testComputeStdDev1() throws Throwable {
        CrapProject crapProject = new CrapProject("testSystemCrapStatsProjectDir", new ArrayList(100), new ArrayList(1000), new ArrayList(0), new ArrayList(1), "/home/agitar/work/sexy-dolphin-05-agitar-0/tmp/agitar-agitar/Agitator48455.dir/Agitator71.tmp");
        SystemCrapStats systemCrapStats = new SystemCrapStats(new ArrayList(10), "testSystemCrapStatsName", crapProject, 100.0F, 1000.0F, 0.0F);
        callPrivateMethod("org.crap4j.SystemCrapStats", "computeStdDev", new Class[] {}, systemCrapStats, new Object[] {});
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testComputeTotalCrap() throws Throwable {
        CrapProject crapProject = new CrapProject("testSystemCrapStatsProjectDir", new ArrayList(100), new ArrayList(1000), new ArrayList(0), new ArrayList(1), "/home/agitar/work/sexy-dolphin-05-agitar-0/tmp/agitar-agitar/Agitator48455.dir/Agitator71.tmp");
        MethodComplexity complexity2 = new MethodComplexity("testSystemCrapStatsMethodSignature", "testSystemCrapStatsPkgclassName", "testSystemCrapStatsMethodName", "testSystemCrapStatsMethodDescriptor", "testSystemCrapStatsJava5Signature", 100, "testSystemCrapStatsPrettyMethodSignature");
        List arrayList = new ArrayList(10);
        arrayList.add(new MethodCrap("testSystemCrapStatsMethodSignature", 0.0F, complexity2));
        SystemCrapStats systemCrapStats = new SystemCrapStats(new ArrayList(10000), "testSystemCrapStatsName", crapProject, 100.0F, 1000.0F, 0.0F);
        float result = ((Number) callPrivateMethod("org.crap4j.SystemCrapStats", "computeTotalCrap", new Class[] {List.class}, systemCrapStats, new Object[] {arrayList})).floatValue();
        assertEquals("result", 10100.0F, result, 1.0E-6F);
    }
    
    public void testComputeTotalCrap1() throws Throwable {
        SystemCrapStats systemCrapStats = new SystemCrapStats(new ArrayList(100), "testSystemCrapStatsName", null, 100.0F, 1000.0F, 0.0F);
        float result = ((Number) callPrivateMethod("org.crap4j.SystemCrapStats", "computeTotalCrap", new Class[] {List.class}, systemCrapStats, new Object[] {new ArrayList(1000)})).floatValue();
        assertEquals("result", 0.0F, result, 1.0E-6F);
    }
    
    public void testComputeVariance() throws Throwable {
        ArrayList crapValues = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        CrapProject crapProject = (CrapProject) Mockingbird.getProxyObject(CrapProject.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, crapValues, "size", "()int", new Object[] {}, new Integer(2), 1);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.setReturnValue(false, crapValues, "iterator", "()java.util.Iterator", new Object[] {}, iterator, 1);
        Mockingbird.setReturnValue(false, iterator, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        MethodCrap methodCrap = (MethodCrap) Mockingbird.getProxyObject(MethodCrap.class);
        Mockingbird.setReturnValue(false, iterator, "next", "()java.lang.Object", new Object[] {}, methodCrap, 1);
        Mockingbird.setReturnValue(methodCrap.getCrap(), 2.0F);
        Mockingbird.setReturnValue(false, iterator, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        MethodCrap methodCrap2 = (MethodCrap) Mockingbird.getProxyObject(MethodCrap.class);
        Mockingbird.setReturnValue(false, iterator, "next", "()java.lang.Object", new Object[] {}, methodCrap2, 1);
        Mockingbird.setReturnValue(methodCrap2.getCrap(), 0.0F);
        Mockingbird.setReturnValue(false, iterator, "hasNext", "()boolean", new Object[] {}, Boolean.FALSE, 1);
        Mockingbird.setReturnValue(false, crapValues, "size", "()int", new Object[] {}, new Integer(2), 1);
        Mockingbird.setReturnValue(false, crapValues, "size", "()int", new Object[] {}, new Integer(2), 1);
        Mockingbird.setReturnValue(false, crapValues, "get", "(int)java.lang.Object", new Object[] {new Integer(0)}, methodCrap, 1);
        Mockingbird.setReturnValue(methodCrap.getCrap(), 2.0F);
        Mockingbird.setReturnValue(false, crapValues, "size", "()int", new Object[] {}, new Integer(2), 1);
        Mockingbird.setReturnValue(false, crapValues, "get", "(int)java.lang.Object", new Object[] {new Integer(1)}, methodCrap2, 1);
        Mockingbird.setReturnValue(methodCrap2.getCrap(), 0.0F);
        Mockingbird.setReturnValue(false, crapValues, "size", "()int", new Object[] {}, new Integer(2), 1);
        Mockingbird.setReturnValue(false, crapValues, "size", "()int", new Object[] {}, new Integer(2), 1);
        Mockingbird.setReturnValue(false, crapValues, "size", "()int", new Object[] {}, new Integer(2), 1);
        Mockingbird.setReturnValue(false, crapValues, "get", "(int)java.lang.Object", new Object[] {new Integer(0)}, methodCrap, 1);
        Mockingbird.setReturnValue(methodCrap.getCrap(), 2.0F);
        Mockingbird.setReturnValue(false, crapValues, "size", "()int", new Object[] {}, new Integer(2), 1);
        Mockingbird.setReturnValue(false, crapValues, "get", "(int)java.lang.Object", new Object[] {new Integer(1)}, methodCrap2, 1);
        Mockingbird.setReturnValue(methodCrap2.getCrap(), 0.0F);
        Mockingbird.setReturnValue(false, crapValues, "size", "()int", new Object[] {}, new Integer(2), 1);
        Iterator iterator2 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.setReturnValue(false, crapValues, "iterator", "()java.util.Iterator", new Object[] {}, iterator2, 1);
        Mockingbird.setReturnValue(false, iterator2, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator2, "next", "()java.lang.Object", new Object[] {}, methodCrap, 1);
        Mockingbird.setReturnValue(methodCrap.getCrap(), 2.0F);
        Mockingbird.setReturnValue(false, iterator2, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator2, "next", "()java.lang.Object", new Object[] {}, methodCrap2, 1);
        Mockingbird.setReturnValue(methodCrap2.getCrap(), 0.0F);
        Mockingbird.setReturnValue(false, iterator2, "hasNext", "()boolean", new Object[] {}, Boolean.FALSE, 1);
        Iterator iterator3 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.setReturnValue(false, crapValues, "iterator", "()java.util.Iterator", new Object[] {}, iterator3, 1);
        Mockingbird.setReturnValue(false, iterator3, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator3, "next", "()java.lang.Object", new Object[] {}, methodCrap, 1);
        Mockingbird.setReturnValue(methodCrap.getCrapLoad(100.0F), 0);
        Mockingbird.setReturnValue(false, iterator3, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator3, "next", "()java.lang.Object", new Object[] {}, methodCrap2, 1);
        Mockingbird.setReturnValue(methodCrap2.getCrapLoad(1000.0F), 0);
        Mockingbird.setReturnValue(false, iterator3, "hasNext", "()boolean", new Object[] {}, Boolean.FALSE, 1);
        Mockingbird.enterTestMode(SystemCrapStats.class);
        SystemCrapStats systemCrapStats = new SystemCrapStats(crapValues, "testSystemCrapStatsName", crapProject, 100.0F, 1000.0F, 0.0F);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, crapValues, "size", "()int", new Object[] {}, new Integer(2), 1);
        Mockingbird.setReturnValue(false, crapValues, "size", "()int", new Object[] {}, new Integer(2), 1);
        Mockingbird.setReturnValue(false, crapValues, "get", "(int)java.lang.Object", new Object[] {new Integer(0)}, methodCrap, 1);
        Mockingbird.setReturnValue(methodCrap.getCrap(), 2.0F);
        Mockingbird.setReturnValue(false, crapValues, "size", "()int", new Object[] {}, new Integer(2), 1);
        Mockingbird.setReturnValue(false, crapValues, "get", "(int)java.lang.Object", new Object[] {new Integer(1)}, methodCrap2, 1);
        Mockingbird.setReturnValue(methodCrap2.getCrap(), 0.0F);
        Mockingbird.setReturnValue(false, crapValues, "size", "()int", new Object[] {}, new Integer(2), 1);
        Mockingbird.enterTestMode(SystemCrapStats.class);
        float result = ((Number) callPrivateMethod("org.crap4j.SystemCrapStats", "computeVariance", new Class[] {}, systemCrapStats, new Object[] {})).floatValue();
        assertEquals("result", 2.0F, result, 1.0E-6F);
        assertSame("systemCrapStats.getSubjects()", crapValues, systemCrapStats.getSubjects());
    }
    
    public void testComputeVariance1() throws Throwable {
        MethodComplexity complexity2 = new MethodComplexity("testSystemCrapStatsMethodSignature", "testSystemCrapStatsPkgclassName", "testSystemCrapStatsMethodName", "testSystemCrapStatsMethodDescriptor", "testSystemCrapStatsJava5Signature", 100, "testSystemCrapStatsPrettyMethodSignature");
        List crapValues = new ArrayList(100);
        crapValues.add(new MethodCrap("testSystemCrapStatsMethodSignature", 0.0F, complexity2));
        SystemCrapStats systemCrapStats = new SystemCrapStats(crapValues, "testSystemCrapStatsName", null, 100.0F, 1000.0F, 0.0F);
        float result = ((Number) callPrivateMethod("org.crap4j.SystemCrapStats", "computeVariance", new Class[] {}, systemCrapStats, new Object[] {})).floatValue();
        assertEquals("result", 0.0F, result, 1.0E-6F);
        assertSame("systemCrapStats.getSubjects()", crapValues, systemCrapStats.getSubjects());
    }
    
    public void testComputeVariance2() throws Throwable {
        CrapProject crapProject = new CrapProject("testSystemCrapStatsProjectDir", new ArrayList(100), new ArrayList(1000), new ArrayList(0), new ArrayList(1), "/home/agitar/work/sexy-dolphin-05-agitar-0/tmp/agitar-agitar/Agitator48455.dir/Agitator71.tmp");
        SystemCrapStats systemCrapStats = new SystemCrapStats(new ArrayList(10), "testSystemCrapStatsName", crapProject, 100.0F, 1000.0F, 0.0F);
        float result = ((Number) callPrivateMethod("org.crap4j.SystemCrapStats", "computeVariance", new Class[] {}, systemCrapStats, new Object[] {})).floatValue();
        assertEquals("result", 0.0F, result, 1.0E-6F);
    }
    
    public void testCopyFile() throws Throwable {
        CrapProject crapProject = new CrapProject("testSystemCrapStatsProjectDir", new ArrayList(1000), new ArrayList(0), new ArrayList(1), new ArrayList(10), "/home/agitar/work/sexy-dolphin-05-agitar-0/tmp/agitar-agitar/Agitator48455.dir/Agitator71.tmp");
        SystemCrapStats systemCrapStats = new SystemCrapStats(new ArrayList(100), "testSystemCrapStatsName", crapProject, 100.0F, 1000.0F, 0.0F);
        File outFile = (File) callPrivateMethod("org.crap4j.SystemCrapStats", "getXmlReportFile", new Class[] {}, systemCrapStats, new Object[] {});
        systemCrapStats.copyFile(new ByteArrayInputStream("testString".getBytes()), outFile);
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testCopyFile1() throws Throwable {
        CrapProject crapProject = new CrapProject("testSystemCrapStatsProjectDir", new ArrayList(1000), new ArrayList(0), new ArrayList(1), new ArrayList(10), "/home/agitar/work/sexy-dolphin-05-agitar-0/tmp/agitar-agitar/Agitator48455.dir/Agitator71.tmp");
        SystemCrapStats systemCrapStats = new SystemCrapStats(new ArrayList(100), "testSystemCrapStatsName", crapProject, 100.0F, 1000.0F, 0.0F);
        File xmlReportFile = (File) callPrivateMethod("org.crap4j.SystemCrapStats", "getXmlReportFile", new Class[] {}, systemCrapStats, new Object[] {});
        SystemCrapStats systemCrapStats2 = new SystemCrapStats(new ArrayList(10000), "testSystemCrapStatsName1", crapProject, 1000.0F, 0.0F, -1.0F);
        systemCrapStats2.copyFile(null, new File(xmlReportFile, "testSystemCrapStatsParam2"));
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testCopyImages() throws Throwable {
        CrapProject crapProject = new CrapProject("testSystemCrapStatsProjectDir", new ArrayList(1000), new ArrayList(0), new ArrayList(1), new ArrayList(10), "/home/agitar/work/sexy-dolphin-05-agitar-0/tmp/agitar-agitar/Agitator48455.dir/Agitator71.tmp");
        SystemCrapStats systemCrapStats = new SystemCrapStats(new ArrayList(100), "testSystemCrapStatsName", crapProject, 100.0F, 1000.0F, 0.0F);
        callPrivateMethod("org.crap4j.SystemCrapStats", "copyImages", new Class[] {}, systemCrapStats, new Object[] {});
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testCountCrapMethods() throws Throwable {
        MethodComplexity complexity2 = new MethodComplexity("testSystemCrapStatsMethodSignature", "testSystemCrapStatsPkgclassName", "testSystemCrapStatsMethodName", "testSystemCrapStatsMethodDescriptor", "testSystemCrapStatsJava5Signature", 100, "testSystemCrapStatsPrettyMethodSignature");
        MethodCrap methodCrap = new MethodCrap("testSystemCrapStatsMethodSignature", 0.0F, complexity2);
        CrapProject crapProject = new CrapProject("testSystemCrapStatsProjectDir", new ArrayList(100), new ArrayList(1000), new ArrayList(0), new ArrayList(1), "/home/agitar/work/sexy-dolphin-05-agitar-0/tmp/agitar-agitar/Agitator48455.dir/Agitator71.tmp");
        SystemCrapStats systemCrapStats = new SystemCrapStats(new ArrayList(10), "testSystemCrapStatsName", crapProject, 100.0F, 1000.0F, 0.0F);
        List arrayList = new ArrayList(10000);
        MethodComplexity complexity2_2 = new MethodComplexity("testSystemCrapStatsMethodSignature1", "testSystemCrapStatsPkgclassName1", "testSystemCrapStatsMethodName1", "testSystemCrapStatsMethodDescriptor1", "testSystemCrapStatsJava5Signature1", 0, "testSystemCrapStatsPrettyMethodSignature1");
        arrayList.add(new MethodCrap("testSystemCrapStatsMethodSignature1", 1.0F, complexity2_2));
        arrayList.add(methodCrap);
        int result = ((Number) callPrivateMethod("org.crap4j.SystemCrapStats", "countCrapMethods", new Class[] {List.class}, systemCrapStats, new Object[] {arrayList})).intValue();
        assertEquals("result", 1, result);
    }
    
    public void testCountCrapMethods1() throws Throwable {
        CrapProject crapProject = new CrapProject("testSystemCrapStatsProjectDir", new ArrayList(1000), new ArrayList(0), new ArrayList(1), new ArrayList(10), "/home/agitar/work/sexy-dolphin-05-agitar-0/tmp/agitar-agitar/Agitator48455.dir/Agitator71.tmp");
        SystemCrapStats systemCrapStats = new SystemCrapStats(new ArrayList(100), "testSystemCrapStatsName", crapProject, 100.0F, 1000.0F, 0.0F);
        MethodComplexity complexity2 = new MethodComplexity("testSystemCrapStatsMethodSignature", "testSystemCrapStatsPkgclassName", "testSystemCrapStatsMethodName", "testSystemCrapStatsMethodDescriptor", "testSystemCrapStatsJava5Signature", 0, "testSystemCrapStatsPrettyMethodSignature");
        List arrayList = new ArrayList(10000);
        arrayList.add(new MethodCrap("testSystemCrapStatsMethodSignature", 0.0F, complexity2));
        int result = ((Number) callPrivateMethod("org.crap4j.SystemCrapStats", "countCrapMethods", new Class[] {List.class}, systemCrapStats, new Object[] {arrayList})).intValue();
        assertEquals("result", 0, result);
    }
    
    public void testCountCrapMethods2() throws Throwable {
        CrapProject crapProject = new CrapProject("testSystemCrapStatsProjectDir", new ArrayList(1000), new ArrayList(0), new ArrayList(1), new ArrayList(10), "/home/agitar/work/sexy-dolphin-05-agitar-0/tmp/agitar-agitar/Agitator48455.dir/Agitator71.tmp");
        SystemCrapStats systemCrapStats = new SystemCrapStats(new ArrayList(100), "testSystemCrapStatsName", crapProject, 0.0F, 100.0F, 1000.0F);
        MethodComplexity complexity2 = new MethodComplexity("testSystemCrapStatsMethodSignature", "testSystemCrapStatsPkgclassName", "testSystemCrapStatsMethodName", "testSystemCrapStatsMethodDescriptor", "testSystemCrapStatsJava5Signature", 100, "testSystemCrapStatsPrettyMethodSignature");
        List arrayList = new ArrayList(10000);
        arrayList.add(new MethodCrap("testSystemCrapStatsMethodSignature", 0.0F, complexity2));
        int result = ((Number) callPrivateMethod("org.crap4j.SystemCrapStats", "countCrapMethods", new Class[] {List.class}, systemCrapStats, new Object[] {arrayList})).intValue();
        assertEquals("result", 1, result);
    }
    
    public void testCountCrapMethods3() throws Throwable {
        CrapProject crapProject = new CrapProject("testSystemCrapStatsProjectDir", new ArrayList(1000), new ArrayList(0), new ArrayList(1), new ArrayList(10), "/home/agitar/work/sexy-dolphin-05-agitar-0/tmp/agitar-agitar/Agitator48455.dir/Agitator71.tmp");
        SystemCrapStats systemCrapStats = new SystemCrapStats(new ArrayList(100), "testSystemCrapStatsName", crapProject, 100.0F, 1000.0F, 0.0F);
        int result = ((Number) callPrivateMethod("org.crap4j.SystemCrapStats", "countCrapMethods", new Class[] {List.class}, systemCrapStats, new Object[] {new ArrayList(10000)})).intValue();
        assertEquals("result", 0, result);
    }
    
    public void testCrapBetween() throws Throwable {
        CrapProject crapProject = new CrapProject("testSystemCrapStatsProjectDir", new ArrayList(100), new ArrayList(1000), new ArrayList(0), new ArrayList(1), "/home/agitar/work/sexy-dolphin-05-agitar-0/tmp/agitar-agitar/Agitator48455.dir/Agitator71.tmp");
        MethodComplexity complexity2 = new MethodComplexity("testSystemCrapStatsMethodSignature", "testSystemCrapStatsPkgclassName", "testSystemCrapStatsMethodName", "testSystemCrapStatsMethodDescriptor", "testSystemCrapStatsJava5Signature", 100, "testSystemCrapStatsPrettyMethodSignature");
        List crapValues = new ArrayList(10);
        crapValues.add(new MethodCrap("testSystemCrapStatsMethodSignature", 0.0F, complexity2));
        SystemCrapStats systemCrapStats = new SystemCrapStats(crapValues, "testSystemCrapStatsName", crapProject, 100.0F, 1000.0F, 0.0F);
        int result = ((Number) callPrivateMethod("org.crap4j.SystemCrapStats", "crapBetween", new Class[] {float.class, float.class}, systemCrapStats, new Object[] {new Float(100.0F), new Float(1000.0F)})).intValue();
        assertEquals("result", 0, result);
        assertSame("systemCrapStats.getSubjects()", crapValues, systemCrapStats.getSubjects());
    }
    
    public void testCrapBetween1() throws Throwable {
        ArrayList crapValues = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, crapValues, "size", "()int", new Object[] {}, new Integer(5), 1);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.setReturnValue(false, crapValues, "iterator", "()java.util.Iterator", new Object[] {}, iterator, 1);
        Mockingbird.setReturnValue(false, iterator, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        MethodCrap methodCrap = (MethodCrap) Mockingbird.getProxyObject(MethodCrap.class);
        Mockingbird.setReturnValue(false, iterator, "next", "()java.lang.Object", new Object[] {}, methodCrap, 1);
        Mockingbird.setReturnValue(methodCrap.getCrap(), 0.0F);
        Mockingbird.setReturnValue(false, iterator, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        MethodCrap methodCrap2 = (MethodCrap) Mockingbird.getProxyObject(MethodCrap.class);
        Mockingbird.setReturnValue(false, iterator, "next", "()java.lang.Object", new Object[] {}, methodCrap2, 1);
        Mockingbird.setReturnValue(methodCrap2.getCrap(), 1.997003F);
        Mockingbird.setReturnValue(false, iterator, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        MethodCrap methodCrap3 = (MethodCrap) Mockingbird.getProxyObject(MethodCrap.class);
        Mockingbird.setReturnValue(false, iterator, "next", "()java.lang.Object", new Object[] {}, methodCrap3, 1);
        Mockingbird.setReturnValue(methodCrap3.getCrap(), 1.729F);
        Mockingbird.setReturnValue(false, iterator, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        MethodCrap methodCrap4 = (MethodCrap) Mockingbird.getProxyObject(MethodCrap.class);
        Mockingbird.setReturnValue(false, iterator, "next", "()java.lang.Object", new Object[] {}, methodCrap4, 1);
        Mockingbird.setReturnValue(methodCrap4.getCrap(), 2100.761F);
        Mockingbird.setReturnValue(false, iterator, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator, "next", "()java.lang.Object", new Object[] {}, methodCrap, 1);
        Mockingbird.setReturnValue(methodCrap.getCrap(), 0.0F);
        Mockingbird.setReturnValue(false, iterator, "hasNext", "()boolean", new Object[] {}, Boolean.FALSE, 1);
        Mockingbird.setReturnValue(false, crapValues, "size", "()int", new Object[] {}, new Integer(5), 1);
        Mockingbird.setReturnValue(false, crapValues, "size", "()int", new Object[] {}, new Integer(5), 1);
        Mockingbird.setReturnValue(false, crapValues, "get", "(int)java.lang.Object", new Object[] {new Integer(0)}, methodCrap, 1);
        Mockingbird.setReturnValue(methodCrap.getCrap(), 0.0F);
        Mockingbird.setReturnValue(false, crapValues, "size", "()int", new Object[] {}, new Integer(5), 1);
        Mockingbird.setReturnValue(false, crapValues, "get", "(int)java.lang.Object", new Object[] {new Integer(1)}, methodCrap2, 1);
        Mockingbird.setReturnValue(methodCrap2.getCrap(), 1.997003F);
        Mockingbird.setReturnValue(false, crapValues, "size", "()int", new Object[] {}, new Integer(5), 1);
        Mockingbird.setReturnValue(false, crapValues, "get", "(int)java.lang.Object", new Object[] {new Integer(2)}, methodCrap3, 1);
        Mockingbird.setReturnValue(methodCrap3.getCrap(), 1.729F);
        Mockingbird.setReturnValue(false, crapValues, "size", "()int", new Object[] {}, new Integer(5), 1);
        Mockingbird.setReturnValue(false, crapValues, "get", "(int)java.lang.Object", new Object[] {new Integer(3)}, methodCrap4, 1);
        Mockingbird.setReturnValue(methodCrap4.getCrap(), 2100.761F);
        Mockingbird.setReturnValue(false, crapValues, "size", "()int", new Object[] {}, new Integer(5), 1);
        Mockingbird.setReturnValue(false, crapValues, "get", "(int)java.lang.Object", new Object[] {new Integer(4)}, methodCrap, 1);
        Mockingbird.setReturnValue(methodCrap.getCrap(), 0.0F);
        Mockingbird.setReturnValue(false, crapValues, "size", "()int", new Object[] {}, new Integer(5), 1);
        Mockingbird.setReturnValue(false, crapValues, "size", "()int", new Object[] {}, new Integer(5), 1);
        Mockingbird.setReturnValue(false, crapValues, "size", "()int", new Object[] {}, new Integer(5), 1);
        Mockingbird.setReturnValue(false, crapValues, "get", "(int)java.lang.Object", new Object[] {new Integer(0)}, methodCrap, 1);
        Mockingbird.setReturnValue(methodCrap.getCrap(), 0.0F);
        Mockingbird.setReturnValue(false, crapValues, "size", "()int", new Object[] {}, new Integer(5), 1);
        Mockingbird.setReturnValue(false, crapValues, "get", "(int)java.lang.Object", new Object[] {new Integer(1)}, methodCrap2, 1);
        Mockingbird.setReturnValue(methodCrap2.getCrap(), 1.997003F);
        Mockingbird.setReturnValue(false, crapValues, "size", "()int", new Object[] {}, new Integer(5), 1);
        Mockingbird.setReturnValue(false, crapValues, "get", "(int)java.lang.Object", new Object[] {new Integer(2)}, methodCrap3, 1);
        Mockingbird.setReturnValue(methodCrap3.getCrap(), 1.729F);
        Mockingbird.setReturnValue(false, crapValues, "size", "()int", new Object[] {}, new Integer(5), 1);
        Mockingbird.setReturnValue(false, crapValues, "get", "(int)java.lang.Object", new Object[] {new Integer(3)}, methodCrap4, 1);
        Mockingbird.setReturnValue(methodCrap4.getCrap(), 2100.761F);
        Mockingbird.setReturnValue(false, crapValues, "size", "()int", new Object[] {}, new Integer(5), 1);
        Mockingbird.setReturnValue(false, crapValues, "get", "(int)java.lang.Object", new Object[] {new Integer(4)}, methodCrap, 1);
        Mockingbird.setReturnValue(methodCrap.getCrap(), 0.0F);
        Mockingbird.setReturnValue(false, crapValues, "size", "()int", new Object[] {}, new Integer(5), 1);
        Iterator iterator2 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.setReturnValue(false, crapValues, "iterator", "()java.util.Iterator", new Object[] {}, iterator2, 1);
        Mockingbird.setReturnValue(false, iterator2, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator2, "next", "()java.lang.Object", new Object[] {}, methodCrap, 1);
        Mockingbird.setReturnValue(methodCrap.getCrap(), 0.0F);
        Mockingbird.setReturnValue(false, iterator2, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator2, "next", "()java.lang.Object", new Object[] {}, methodCrap2, 1);
        Mockingbird.setReturnValue(methodCrap2.getCrap(), 1.997003F);
        Mockingbird.setReturnValue(false, iterator2, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator2, "next", "()java.lang.Object", new Object[] {}, methodCrap3, 1);
        Mockingbird.setReturnValue(methodCrap3.getCrap(), 1.729F);
        Mockingbird.setReturnValue(false, iterator2, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator2, "next", "()java.lang.Object", new Object[] {}, methodCrap4, 1);
        Mockingbird.setReturnValue(methodCrap4.getCrap(), 2100.761F);
        Mockingbird.setReturnValue(false, iterator2, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator2, "next", "()java.lang.Object", new Object[] {}, methodCrap, 1);
        Mockingbird.setReturnValue(methodCrap.getCrap(), 0.0F);
        Mockingbird.setReturnValue(false, iterator2, "hasNext", "()boolean", new Object[] {}, Boolean.FALSE, 1);
        Iterator iterator3 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.setReturnValue(false, crapValues, "iterator", "()java.util.Iterator", new Object[] {}, iterator3, 1);
        Mockingbird.setReturnValue(false, iterator3, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator3, "next", "()java.lang.Object", new Object[] {}, methodCrap, 1);
        Mockingbird.setReturnValue(methodCrap.getCrapLoad(100.0F), 0);
        Mockingbird.setReturnValue(false, iterator3, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator3, "next", "()java.lang.Object", new Object[] {}, methodCrap2, 1);
        Mockingbird.setReturnValue(methodCrap2.getCrapLoad(1000.0F), 999);
        Mockingbird.setReturnValue(false, iterator3, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator3, "next", "()java.lang.Object", new Object[] {}, methodCrap3, 1);
        Mockingbird.setReturnValue(methodCrap3.getCrapLoad(0.0F), 999);
        Mockingbird.setReturnValue(false, iterator3, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator3, "next", "()java.lang.Object", new Object[] {}, methodCrap4, 1);
        Mockingbird.setReturnValue(methodCrap4.getCrapLoad(-1.0F), 53046);
        Mockingbird.setReturnValue(false, iterator3, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator3, "next", "()java.lang.Object", new Object[] {}, methodCrap, 1);
        Mockingbird.setReturnValue(methodCrap.getCrapLoad(1.0F), 0);
        Mockingbird.setReturnValue(false, iterator3, "hasNext", "()boolean", new Object[] {}, Boolean.FALSE, 1);
        Mockingbird.enterTestMode(SystemCrapStats.class);
        SystemCrapStats systemCrapStats = new SystemCrapStats(crapValues, "testSystemCrapStatsName", null, 100.0F, 1000.0F, 0.0F);
        Mockingbird.enterRecordingMode();
        Iterator iterator4 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.setReturnValue(false, crapValues, "iterator", "()java.util.Iterator", new Object[] {}, iterator4, 1);
        Mockingbird.setReturnValue(false, iterator4, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator4, "next", "()java.lang.Object", new Object[] {}, methodCrap, 1);
        Mockingbird.setReturnValue(methodCrap.getCrap(), 0.0F);
        Mockingbird.setReturnValue(false, iterator4, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator4, "next", "()java.lang.Object", new Object[] {}, methodCrap2, 1);
        Mockingbird.setReturnValue(methodCrap2.getCrap(), 1.997003F);
        Mockingbird.setReturnValue(false, iterator4, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator4, "next", "()java.lang.Object", new Object[] {}, methodCrap3, 1);
        Mockingbird.setReturnValue(methodCrap3.getCrap(), 1.729F);
        Mockingbird.setReturnValue(false, iterator4, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator4, "next", "()java.lang.Object", new Object[] {}, methodCrap4, 1);
        Mockingbird.setReturnValue(methodCrap4.getCrap(), 2100.761F);
        Mockingbird.setReturnValue(methodCrap4.getCrap(), 2100.761F);
        Mockingbird.setReturnValue(false, iterator4, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator4, "next", "()java.lang.Object", new Object[] {}, methodCrap, 1);
        Mockingbird.setReturnValue(methodCrap.getCrap(), 0.0F);
        Mockingbird.setReturnValue(false, iterator4, "hasNext", "()boolean", new Object[] {}, Boolean.FALSE, 1);
        Mockingbird.enterTestMode(SystemCrapStats.class);
        int result = ((Number) callPrivateMethod("org.crap4j.SystemCrapStats", "crapBetween", new Class[] {float.class, float.class}, systemCrapStats, new Object[] {new Float(100.0F), new Float(1000.0F)})).intValue();
        assertEquals("result", 0, result);
        assertSame("systemCrapStats.getSubjects()", crapValues, systemCrapStats.getSubjects());
    }
    
    public void testCrapBetween2() throws Throwable {
        MethodComplexity complexity2 = new MethodComplexity("testSystemCrapStatsMethodSignature", "testSystemCrapStatsPkgclassName", "testSystemCrapStatsMethodName", "testSystemCrapStatsMethodDescriptor", "testSystemCrapStatsJava5Signature", 0, "testSystemCrapStatsPrettyMethodSignature");
        List crapValues = new ArrayList(100);
        crapValues.add(new MethodCrap("testSystemCrapStatsMethodSignature", 0.0F, complexity2));
        SystemCrapStats systemCrapStats = new SystemCrapStats(crapValues, "testSystemCrapStatsName", null, 100.0F, 1000.0F, 0.0F);
        int result = ((Number) callPrivateMethod("org.crap4j.SystemCrapStats", "crapBetween", new Class[] {float.class, float.class}, systemCrapStats, new Object[] {new Float(0.0F), new Float(100.0F)})).intValue();
        assertEquals("result", 1, result);
        assertSame("systemCrapStats.getSubjects()", crapValues, systemCrapStats.getSubjects());
    }
    
    public void testCrapBetween3() throws Throwable {
        CrapProject crapProject = new CrapProject("testSystemCrapStatsProjectDir", new ArrayList(100), new ArrayList(1000), new ArrayList(0), new ArrayList(1), "/home/agitar/work/sexy-dolphin-05-agitar-0/tmp/agitar-agitar/Agitator48455.dir/Agitator71.tmp");
        MethodComplexity complexity2 = new MethodComplexity("testSystemCrapStatsMethodSignature", "testSystemCrapStatsPkgclassName", "testSystemCrapStatsMethodName", "testSystemCrapStatsMethodDescriptor", "testSystemCrapStatsJava5Signature", 0, "testSystemCrapStatsPrettyMethodSignature");
        List crapValues = new ArrayList(10);
        crapValues.add(new MethodCrap("testSystemCrapStatsMethodSignature", 0.0F, complexity2));
        SystemCrapStats systemCrapStats = new SystemCrapStats(crapValues, "testSystemCrapStatsName", crapProject, 100.0F, 1000.0F, 0.0F);
        int result = ((Number) callPrivateMethod("org.crap4j.SystemCrapStats", "crapBetween", new Class[] {float.class, float.class}, systemCrapStats, new Object[] {new Float(100.0F), new Float(1000.0F)})).intValue();
        assertEquals("result", 0, result);
        assertSame("systemCrapStats.getSubjects()", crapValues, systemCrapStats.getSubjects());
    }
    
    public void testCrapBetween4() throws Throwable {
        CrapProject crapProject = new CrapProject("testSystemCrapStatsProjectDir", new ArrayList(100), new ArrayList(1000), new ArrayList(0), new ArrayList(1), "/home/agitar/work/sexy-dolphin-05-agitar-0/tmp/agitar-agitar/Agitator48455.dir/Agitator71.tmp");
        List crapValues = new ArrayList(10);
        SystemCrapStats systemCrapStats = new SystemCrapStats(crapValues, "testSystemCrapStatsName", crapProject, 100.0F, 1000.0F, 0.0F);
        int result = ((Number) callPrivateMethod("org.crap4j.SystemCrapStats", "crapBetween", new Class[] {float.class, float.class}, systemCrapStats, new Object[] {new Float(100.0F), new Float(1000.0F)})).intValue();
        assertEquals("result", 0, result);
        assertSame("systemCrapStats.getSubjects()", crapValues, systemCrapStats.getSubjects());
    }
    
    public void testCrapGE() throws Throwable {
        MethodComplexity complexity2 = new MethodComplexity("testSystemCrapStatsMethodSignature", "testSystemCrapStatsPkgclassName", "testSystemCrapStatsMethodName", "testSystemCrapStatsMethodDescriptor", "testSystemCrapStatsJava5Signature", 10, "testSystemCrapStatsPrettyMethodSignature");
        MethodCrap methodCrap = new MethodCrap("testSystemCrapStatsMethodSignature", 1.0F, complexity2);
        List crapValues = new ArrayList(100);
        crapValues.add(methodCrap);
        crapValues.add(new MethodCrap("testSystemCrapStatsMethodSignature1", 0.0F, complexity2));
        CrapProject crapProject = new CrapProject("testSystemCrapStatsProjectDir", new ArrayList(1000), new ArrayList(0), new ArrayList(1), new ArrayList(10), "/home/agitar/work/sexy-dolphin-05-agitar-0/tmp/agitar-agitar/Agitator48455.dir/Agitator71.tmp");
        SystemCrapStats systemCrapStats = new SystemCrapStats(crapValues, "testSystemCrapStatsName", crapProject, 100.0F, 1000.0F, 0.0F);
        int result = ((Number) callPrivateMethod("org.crap4j.SystemCrapStats", "crapGE", new Class[] {float.class}, systemCrapStats, new Object[] {new Float(100.0F)})).intValue();
        assertEquals("result", 1, result);
        assertSame("systemCrapStats.getSubjects()", crapValues, systemCrapStats.getSubjects());
    }
    
    public void testCrapGE1() throws Throwable {
        CrapProject crapProject = new CrapProject("testSystemCrapStatsProjectDir", new ArrayList(100), new ArrayList(1000), new ArrayList(0), new ArrayList(1), "/home/agitar/work/sexy-dolphin-05-agitar-0/tmp/agitar-agitar/Agitator48455.dir/Agitator71.tmp");
        MethodComplexity complexity2 = new MethodComplexity("testSystemCrapStatsMethodSignature", "testSystemCrapStatsPkgclassName", "testSystemCrapStatsMethodName", "testSystemCrapStatsMethodDescriptor", "testSystemCrapStatsJava5Signature", 100, "testSystemCrapStatsPrettyMethodSignature");
        List crapValues = new ArrayList(10);
        crapValues.add(new MethodCrap("testSystemCrapStatsMethodSignature", 0.0F, complexity2));
        SystemCrapStats systemCrapStats = new SystemCrapStats(crapValues, "testSystemCrapStatsName", crapProject, 100.0F, 1000.0F, 0.0F);
        int result = ((Number) callPrivateMethod("org.crap4j.SystemCrapStats", "crapGE", new Class[] {float.class}, systemCrapStats, new Object[] {new Float(100.0F)})).intValue();
        assertEquals("result", 1, result);
        assertSame("systemCrapStats.getSubjects()", crapValues, systemCrapStats.getSubjects());
    }
    
    public void testCrapGE2() throws Throwable {
        CrapProject crapProject = new CrapProject("testSystemCrapStatsProjectDir", new ArrayList(100), new ArrayList(1000), new ArrayList(0), new ArrayList(1), "/home/agitar/work/sexy-dolphin-05-agitar-0/tmp/agitar-agitar/Agitator48455.dir/Agitator71.tmp");
        List crapValues = new ArrayList(10);
        SystemCrapStats systemCrapStats = new SystemCrapStats(crapValues, "testSystemCrapStatsName", crapProject, 100.0F, 1000.0F, 0.0F);
        int result = ((Number) callPrivateMethod("org.crap4j.SystemCrapStats", "crapGE", new Class[] {float.class}, systemCrapStats, new Object[] {new Float(100.0F)})).intValue();
        assertEquals("result", 0, result);
        assertSame("systemCrapStats.getSubjects()", crapValues, systemCrapStats.getSubjects());
    }
    
    public void testCrapGE3() throws Throwable {
        CrapProject crapProject = new CrapProject("testSystemCrapStatsProjectDir", new ArrayList(100), new ArrayList(1000), new ArrayList(0), new ArrayList(1), "/home/agitar/work/sexy-dolphin-05-agitar-0/tmp/agitar-agitar/Agitator48455.dir/Agitator71.tmp");
        MethodComplexity complexity2 = new MethodComplexity("testSystemCrapStatsMethodSignature", "testSystemCrapStatsPkgclassName", "testSystemCrapStatsMethodName", "testSystemCrapStatsMethodDescriptor", "testSystemCrapStatsJava5Signature", 0, "testSystemCrapStatsPrettyMethodSignature");
        List crapValues = new ArrayList(10);
        crapValues.add(new MethodCrap("testSystemCrapStatsMethodSignature", 0.0F, complexity2));
        SystemCrapStats systemCrapStats = new SystemCrapStats(crapValues, "testSystemCrapStatsName", crapProject, 100.0F, 1000.0F, 0.0F);
        int result = ((Number) callPrivateMethod("org.crap4j.SystemCrapStats", "crapGE", new Class[] {float.class}, systemCrapStats, new Object[] {new Float(100.0F)})).intValue();
        assertEquals("result", 0, result);
        assertSame("systemCrapStats.getSubjects()", crapValues, systemCrapStats.getSubjects());
    }
    
    public void testCrapLessThan() throws Throwable {
        CrapProject crapProject = new CrapProject("testSystemCrapStatsProjectDir", new ArrayList(100), new ArrayList(1000), new ArrayList(0), new ArrayList(1), "/home/agitar/work/sexy-dolphin-05-agitar-0/tmp/agitar-agitar/Agitator48455.dir/Agitator71.tmp");
        List crapValues = new ArrayList(10);
        SystemCrapStats systemCrapStats = new SystemCrapStats(crapValues, "testSystemCrapStatsName", crapProject, 100.0F, 1000.0F, 0.0F);
        int result = ((Number) callPrivateMethod("org.crap4j.SystemCrapStats", "crapLessThan", new Class[] {float.class}, systemCrapStats, new Object[] {new Float(100.0F)})).intValue();
        assertEquals("result", 0, result);
        assertSame("systemCrapStats.getSubjects()", crapValues, systemCrapStats.getSubjects());
    }
    
    public void testCrapLessThan1() throws Throwable {
        CrapProject crapProject = new CrapProject("testSystemCrapStatsProjectDir", new ArrayList(100), new ArrayList(1000), new ArrayList(0), new ArrayList(1), "/home/agitar/work/sexy-dolphin-05-agitar-0/tmp/agitar-agitar/Agitator48455.dir/Agitator71.tmp");
        MethodComplexity complexity2 = new MethodComplexity("testSystemCrapStatsMethodSignature", "testSystemCrapStatsPkgclassName", "testSystemCrapStatsMethodName", "testSystemCrapStatsMethodDescriptor", "testSystemCrapStatsJava5Signature", 100, "testSystemCrapStatsPrettyMethodSignature");
        List crapValues = new ArrayList(10);
        crapValues.add(new MethodCrap("testSystemCrapStatsMethodSignature", 0.0F, complexity2));
        SystemCrapStats systemCrapStats = new SystemCrapStats(crapValues, "testSystemCrapStatsName", crapProject, 100.0F, 1000.0F, 0.0F);
        int result = ((Number) callPrivateMethod("org.crap4j.SystemCrapStats", "crapLessThan", new Class[] {float.class}, systemCrapStats, new Object[] {new Float(100.0F)})).intValue();
        assertEquals("result", 0, result);
        assertSame("systemCrapStats.getSubjects()", crapValues, systemCrapStats.getSubjects());
    }
    
    public void testCrapLessThan2() throws Throwable {
        MethodComplexity complexity2 = new MethodComplexity("testSystemCrapStatsMethodSignature", "testSystemCrapStatsPkgclassName", "testSystemCrapStatsMethodName", "testSystemCrapStatsMethodDescriptor", "testSystemCrapStatsJava5Signature", 0, "testSystemCrapStatsPrettyMethodSignature");
        CrapProject crapProject = new CrapProject("testSystemCrapStatsProjectDir", new ArrayList(100), new ArrayList(1000), new ArrayList(0), new ArrayList(1), "/home/agitar/work/sexy-dolphin-05-agitar-0/tmp/agitar-agitar/Agitator48455.dir/Agitator71.tmp");
        List crapValues = new ArrayList(10);
        crapValues.add(new MethodCrap("testSystemCrapStatsMethodSignature", 0.0F, complexity2));
        SystemCrapStats systemCrapStats = new SystemCrapStats(crapValues, "testSystemCrapStatsName", crapProject, 100.0F, 1000.0F, 0.0F);
        int result = ((Number) callPrivateMethod("org.crap4j.SystemCrapStats", "crapLessThan", new Class[] {float.class}, systemCrapStats, new Object[] {new Float(100.0F)})).intValue();
        assertEquals("result", 1, result);
        assertSame("systemCrapStats.getSubjects()", crapValues, systemCrapStats.getSubjects());
    }
    
    public void testCrapMethodPercent() throws Throwable {
        CrapProject crapProject = new CrapProject("testSystemCrapStatsProjectDir", new ArrayList(100), new ArrayList(1000), new ArrayList(0), new ArrayList(1), "/home/agitar/work/sexy-dolphin-05-agitar-0/tmp/agitar-agitar/Agitator48455.dir/Agitator71.tmp");
        SystemCrapStats systemCrapStats = new SystemCrapStats(new ArrayList(10), "testSystemCrapStatsName", crapProject, 100.0F, 1000.0F, 0.0F);
        callPrivateMethod("org.crap4j.SystemCrapStats", "crapMethodPercent", new Class[] {}, systemCrapStats, new Object[] {});
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testCrapScores() throws Throwable {
        MethodComplexity complexity2 = new MethodComplexity("testSystemCrapStatsMethodSignature", "testSystemCrapStatsPkgclassName", "testSystemCrapStatsMethodName", "testSystemCrapStatsMethodDescriptor", "testSystemCrapStatsJava5Signature", 100, "testSystemCrapStatsPrettyMethodSignature");
        List crapValues = new ArrayList(100);
        crapValues.add(new MethodCrap("testSystemCrapStatsMethodSignature", 0.0F, complexity2));
        CrapProject crapProject = new CrapProject("testSystemCrapStatsProjectDir", new ArrayList(1000), new ArrayList(0), new ArrayList(1), new ArrayList(10), "/home/agitar/work/sexy-dolphin-05-agitar-0/tmp/agitar-agitar/Agitator48455.dir/Agitator71.tmp");
        SystemCrapStats systemCrapStats = new SystemCrapStats(crapValues, "testSystemCrapStatsName", crapProject, 100.0F, 1000.0F, 0.0F);
        float[] result = (float[]) callPrivateMethod("org.crap4j.SystemCrapStats", "crapScores", new Class[] {List.class}, systemCrapStats, new Object[] {new ArrayList(10000)});
        assertEquals("result.length", 1, result.length);
        assertEquals("(float[]) result[0]", 0.0F, ((float[]) result)[0], 1.0E-6F);
    }
    
    public void testCrapScores1() throws Throwable {
        CrapProject crapProject = new CrapProject("testSystemCrapStatsProjectDir", new ArrayList(100), new ArrayList(1000), new ArrayList(0), new ArrayList(1), "/home/agitar/work/sexy-dolphin-05-agitar-0/tmp/agitar-agitar/Agitator48455.dir/Agitator71.tmp");
        MethodComplexity complexity2 = new MethodComplexity("testSystemCrapStatsMethodSignature", "testSystemCrapStatsPkgclassName", "testSystemCrapStatsMethodName", "testSystemCrapStatsMethodDescriptor", "testSystemCrapStatsJava5Signature", 100, "testSystemCrapStatsPrettyMethodSignature");
        List crapValues = new ArrayList(10);
        crapValues.add(new MethodCrap("testSystemCrapStatsMethodSignature", 0.0F, complexity2));
        SystemCrapStats systemCrapStats = new SystemCrapStats(crapValues, "testSystemCrapStatsName", crapProject, 100.0F, 1000.0F, 0.0F);
        List arrayList = new ArrayList(10000);
        MethodComplexity complexity2_2 = new MethodComplexity("testSystemCrapStatsMethodSignature1", "testSystemCrapStatsPkgclassName1", "testSystemCrapStatsMethodName1", "testSystemCrapStatsMethodDescriptor1", "testSystemCrapStatsJava5Signature1", 1000, "testSystemCrapStatsPrettyMethodSignature1");
        arrayList.add(new MethodCrap("testSystemCrapStatsMethodSignature1", 1.0F, complexity2_2));
        float[] result = (float[]) callPrivateMethod("org.crap4j.SystemCrapStats", "crapScores", new Class[] {List.class}, systemCrapStats, new Object[] {arrayList});
        assertEquals("result.length", 1, result.length);
        assertEquals("(float[]) result[0]", 1000.0F, ((float[]) result)[0], 1.0E-6F);
    }
    
    public void testCrapScores2() throws Throwable {
        CrapProject crapProject = new CrapProject("testSystemCrapStatsProjectDir", new ArrayList(100), new ArrayList(1000), new ArrayList(0), new ArrayList(1), "/home/agitar/work/sexy-dolphin-05-agitar-0/tmp/agitar-agitar/Agitator48455.dir/Agitator71.tmp");
        SystemCrapStats systemCrapStats = new SystemCrapStats(new ArrayList(10), "testSystemCrapStatsName", crapProject, 100.0F, 1000.0F, 0.0F);
        float[] result = (float[]) callPrivateMethod("org.crap4j.SystemCrapStats", "crapScores", new Class[] {List.class}, systemCrapStats, new Object[] {new ArrayList(10000)});
        assertEquals("result.length", 0, result.length);
    }
    
    public void testGenerateDetailComplexityPage() throws Throwable {
        CrapProject crapProject = new CrapProject("testSystemCrapStatsProjectDir", new ArrayList(100), new ArrayList(1000), new ArrayList(0), new ArrayList(1), "/home/agitar/work/sexy-dolphin-05-agitar-0/tmp/agitar-agitar/Agitator48455.dir/Agitator71.tmp");
        SystemCrapStats systemCrapStats = new SystemCrapStats(new ArrayList(10), "testSystemCrapStatsName", crapProject, 100.0F, 1000.0F, 0.0F);
        callPrivateMethod("org.crap4j.SystemCrapStats", "generateDetailComplexityPage", new Class[] {StreamSource.class}, systemCrapStats, new Object[] {new StreamSource((InputStream) null)});
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testGenerateDetailCoveragePage() throws Throwable {
        CrapProject crapProject = new CrapProject("testSystemCrapStatsProjectDir", new ArrayList(100), new ArrayList(1000), new ArrayList(0), new ArrayList(1), "/home/agitar/work/sexy-dolphin-05-agitar-0/tmp/agitar-agitar/Agitator48455.dir/Agitator71.tmp");
        SystemCrapStats systemCrapStats = new SystemCrapStats(new ArrayList(10), "testSystemCrapStatsName", crapProject, 100.0F, 1000.0F, 0.0F);
        callPrivateMethod("org.crap4j.SystemCrapStats", "generateDetailCoveragePage", new Class[] {StreamSource.class}, systemCrapStats, new Object[] {new StreamSource()});
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testGenerateDetailCrapLoadPage() throws Throwable {
        ArrayList crapValues = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        CrapProject crapProject = (CrapProject) Mockingbird.getProxyObject(CrapProject.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, crapValues, "size", "()int", new Object[] {}, new Integer(2), 1);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.setReturnValue(false, crapValues, "iterator", "()java.util.Iterator", new Object[] {}, iterator, 1);
        Mockingbird.setReturnValue(false, iterator, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        MethodCrap methodCrap = (MethodCrap) Mockingbird.getProxyObject(MethodCrap.class);
        Mockingbird.setReturnValue(false, iterator, "next", "()java.lang.Object", new Object[] {}, methodCrap, 1);
        Mockingbird.setReturnValue(methodCrap.getCrap(), 2.0F);
        Mockingbird.setReturnValue(false, iterator, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        MethodCrap methodCrap2 = (MethodCrap) Mockingbird.getProxyObject(MethodCrap.class);
        Mockingbird.setReturnValue(false, iterator, "next", "()java.lang.Object", new Object[] {}, methodCrap2, 1);
        Mockingbird.setReturnValue(methodCrap2.getCrap(), 1.0F);
        Mockingbird.setReturnValue(false, iterator, "hasNext", "()boolean", new Object[] {}, Boolean.FALSE, 1);
        Mockingbird.setReturnValue(false, crapValues, "size", "()int", new Object[] {}, new Integer(2), 1);
        Mockingbird.setReturnValue(false, crapValues, "size", "()int", new Object[] {}, new Integer(2), 1);
        Mockingbird.setReturnValue(false, crapValues, "get", "(int)java.lang.Object", new Object[] {new Integer(0)}, methodCrap, 1);
        Mockingbird.setReturnValue(methodCrap.getCrap(), 2.0F);
        Mockingbird.setReturnValue(false, crapValues, "size", "()int", new Object[] {}, new Integer(2), 1);
        Mockingbird.setReturnValue(false, crapValues, "get", "(int)java.lang.Object", new Object[] {new Integer(1)}, methodCrap2, 1);
        Mockingbird.setReturnValue(methodCrap2.getCrap(), 1.0F);
        Mockingbird.setReturnValue(false, crapValues, "size", "()int", new Object[] {}, new Integer(2), 1);
        Mockingbird.setReturnValue(false, crapValues, "size", "()int", new Object[] {}, new Integer(2), 1);
        Mockingbird.setReturnValue(false, crapValues, "size", "()int", new Object[] {}, new Integer(2), 1);
        Mockingbird.setReturnValue(false, crapValues, "get", "(int)java.lang.Object", new Object[] {new Integer(0)}, methodCrap, 1);
        Mockingbird.setReturnValue(methodCrap.getCrap(), 2.0F);
        Mockingbird.setReturnValue(false, crapValues, "size", "()int", new Object[] {}, new Integer(2), 1);
        Mockingbird.setReturnValue(false, crapValues, "get", "(int)java.lang.Object", new Object[] {new Integer(1)}, methodCrap2, 1);
        Mockingbird.setReturnValue(methodCrap2.getCrap(), 1.0F);
        Mockingbird.setReturnValue(false, crapValues, "size", "()int", new Object[] {}, new Integer(2), 1);
        Iterator iterator2 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.setReturnValue(false, crapValues, "iterator", "()java.util.Iterator", new Object[] {}, iterator2, 1);
        Mockingbird.setReturnValue(false, iterator2, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator2, "next", "()java.lang.Object", new Object[] {}, methodCrap, 1);
        Mockingbird.setReturnValue(methodCrap.getCrap(), 2.0F);
        Mockingbird.setReturnValue(false, iterator2, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator2, "next", "()java.lang.Object", new Object[] {}, methodCrap2, 1);
        Mockingbird.setReturnValue(methodCrap2.getCrap(), 1.0F);
        Mockingbird.setReturnValue(false, iterator2, "hasNext", "()boolean", new Object[] {}, Boolean.FALSE, 1);
        Iterator iterator3 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.setReturnValue(false, crapValues, "iterator", "()java.util.Iterator", new Object[] {}, iterator3, 1);
        Mockingbird.setReturnValue(false, iterator3, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator3, "next", "()java.lang.Object", new Object[] {}, methodCrap, 1);
        Mockingbird.setReturnValue(methodCrap.getCrapLoad(-64.0F), 0);
        Mockingbird.setReturnValue(false, iterator3, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator3, "next", "()java.lang.Object", new Object[] {}, methodCrap2, 1);
        Mockingbird.setReturnValue(methodCrap2.getCrapLoad(-64.0F), 0);
        Mockingbird.setReturnValue(false, iterator3, "hasNext", "()boolean", new Object[] {}, Boolean.FALSE, 1);
        Mockingbird.enterTestMode(SystemCrapStats.class);
        SystemCrapStats systemCrapStats = new SystemCrapStats(crapValues, "testSystemCrapStatsName", crapProject, 100.0F, 1000.0F, 0.0F);
        StreamSource streamSource = (StreamSource) Mockingbird.getProxyObject(StreamSource.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(crapProject.outputDir(), "/home/agitar/work/sexy-dolphin-05-agitar-0/tmp/agitar-agitar/Agitator48455.dir/Agitator71.tmp");
        Mockingbird.replaceObjectForRecording(File.class, "<init>(java.lang.String,java.lang.String)", Mockingbird.getProxyObject(File.class));
        StreamSource streamSource2 = (StreamSource) Mockingbird.getProxyObject(StreamSource.class);
        Mockingbird.replaceObjectForRecording(StreamSource.class, "<init>(java.io.InputStream)", streamSource2);
        TransformerFactory errorListener = (TransformerFactory) Mockingbird.getProxyObject(TransformerFactory.class);
        Mockingbird.setReturnValue(true, TransformerFactory.class, "newInstance", "()javax.xml.transform.TransformerFactory", new Object[] {}, errorListener, 1);
        Transformer errorListener2 = (Transformer) Mockingbird.getProxyObject(Transformer.class);
        Mockingbird.setReturnValue(false, errorListener, "newTransformer", "(javax.xml.transform.Source)javax.xml.transform.Transformer", new Object[] {streamSource2}, errorListener2, 1);
        StreamResult streamResult = (StreamResult) Mockingbird.getProxyObject(StreamResult.class);
        Mockingbird.replaceObjectForRecording(StreamResult.class, "<init>(java.io.File)", streamResult);
        Mockingbird.setReturnValue(false, errorListener2, "transform", "(javax.xml.transform.Source,javax.xml.transform.Result)void", new Object[] {streamSource, streamResult}, null, 1);
        Mockingbird.enterTestMode(SystemCrapStats.class);
        callPrivateMethod("org.crap4j.SystemCrapStats", "generateDetailCrapLoadPage", new Class[] {StreamSource.class}, systemCrapStats, new Object[] {streamSource});
        float actual = ((Number) callPrivateMethod("org.crap4j.SystemCrapStats", "crapMethodPercent", new Class[] {}, systemCrapStats, new Object[] {})).floatValue();
        assertEquals("systemCrapStats.crapMethodPercent()", 0.0F, actual, 1.0E-6F);
    }
    
    public void testGenerateDetailCrapPage() throws Throwable {
        CrapProject crapProject = new CrapProject("testSystemCrapStatsProjectDir", new ArrayList(100), new ArrayList(1000), new ArrayList(0), new ArrayList(1), "/home/agitar/work/sexy-dolphin-05-agitar-0/tmp/agitar-agitar/Agitator48455.dir/Agitator71.tmp");
        SystemCrapStats systemCrapStats = new SystemCrapStats(new ArrayList(10), "testSystemCrapStatsName", crapProject, 100.0F, 1000.0F, 0.0F);
        callPrivateMethod("org.crap4j.SystemCrapStats", "generateDetailCrapPage", new Class[] {StreamSource.class}, systemCrapStats, new Object[] {new StreamSource()});
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testGenerateHtml() throws Throwable {
        CrapProject crapProject = new CrapProject("testSystemCrapStatsProjectDir", new ArrayList(100), new ArrayList(1000), new ArrayList(0), new ArrayList(1), "/home/agitar/work/sexy-dolphin-05-agitar-0/tmp/agitar-agitar/Agitator48455.dir/Agitator71.tmp");
        SystemCrapStats systemCrapStats = new SystemCrapStats(new ArrayList(10), "testSystemCrapStatsName", crapProject, 100.0F, 1000.0F, 0.0F);
        systemCrapStats.generateHtml();
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testGenerateHtml1() throws Throwable {
        ArrayList crapValues = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        CrapProject crapProject = (CrapProject) Mockingbird.getProxyObject(CrapProject.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, crapValues, "size", "()int", new Object[] {}, new Integer(0), 1);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.setReturnValue(false, crapValues, "iterator", "()java.util.Iterator", new Object[] {}, iterator, 1);
        Mockingbird.setReturnValue(false, iterator, "hasNext", "()boolean", new Object[] {}, Boolean.FALSE, 1);
        Mockingbird.setReturnValue(false, crapValues, "size", "()int", new Object[] {}, new Integer(0), 1);
        Mockingbird.setReturnValue(false, crapValues, "size", "()int", new Object[] {}, new Integer(0), 1);
        Mockingbird.setReturnValue(false, crapValues, "size", "()int", new Object[] {}, new Integer(0), 1);
        Mockingbird.setReturnValue(false, crapValues, "size", "()int", new Object[] {}, new Integer(0), 1);
        Iterator iterator2 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.setReturnValue(false, crapValues, "iterator", "()java.util.Iterator", new Object[] {}, iterator2, 1);
        Mockingbird.setReturnValue(false, iterator2, "hasNext", "()boolean", new Object[] {}, Boolean.FALSE, 1);
        Iterator iterator3 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.setReturnValue(false, crapValues, "iterator", "()java.util.Iterator", new Object[] {}, iterator3, 1);
        Mockingbird.setReturnValue(false, iterator3, "hasNext", "()boolean", new Object[] {}, Boolean.FALSE, 1);
        Mockingbird.enterTestMode(SystemCrapStats.class);
        SystemCrapStats systemCrapStats = new SystemCrapStats(crapValues, "testSystemCrapStatsName", crapProject, 100.0F, 1000.0F, 0.0F);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(crapProject.outputDir(), "/home/agitar/work/sexy-dolphin-05-agitar-0/tmp/agitar-agitar/Agitator48455.dir/Agitator71.tmp");
        Mockingbird.replaceObjectForRecording(File.class, "<init>(java.lang.String,java.lang.String)", Mockingbird.getProxyObject(File.class));
        Mockingbird.replaceObjectForRecording(DataInputStream.class, "<init>(java.io.InputStream)", Mockingbird.getProxyObject(DataInputStream.class));
        Mockingbird.replaceObjectForRecording(BufferedInputStream.class, "<init>(java.io.InputStream)", Mockingbird.getProxyObject(BufferedInputStream.class));
        Mockingbird.replaceObjectForRecording(FileOutputStream.class, "<init>(java.io.File)", Mockingbird.getProxyObject(FileOutputStream.class));
        Mockingbird.replaceObjectForRecording(DataOutputStream.class, "<init>(java.io.OutputStream)", Mockingbird.getProxyObject(DataOutputStream.class));
        Mockingbird.replaceObjectForRecording(BufferedOutputStream.class, "<init>(java.io.OutputStream)", Mockingbird.getProxyObject(BufferedOutputStream.class));
        Mockingbird.replaceObjectForRecording(StreamCopier.class, "<init>(java.io.InputStream,java.io.OutputStream,boolean)", Mockingbird.getProxyObject(StreamCopier.class));
        Mockingbird.setReturnValue(crapProject.outputDir(), "/home/agitar/work/sexy-dolphin-05-agitar-0/tmp/agitar-agitar/Agitator48455.dir/Agitator71.tmp");
        Mockingbird.replaceObjectForRecording(File.class, "<init>(java.lang.String,java.lang.String)", Mockingbird.getProxyObject(File.class));
        Mockingbird.replaceObjectForRecording(DataInputStream.class, "<init>(java.io.InputStream)", Mockingbird.getProxyObject(DataInputStream.class));
        Mockingbird.replaceObjectForRecording(BufferedInputStream.class, "<init>(java.io.InputStream)", Mockingbird.getProxyObject(BufferedInputStream.class));
        Mockingbird.replaceObjectForRecording(FileOutputStream.class, "<init>(java.io.File)", Mockingbird.getProxyObject(FileOutputStream.class));
        Mockingbird.replaceObjectForRecording(DataOutputStream.class, "<init>(java.io.OutputStream)", Mockingbird.getProxyObject(DataOutputStream.class));
        Mockingbird.replaceObjectForRecording(BufferedOutputStream.class, "<init>(java.io.OutputStream)", Mockingbird.getProxyObject(BufferedOutputStream.class));
        Mockingbird.replaceObjectForRecording(StreamCopier.class, "<init>(java.io.InputStream,java.io.OutputStream,boolean)", Mockingbird.getProxyObject(StreamCopier.class));
        Mockingbird.setReturnValue(crapProject.getReportFile(), Mockingbird.getProxyObject(File.class));
        StreamSource streamSource = (StreamSource) Mockingbird.getProxyObject(StreamSource.class);
        Mockingbird.replaceObjectForRecording(StreamSource.class, "<init>(java.io.File)", streamSource);
        Mockingbird.setReturnValue(crapProject.getReportHtmlFile(), Mockingbird.getProxyObject(File.class));
        StreamSource streamSource2 = (StreamSource) Mockingbird.getProxyObject(StreamSource.class);
        Mockingbird.replaceObjectForRecording(StreamSource.class, "<init>(java.io.InputStream)", streamSource2);
        TransformerFactory errorListener = (TransformerFactory) Mockingbird.getProxyObject(TransformerFactory.class);
        Mockingbird.setReturnValue(true, TransformerFactory.class, "newInstance", "()javax.xml.transform.TransformerFactory", new Object[] {}, errorListener, 1);
        Transformer errorListener2 = (Transformer) Mockingbird.getProxyObject(Transformer.class);
        Mockingbird.setReturnValue(false, errorListener, "newTransformer", "(javax.xml.transform.Source)javax.xml.transform.Transformer", new Object[] {streamSource2}, errorListener2, 1);
        StreamResult streamResult = (StreamResult) Mockingbird.getProxyObject(StreamResult.class);
        Mockingbird.replaceObjectForRecording(StreamResult.class, "<init>(java.io.File)", streamResult);
        Mockingbird.setReturnValue(false, errorListener2, "transform", "(javax.xml.transform.Source,javax.xml.transform.Result)void", new Object[] {streamSource, streamResult}, null, 1);
        Mockingbird.setReturnValue(crapProject.outputDir(), "/home/agitar/work/sexy-dolphin-05-agitar-0/tmp/agitar-agitar/Agitator48455.dir/Agitator71.tmp");
        Mockingbird.replaceObjectForRecording(File.class, "<init>(java.lang.String,java.lang.String)", Mockingbird.getProxyObject(File.class));
        StreamSource streamSource3 = (StreamSource) Mockingbird.getProxyObject(StreamSource.class);
        Mockingbird.replaceObjectForRecording(StreamSource.class, "<init>(java.io.InputStream)", streamSource3);
        TransformerFactory errorListener3 = (TransformerFactory) Mockingbird.getProxyObject(TransformerFactory.class);
        Mockingbird.setReturnValue(true, TransformerFactory.class, "newInstance", "()javax.xml.transform.TransformerFactory", new Object[] {}, errorListener3, 1);
        Transformer errorListener4 = (Transformer) Mockingbird.getProxyObject(Transformer.class);
        Mockingbird.setReturnValue(false, errorListener3, "newTransformer", "(javax.xml.transform.Source)javax.xml.transform.Transformer", new Object[] {streamSource3}, errorListener4, 1);
        StreamResult streamResult2 = (StreamResult) Mockingbird.getProxyObject(StreamResult.class);
        Mockingbird.replaceObjectForRecording(StreamResult.class, "<init>(java.io.File)", streamResult2);
        Mockingbird.setReturnValue(false, errorListener4, "transform", "(javax.xml.transform.Source,javax.xml.transform.Result)void", new Object[] {streamSource, streamResult2}, null, 1);
        Mockingbird.setReturnValue(crapProject.outputDir(), "/home/agitar/work/sexy-dolphin-05-agitar-0/tmp/agitar-agitar/Agitator48455.dir/Agitator71.tmp");
        Mockingbird.replaceObjectForRecording(File.class, "<init>(java.lang.String,java.lang.String)", Mockingbird.getProxyObject(File.class));
        StreamSource streamSource4 = (StreamSource) Mockingbird.getProxyObject(StreamSource.class);
        Mockingbird.replaceObjectForRecording(StreamSource.class, "<init>(java.io.InputStream)", streamSource4);
        TransformerFactory errorListener5 = (TransformerFactory) Mockingbird.getProxyObject(TransformerFactory.class);
        Mockingbird.setReturnValue(true, TransformerFactory.class, "newInstance", "()javax.xml.transform.TransformerFactory", new Object[] {}, errorListener5, 1);
        Transformer errorListener6 = (Transformer) Mockingbird.getProxyObject(Transformer.class);
        Mockingbird.setReturnValue(false, errorListener5, "newTransformer", "(javax.xml.transform.Source)javax.xml.transform.Transformer", new Object[] {streamSource4}, errorListener6, 1);
        StreamResult streamResult3 = (StreamResult) Mockingbird.getProxyObject(StreamResult.class);
        Mockingbird.replaceObjectForRecording(StreamResult.class, "<init>(java.io.File)", streamResult3);
        Mockingbird.setReturnValue(false, errorListener6, "transform", "(javax.xml.transform.Source,javax.xml.transform.Result)void", new Object[] {streamSource, streamResult3}, null, 1);
        Mockingbird.setReturnValue(crapProject.outputDir(), "/home/agitar/work/sexy-dolphin-05-agitar-0/tmp/agitar-agitar/Agitator48455.dir/Agitator71.tmp");
        Mockingbird.replaceObjectForRecording(File.class, "<init>(java.lang.String,java.lang.String)", Mockingbird.getProxyObject(File.class));
        StreamSource streamSource5 = (StreamSource) Mockingbird.getProxyObject(StreamSource.class);
        Mockingbird.replaceObjectForRecording(StreamSource.class, "<init>(java.io.InputStream)", streamSource5);
        TransformerFactory errorListener7 = (TransformerFactory) Mockingbird.getProxyObject(TransformerFactory.class);
        Mockingbird.setReturnValue(true, TransformerFactory.class, "newInstance", "()javax.xml.transform.TransformerFactory", new Object[] {}, errorListener7, 1);
        Transformer errorListener8 = (Transformer) Mockingbird.getProxyObject(Transformer.class);
        Mockingbird.setReturnValue(false, errorListener7, "newTransformer", "(javax.xml.transform.Source)javax.xml.transform.Transformer", new Object[] {streamSource5}, errorListener8, 1);
        StreamResult streamResult4 = (StreamResult) Mockingbird.getProxyObject(StreamResult.class);
        Mockingbird.replaceObjectForRecording(StreamResult.class, "<init>(java.io.File)", streamResult4);
        Mockingbird.setReturnValue(false, errorListener8, "transform", "(javax.xml.transform.Source,javax.xml.transform.Result)void", new Object[] {streamSource, streamResult4}, null, 1);
        Mockingbird.setReturnValue(crapProject.outputDir(), "/home/agitar/work/sexy-dolphin-05-agitar-0/tmp/agitar-agitar/Agitator48455.dir/Agitator71.tmp");
        Mockingbird.replaceObjectForRecording(File.class, "<init>(java.lang.String,java.lang.String)", Mockingbird.getProxyObject(File.class));
        StreamSource streamSource6 = (StreamSource) Mockingbird.getProxyObject(StreamSource.class);
        Mockingbird.replaceObjectForRecording(StreamSource.class, "<init>(java.io.InputStream)", streamSource6);
        TransformerFactory errorListener9 = (TransformerFactory) Mockingbird.getProxyObject(TransformerFactory.class);
        Mockingbird.setReturnValue(true, TransformerFactory.class, "newInstance", "()javax.xml.transform.TransformerFactory", new Object[] {}, errorListener9, 1);
        Transformer errorListener10 = (Transformer) Mockingbird.getProxyObject(Transformer.class);
        Mockingbird.setReturnValue(false, errorListener9, "newTransformer", "(javax.xml.transform.Source)javax.xml.transform.Transformer", new Object[] {streamSource6}, errorListener10, 1);
        StreamResult streamResult5 = (StreamResult) Mockingbird.getProxyObject(StreamResult.class);
        Mockingbird.replaceObjectForRecording(StreamResult.class, "<init>(java.io.File)", streamResult5);
        Mockingbird.setReturnValue(false, errorListener10, "transform", "(javax.xml.transform.Source,javax.xml.transform.Result)void", new Object[] {streamSource, streamResult5}, null, 1);
        Mockingbird.enterTestMode(SystemCrapStats.class);
        systemCrapStats.generateHtml();
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testGenerateMainPage() throws Throwable {
        CrapProject crapProject = new CrapProject("testSystemCrapStatsProjectDir", new ArrayList(100), new ArrayList(1000), new ArrayList(0), new ArrayList(1), "/home/agitar/work/sexy-dolphin-05-agitar-0/tmp/agitar-agitar/Agitator48455.dir/Agitator71.tmp");
        SystemCrapStats systemCrapStats = new SystemCrapStats(new ArrayList(10), "testSystemCrapStatsName", crapProject, 100.0F, 1000.0F, 0.0F);
        callPrivateMethod("org.crap4j.SystemCrapStats", "generateMainPage", new Class[] {StreamSource.class}, systemCrapStats, new Object[] {new StreamSource()});
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testGetAverage() throws Throwable {
        CrapProject crapProject = new CrapProject("testSystemCrapStatsProjectDir", new ArrayList(1000), new ArrayList(0), new ArrayList(1), new ArrayList(10), "/home/agitar/work/sexy-dolphin-05-agitar-0/tmp/agitar-agitar/Agitator48455.dir/Agitator71.tmp");
        SystemCrapStats systemCrapStats = new SystemCrapStats(new ArrayList(100), "testSystemCrapStatsName", crapProject, 100.0F, 1000.0F, 0.0F);
        systemCrapStats.getAverage();
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testGetCrapNumber() throws Throwable {
        CrapProject crapProject = new CrapProject("testSystemCrapStatsProjectDir", new ArrayList(1000), new ArrayList(0), new ArrayList(1), new ArrayList(10), "/home/agitar/work/sexy-dolphin-05-agitar-0/tmp/agitar-agitar/Agitator48455.dir/Agitator71.tmp");
        SystemCrapStats systemCrapStats = new SystemCrapStats(new ArrayList(100), "testSystemCrapStatsName", crapProject, 100.0F, 1000.0F, 0.0F);
        systemCrapStats.getCrapNumber();
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testGetMedian() throws Throwable {
        CrapProject crapProject = new CrapProject("testSystemCrapStatsProjectDir", new ArrayList(100), new ArrayList(1000), new ArrayList(0), new ArrayList(1), "/home/agitar/work/sexy-dolphin-05-agitar-0/tmp/agitar-agitar/Agitator48455.dir/Agitator71.tmp");
        SystemCrapStats systemCrapStats = new SystemCrapStats(new ArrayList(10), "testSystemCrapStatsName", crapProject, 100.0F, 1000.0F, 0.0F);
        float result = systemCrapStats.getMedian();
        assertEquals("result", 0.0F, result, 1.0E-6F);
    }
    
    public void testGetRelativeResource() throws Throwable {
        CrapProject crapProject = new CrapProject("testSystemCrapStatsProjectDir", new ArrayList(100), new ArrayList(1000), new ArrayList(0), new ArrayList(1), "/home/agitar/work/sexy-dolphin-05-agitar-0/tmp/agitar-agitar/Agitator48455.dir/Agitator71.tmp");
        SystemCrapStats systemCrapStats = new SystemCrapStats(new ArrayList(10), "testSystemCrapStatsName", crapProject, 100.0F, 1000.0F, 0.0F);
        ByteArrayInputStream result = (ByteArrayInputStream) systemCrapStats.getRelativeResource("");
        assertEquals("result.available()", 479, result.available());
    }
    
    public void testGetRelativeResource1() throws Throwable {
        CrapProject crapProject = new CrapProject("testSystemCrapStatsProjectDir", new ArrayList(100), new ArrayList(1000), new ArrayList(0), new ArrayList(1), "/home/agitar/work/sexy-dolphin-05-agitar-0/tmp/agitar-agitar/Agitator48455.dir/Agitator71.tmp");
        SystemCrapStats systemCrapStats = new SystemCrapStats(new ArrayList(10), "testSystemCrapStatsName", crapProject, 100.0F, 1000.0F, 0.0F);
        InputStream result = systemCrapStats.getRelativeResource("testSystemCrapStatsFile");
        assertNull("result", result);
    }
    
    public void testGetStdDev() throws Throwable {
        SystemCrapStats systemCrapStats = new SystemCrapStats(new ArrayList(100), "testSystemCrapStatsName", null, 100.0F, 1000.0F, 0.0F);
        systemCrapStats.getStdDev();
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testGetSubjectCount() throws Throwable {
        CrapProject crapProject = new CrapProject("testSystemCrapStatsProjectDir", new ArrayList(100), new ArrayList(1000), new ArrayList(0), new ArrayList(1), "/home/agitar/work/sexy-dolphin-05-agitar-0/tmp/agitar-agitar/Agitator48455.dir/Agitator71.tmp");
        SystemCrapStats systemCrapStats = new SystemCrapStats(new ArrayList(10), "testSystemCrapStatsName", crapProject, 100.0F, 1000.0F, 0.0F);
        int result = systemCrapStats.getSubjectCount();
        assertEquals("result", 0, result);
    }
    
    public void testGetSubjects() throws Throwable {
        List crapValues = new ArrayList(100);
        SystemCrapStats systemCrapStats = new SystemCrapStats(crapValues, "testSystemCrapStatsName", null, 100.0F, 1000.0F, 0.0F);
        List result = systemCrapStats.getSubjects();
        assertSame("result", crapValues, result);
    }
    
    public void testGetTotal() throws Throwable {
        SystemCrapStats systemCrapStats = new SystemCrapStats(new ArrayList(100), "testSystemCrapStatsName", null, 100.0F, 1000.0F, 0.0F);
        float result = systemCrapStats.getTotal();
        assertEquals("result", 0.0F, result, 1.0E-6F);
    }
    
    public void testGetXmlReportFile() throws Throwable {
        CrapProject crapProject = new CrapProject("testSystemCrapStatsProjectDir", new ArrayList(1000), new ArrayList(0), new ArrayList(1), new ArrayList(10), "/home/agitar/work/sexy-dolphin-05-agitar-0/tmp/agitar-agitar/Agitator48455.dir/Agitator71.tmp");
        SystemCrapStats systemCrapStats = new SystemCrapStats(new ArrayList(100), "testSystemCrapStatsName", crapProject, 100.0F, 1000.0F, 0.0F);
        File result = (File) callPrivateMethod("org.crap4j.SystemCrapStats", "getXmlReportFile", new Class[] {}, systemCrapStats, new Object[] {});
        assertEquals("result.getName()", "report.xml", result.getName());
    }
    
    public void testMakeHist() throws Throwable {
        CrapProject crapProject = new CrapProject("testSystemCrapStatsProjectDir", new ArrayList(100), new ArrayList(1000), new ArrayList(0), new ArrayList(1), "/home/agitar/work/sexy-dolphin-05-agitar-0/tmp/agitar-agitar/Agitator48455.dir/Agitator71.tmp");
        SystemCrapStats systemCrapStats = new SystemCrapStats(new ArrayList(10), "testSystemCrapStatsName", crapProject, 100.0F, 1000.0F, 0.0F);
        MyStringBuilder myStringBuilder = new MyStringBuilder();
        callPrivateMethod("org.crap4j.SystemCrapStats", "makeHist", new Class[] {MyStringBuilder.class, String.class, String.class, String.class}, systemCrapStats, new Object[] {myStringBuilder, "testSystemCrapStatsPlace", "testSystemCrapStatsValue", "testSystemCrapStatsHeight"});
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testPrintAllSubjectComplexities() throws Throwable {
        List crapValues = new ArrayList(100);
        SystemCrapStats systemCrapStats = new SystemCrapStats(crapValues, "testSystemCrapStatsName", null, 100.0F, 1000.0F, 0.0F);
        systemCrapStats.printAllSubjectComplexities();
        assertSame("systemCrapStats.getSubjects()", crapValues, systemCrapStats.getSubjects());
    }
    
    public void testPrintAllSubjectComplexities1() throws Throwable {
        MethodComplexity complexity2 = new MethodComplexity("testSystemCrapStatsMethodSignature", "testSystemCrapStatsPkgclassName", "testSystemCrapStatsMethodName", "testSystemCrapStatsMethodDescriptor", "testSystemCrapStatsJava5Signature", 100, "testSystemCrapStatsPrettyMethodSignature");
        List crapValues = new ArrayList(100);
        crapValues.add(new MethodCrap("testSystemCrapStatsMethodSignature", 0.0F, complexity2));
        CrapProject crapProject = new CrapProject("testSystemCrapStatsProjectDir", new ArrayList(1000), new ArrayList(0), new ArrayList(1), new ArrayList(10), "/home/agitar/work/sexy-dolphin-05-agitar-0/tmp/agitar-agitar/Agitator48455.dir/Agitator71.tmp");
        SystemCrapStats systemCrapStats = new SystemCrapStats(crapValues, "testSystemCrapStatsName", crapProject, 100.0F, 1000.0F, 0.0F);
        systemCrapStats.printAllSubjectComplexities();
        assertSame("systemCrapStats.getSubjects()", crapValues, systemCrapStats.getSubjects());
    }
    
    public void testToString() throws Throwable {
        CrapProject crapProject = new CrapProject("testSystemCrapStatsProjectDir", new ArrayList(1000), new ArrayList(0), new ArrayList(1), new ArrayList(10), "/home/agitar/work/sexy-dolphin-05-agitar-0/tmp/agitar-agitar/Agitator48455.dir/Agitator71.tmp");
        SystemCrapStats systemCrapStats = new SystemCrapStats(new ArrayList(100), "testSystemCrapStatsName", crapProject, 100.0F, 1000.0F, 0.0F);
        String result = systemCrapStats.toString();
        assertEquals("result", "testSystemCrapStatsName\n_____________________\nTotal Crap: 0.00, Crap: \uFFFD, Median: 0.00, Average: \uFFFD, Std Dev: \uFFFD, Method Count: 0, crapMethodCount: 0.00, crapMethodPercent: \uFFFD%", result);
    }
    
    public void testToXml() throws Throwable {
        CrapProject crapProject = new CrapProject("testSystemCrapStatsProjectDir", new ArrayList(100), new ArrayList(1000), new ArrayList(0), new ArrayList(1), "/home/agitar/work/sexy-dolphin-05-agitar-0/tmp/agitar-agitar/Agitator48455.dir/Agitator71.tmp");
        List crapValues = new ArrayList(10);
        MethodComplexity complexity2 = new MethodComplexity("testSystemCrapStatsMethodSignature", "testSystemCrapStatsPkgclassName", "testSystemCrapStatsMethodName", "testSystemCrapStatsMethodDescriptor", "testSystemCrapStatsJava5Signature", 100, "testSystemCrapStatsPrettyMethodSignature");
        crapValues.add(new MethodCrap("testSystemCrapStatsMethodSignature", 0.0F, complexity2));
        SystemCrapStats systemCrapStats = new SystemCrapStats(crapValues, "testSystemCrapStatsName", crapProject, 100.0F, 1000.0F, 0.0F);
        String result = systemCrapStats.toXml();
        assertEquals("result", "<crap_result>\n  <project>\n    testSystemCrapStatsProjectDir\n  </project>\n  <classDirectories>\n  </classDirectories>\n  <testClassDirectories>\n  </testClassDirectories>\n  <sourceDirectories>\n  </sourceDirectories>\n  <libClasspaths>\n  </libClasspaths>\n  <stats>\n    <name>\n      testSystemCrapStatsName\n    </name>\n    <totalCrap>\n      10100.00\n    </totalCrap>\n    <crap>\n      10100.00\n    </crap>\n    <median>\n      10100.00\n    </median>\n    <average>\n      10100.00\n    </average>\n    <stdDev>\n      0.00\n    </stdDev>\n    <methodCount>\n      1\n    </methodCount>\n    <crapMethodCount>\n      1\n    </crapMethodCount>\n    <crapMethodPercent>\n      100.00\n    </crapMethodPercent>\n    <crapLoad>\n      101\n    </crapLoad>\n    <crapThreshold>\n      100\n    </crapThreshold>\n    <histogram>\n      <hist>\n        <place>\n          one\n        </place>\n        <value>\n          0\n        </value>\n        <height>\n          0.00px\n        </height>\n      </hist>\n      <hist>\n        <place>\n          two\n        </place>\n        <value>\n          0\n        </value>\n        <height>\n          0.00px\n        </height>\n      </hist>\n      <hist>\n        <place>\n          four\n        </place>\n        <value>\n          0\n        </value>\n        <height>\n          0.00px\n        </height>\n      </hist>\n      <hist>\n        <place>\n          eight\n        </place>\n        <value>\n          0\n        </value>\n        <height>\n          0.00px\n        </height>\n      </hist>\n      <hist>\n        <place>\n          sixteen\n        </place>\n        <value>\n          0\n        </value>\n        <height>\n          0.00px\n        </height>\n      </hist>\n      <hist>\n        <place>\n          thirtytwo\n        </place>\n        <value>\n          0\n        </value>\n        <height>\n          0.00px\n        </height>\n      </hist>\n      <hist>\n        <place>\n          sixtyfour\n        </place>\n        <value>\n          0\n        </value>\n        <height>\n          0.00px\n        </height>\n      </hist>\n      <hist>\n        <place>\n          one28\n        </place>\n        <value>\n          0\n        </value>\n        <height>\n          0.00px\n        </height>\n      </hist>\n      <hist>\n        <place>\n          two56\n        </place>\n        <value>\n          1\n        </value>\n        <height>\n          170.00px\n        </height>\n      </hist>\n    </histogram>\n  </stats>\n  <methods>\n    <method>\n      <package>\n        \n      </package>\n      <className>\n        testSystemCrapStatsPkgclassName\n      </className>\n      <methodName>\n        testSystemCrapStatsMethodName\n      </methodName>\n      <methodSignature>\n        testSystemCrapStatsJava5Signature\n      </methodSignature>\n      <fullMethod>\n        testSystemCrapStatsPrettyMethodSignature\n      </fullMethod>\n      <crap>\n        10100.00\n      </crap>\n      <complexity>\n        100\n      </complexity>\n      <coverage>\n        0.00\n      </coverage>\n      <crapLoad>\n        101\n      </crapLoad>\n    </method>\n  </methods>\n</crap_result>\n", result);
        assertSame("systemCrapStats.getSubjects()", crapValues, systemCrapStats.getSubjects());
    }
    
    public void testToXml1() throws Throwable {
        CrapProject crapProject = new CrapProject("testSystemCrapStatsProjectDir", new ArrayList(100), new ArrayList(1000), new ArrayList(0), new ArrayList(1), "/home/agitar/work/sexy-dolphin-05-agitar-0/tmp/agitar-agitar/Agitator48455.dir/Agitator71.tmp");
        List crapValues = new ArrayList(10);
        MethodComplexity complexity2 = new MethodComplexity("testSystemCrapStatsMethodSignature", "testSystemCrapStatsPkgclassName", "testSystemCrapStatsMethodName", "testSystemCrapStatsMethodDescriptor", "testSystemCrapStatsJava5Signature", 0, "testSystemCrapStatsPrettyMethodSignature");
        crapValues.add(new MethodCrap("testSystemCrapStatsMethodSignature", 0.0F, complexity2));
        SystemCrapStats systemCrapStats = new SystemCrapStats(crapValues, "testSystemCrapStatsName", crapProject, 100.0F, 1000.0F, 0.0F);
        String result = systemCrapStats.toXml();
        assertEquals("result", "<crap_result>\n  <project>\n    testSystemCrapStatsProjectDir\n  </project>\n  <classDirectories>\n  </classDirectories>\n  <testClassDirectories>\n  </testClassDirectories>\n  <sourceDirectories>\n  </sourceDirectories>\n  <libClasspaths>\n  </libClasspaths>\n  <stats>\n    <name>\n      testSystemCrapStatsName\n    </name>\n    <totalCrap>\n      0.00\n    </totalCrap>\n    <crap>\n      0.00\n    </crap>\n    <median>\n      0.00\n    </median>\n    <average>\n      0.00\n    </average>\n    <stdDev>\n      0.00\n    </stdDev>\n    <methodCount>\n      1\n    </methodCount>\n    <crapMethodCount>\n      0\n    </crapMethodCount>\n    <crapMethodPercent>\n      0.00\n    </crapMethodPercent>\n    <crapLoad>\n      0\n    </crapLoad>\n    <crapThreshold>\n      100\n    </crapThreshold>\n    <histogram>\n      <hist>\n        <place>\n          one\n        </place>\n        <value>\n          1\n        </value>\n        <height>\n          170.00px\n        </height>\n      </hist>\n      <hist>\n        <place>\n          two\n        </place>\n        <value>\n          0\n        </value>\n        <height>\n          0.00px\n        </height>\n      </hist>\n      <hist>\n        <place>\n          four\n        </place>\n        <value>\n          0\n        </value>\n        <height>\n          0.00px\n        </height>\n      </hist>\n      <hist>\n        <place>\n          eight\n        </place>\n        <value>\n          0\n        </value>\n        <height>\n          0.00px\n        </height>\n      </hist>\n      <hist>\n        <place>\n          sixteen\n        </place>\n        <value>\n          0\n        </value>\n        <height>\n          0.00px\n        </height>\n      </hist>\n      <hist>\n        <place>\n          thirtytwo\n        </place>\n        <value>\n          0\n        </value>\n        <height>\n          0.00px\n        </height>\n      </hist>\n      <hist>\n        <place>\n          sixtyfour\n        </place>\n        <value>\n          0\n        </value>\n        <height>\n          0.00px\n        </height>\n      </hist>\n      <hist>\n        <place>\n          one28\n        </place>\n        <value>\n          0\n        </value>\n        <height>\n          0.00px\n        </height>\n      </hist>\n      <hist>\n        <place>\n          two56\n        </place>\n        <value>\n          0\n        </value>\n        <height>\n          0.00px\n        </height>\n      </hist>\n    </histogram>\n  </stats>\n  <methods>\n    <method>\n      <package>\n        \n      </package>\n      <className>\n        testSystemCrapStatsPkgclassName\n      </className>\n      <methodName>\n        testSystemCrapStatsMethodName\n      </methodName>\n      <methodSignature>\n        testSystemCrapStatsJava5Signature\n      </methodSignature>\n      <fullMethod>\n        testSystemCrapStatsPrettyMethodSignature\n      </fullMethod>\n      <crap>\n        0.00\n      </crap>\n      <complexity>\n        0\n      </complexity>\n      <coverage>\n        0.00\n      </coverage>\n      <crapLoad>\n        0\n      </crapLoad>\n    </method>\n  </methods>\n</crap_result>\n", result);
        assertSame("systemCrapStats.getSubjects()", crapValues, systemCrapStats.getSubjects());
    }
    
    public void testToXml2() throws Throwable {
        CrapProject crapProject = new CrapProject("testSystemCrapStatsProjectDir", new ArrayList(100), new ArrayList(1000), new ArrayList(0), new ArrayList(1), "/home/agitar/work/sexy-dolphin-05-agitar-0/tmp/agitar-agitar/Agitator48455.dir/Agitator71.tmp");
        List crapValues = new ArrayList(10);
        MethodComplexity complexity2 = new MethodComplexity("testSystemCrapStatsMethodSignature", "testSystemCrapStatsPkgclassName", "testSystemCrapStatsMethodName", "testSystemCrapStatsMethodDescriptor", "testSystemCrapStatsJava5Signature", 1, "testSystemCrapStatsPrettyMethodSignature");
        crapValues.add(new MethodCrap("testSystemCrapStatsMethodSignature", 0.0F, complexity2));
        SystemCrapStats systemCrapStats = new SystemCrapStats(crapValues, "testSystemCrapStatsName", crapProject, 100.0F, 1000.0F, 0.0F);
        String result = systemCrapStats.toXml();
        assertEquals("result", "<crap_result>\n  <project>\n    testSystemCrapStatsProjectDir\n  </project>\n  <classDirectories>\n  </classDirectories>\n  <testClassDirectories>\n  </testClassDirectories>\n  <sourceDirectories>\n  </sourceDirectories>\n  <libClasspaths>\n  </libClasspaths>\n  <stats>\n    <name>\n      testSystemCrapStatsName\n    </name>\n    <totalCrap>\n      2.00\n    </totalCrap>\n    <crap>\n      2.00\n    </crap>\n    <median>\n      2.00\n    </median>\n    <average>\n      2.00\n    </average>\n    <stdDev>\n      0.00\n    </stdDev>\n    <methodCount>\n      1\n    </methodCount>\n    <crapMethodCount>\n      0\n    </crapMethodCount>\n    <crapMethodPercent>\n      0.00\n    </crapMethodPercent>\n    <crapLoad>\n      0\n    </crapLoad>\n    <crapThreshold>\n      100\n    </crapThreshold>\n    <histogram>\n      <hist>\n        <place>\n          one\n        </place>\n        <value>\n          0\n        </value>\n        <height>\n          0.00px\n        </height>\n      </hist>\n      <hist>\n        <place>\n          two\n        </place>\n        <value>\n          1\n        </value>\n        <height>\n          170.00px\n        </height>\n      </hist>\n      <hist>\n        <place>\n          four\n        </place>\n        <value>\n          0\n        </value>\n        <height>\n          0.00px\n        </height>\n      </hist>\n      <hist>\n        <place>\n          eight\n        </place>\n        <value>\n          0\n        </value>\n        <height>\n          0.00px\n        </height>\n      </hist>\n      <hist>\n        <place>\n          sixteen\n        </place>\n        <value>\n          0\n        </value>\n        <height>\n          0.00px\n        </height>\n      </hist>\n      <hist>\n        <place>\n          thirtytwo\n        </place>\n        <value>\n          0\n        </value>\n        <height>\n          0.00px\n        </height>\n      </hist>\n      <hist>\n        <place>\n          sixtyfour\n        </place>\n        <value>\n          0\n        </value>\n        <height>\n          0.00px\n        </height>\n      </hist>\n      <hist>\n        <place>\n          one28\n        </place>\n        <value>\n          0\n        </value>\n        <height>\n          0.00px\n        </height>\n      </hist>\n      <hist>\n        <place>\n          two56\n        </place>\n        <value>\n          0\n        </value>\n        <height>\n          0.00px\n        </height>\n      </hist>\n    </histogram>\n  </stats>\n  <methods>\n    <method>\n      <package>\n        \n      </package>\n      <className>\n        testSystemCrapStatsPkgclassName\n      </className>\n      <methodName>\n        testSystemCrapStatsMethodName\n      </methodName>\n      <methodSignature>\n        testSystemCrapStatsJava5Signature\n      </methodSignature>\n      <fullMethod>\n        testSystemCrapStatsPrettyMethodSignature\n      </fullMethod>\n      <crap>\n        2.00\n      </crap>\n      <complexity>\n        1\n      </complexity>\n      <coverage>\n        0.00\n      </coverage>\n      <crapLoad>\n        0\n      </crapLoad>\n    </method>\n  </methods>\n</crap_result>\n", result);
        assertSame("systemCrapStats.getSubjects()", crapValues, systemCrapStats.getSubjects());
    }
    
    public void testToXml3() throws Throwable {
        MethodComplexity complexity2 = new MethodComplexity("testSystemCrapStatsMethodSignature", "testSystemCrapStatsPkgclassName", "testSystemCrapStatsMethodName", "testSystemCrapStatsMethodDescriptor", "testSystemCrapStatsJava5Signature", 100, "testSystemCrapStatsPrettyMethodSignature");
        MethodCrap methodCrap = new MethodCrap("testSystemCrapStatsMethodSignature", 1.0F, complexity2);
        List crapValues = new ArrayList(100);
        crapValues.add(methodCrap);
        crapValues.add(new MethodCrap("testSystemCrapStatsMethodSignature1", 1.0F, complexity2));
        CrapProject crapProject = new CrapProject("testSystemCrapStatsProjectDir", new ArrayList(1000), new ArrayList(0), new ArrayList(1), new ArrayList(10), "/home/agitar/work/sexy-dolphin-05-agitar-0/tmp/agitar-agitar/Agitator48455.dir/Agitator71.tmp");
        SystemCrapStats systemCrapStats = new SystemCrapStats(crapValues, "testSystemCrapStatsName", crapProject, 100.0F, 1000.0F, 0.0F);
        String result = systemCrapStats.toXml();
        assertEquals("result", "<crap_result>\n  <project>\n    testSystemCrapStatsProjectDir\n  </project>\n  <classDirectories>\n  </classDirectories>\n  <testClassDirectories>\n  </testClassDirectories>\n  <sourceDirectories>\n  </sourceDirectories>\n  <libClasspaths>\n  </libClasspaths>\n  <stats>\n    <name>\n      testSystemCrapStatsName\n    </name>\n    <totalCrap>\n      200.00\n    </totalCrap>\n    <crap>\n      100.00\n    </crap>\n    <median>\n      100.00\n    </median>\n    <average>\n      100.00\n    </average>\n    <stdDev>\n      0.00\n    </stdDev>\n    <methodCount>\n      2\n    </methodCount>\n    <crapMethodCount>\n      2\n    </crapMethodCount>\n    <crapMethodPercent>\n      100.00\n    </crapMethodPercent>\n    <crapLoad>\n      2\n    </crapLoad>\n    <crapThreshold>\n      100\n    </crapThreshold>\n    <histogram>\n      <hist>\n        <place>\n          one\n        </place>\n        <value>\n          0\n        </value>\n        <height>\n          0.00px\n        </height>\n      </hist>\n      <hist>\n        <place>\n          two\n        </place>\n        <value>\n          0\n        </value>\n        <height>\n          0.00px\n        </height>\n      </hist>\n      <hist>\n        <place>\n          four\n        </place>\n        <value>\n          0\n        </value>\n        <height>\n          0.00px\n        </height>\n      </hist>\n      <hist>\n        <place>\n          eight\n        </place>\n        <value>\n          0\n        </value>\n        <height>\n          0.00px\n        </height>\n      </hist>\n      <hist>\n        <place>\n          sixteen\n        </place>\n        <value>\n          0\n        </value>\n        <height>\n          0.00px\n        </height>\n      </hist>\n      <hist>\n        <place>\n          thirtytwo\n        </place>\n        <value>\n          0\n        </value>\n        <height>\n          0.00px\n        </height>\n      </hist>\n      <hist>\n        <place>\n          sixtyfour\n        </place>\n        <value>\n          2\n        </value>\n        <height>\n          170.00px\n        </height>\n      </hist>\n      <hist>\n        <place>\n          one28\n        </place>\n        <value>\n          0\n        </value>\n        <height>\n          0.00px\n        </height>\n      </hist>\n      <hist>\n        <place>\n          two56\n        </place>\n        <value>\n          0\n        </value>\n        <height>\n          0.00px\n        </height>\n      </hist>\n    </histogram>\n  </stats>\n  <methods>\n    <method>\n      <package>\n        \n      </package>\n      <className>\n        testSystemCrapStatsPkgclassName\n      </className>\n      <methodName>\n        testSystemCrapStatsMethodName\n      </methodName>\n      <methodSignature>\n        testSystemCrapStatsJava5Signature\n      </methodSignature>\n      <fullMethod>\n        testSystemCrapStatsPrettyMethodSignature\n      </fullMethod>\n      <crap>\n        100.00\n      </crap>\n      <complexity>\n        100\n      </complexity>\n      <coverage>\n        100.00\n      </coverage>\n      <crapLoad>\n        1\n      </crapLoad>\n    </method>\n    <method>\n      <package>\n        \n      </package>\n      <className>\n        testSystemCrapStatsPkgclassName\n      </className>\n      <methodName>\n        testSystemCrapStatsMethodName\n      </methodName>\n      <methodSignature>\n        testSystemCrapStatsJava5Signature\n      </methodSignature>\n      <fullMethod>\n        testSystemCrapStatsPrettyMethodSignature\n      </fullMethod>\n      <crap>\n        100.00\n      </crap>\n      <complexity>\n        100\n      </complexity>\n      <coverage>\n        100.00\n      </coverage>\n      <crapLoad>\n        1\n      </crapLoad>\n    </method>\n  </methods>\n</crap_result>\n", result);
        assertSame("systemCrapStats.getSubjects()", crapValues, systemCrapStats.getSubjects());
    }
    
    public void testToXml4() throws Throwable {
        ArrayList crapValues = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        CrapProject crapProject = (CrapProject) Mockingbird.getProxyObject(CrapProject.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, crapValues, "size", "()int", new Object[] {}, new Integer(7), 1);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.setReturnValue(false, crapValues, "iterator", "()java.util.Iterator", new Object[] {}, iterator, 1);
        Mockingbird.setReturnValue(false, iterator, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        MethodCrap methodCrap = (MethodCrap) Mockingbird.getProxyObject(MethodCrap.class);
        Mockingbird.setReturnValue(false, iterator, "next", "()java.lang.Object", new Object[] {}, methodCrap, 1);
        Mockingbird.setReturnValue(methodCrap.getCrap(), 1892.0F);
        Mockingbird.setReturnValue(false, iterator, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        MethodCrap methodCrap2 = (MethodCrap) Mockingbird.getProxyObject(MethodCrap.class);
        Mockingbird.setReturnValue(false, iterator, "next", "()java.lang.Object", new Object[] {}, methodCrap2, 1);
        Mockingbird.setReturnValue(methodCrap2.getCrap(), 0.0F);
        Mockingbird.setReturnValue(false, iterator, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        MethodCrap methodCrap3 = (MethodCrap) Mockingbird.getProxyObject(MethodCrap.class);
        Mockingbird.setReturnValue(false, iterator, "next", "()java.lang.Object", new Object[] {}, methodCrap3, 1);
        Mockingbird.setReturnValue(methodCrap3.getCrap(), 0.0F);
        Mockingbird.setReturnValue(false, iterator, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        MethodCrap methodCrap4 = (MethodCrap) Mockingbird.getProxyObject(MethodCrap.class);
        Mockingbird.setReturnValue(false, iterator, "next", "()java.lang.Object", new Object[] {}, methodCrap4, 1);
        Mockingbird.setReturnValue(methodCrap4.getCrap(), 2.0F);
        Mockingbird.setReturnValue(false, iterator, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        MethodCrap methodCrap5 = (MethodCrap) Mockingbird.getProxyObject(MethodCrap.class);
        Mockingbird.setReturnValue(false, iterator, "next", "()java.lang.Object", new Object[] {}, methodCrap5, 1);
        Mockingbird.setReturnValue(methodCrap5.getCrap(), 0.0F);
        Mockingbird.setReturnValue(false, iterator, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        MethodCrap methodCrap6 = (MethodCrap) Mockingbird.getProxyObject(MethodCrap.class);
        Mockingbird.setReturnValue(false, iterator, "next", "()java.lang.Object", new Object[] {}, methodCrap6, 1);
        Mockingbird.setReturnValue(methodCrap6.getCrap(), 1.997003F);
        Mockingbird.setReturnValue(false, iterator, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        MethodCrap methodCrap7 = (MethodCrap) Mockingbird.getProxyObject(MethodCrap.class);
        Mockingbird.setReturnValue(false, iterator, "next", "()java.lang.Object", new Object[] {}, methodCrap7, 1);
        Mockingbird.setReturnValue(methodCrap7.getCrap(), 20.0F);
        Mockingbird.setReturnValue(false, iterator, "hasNext", "()boolean", new Object[] {}, Boolean.FALSE, 1);
        Mockingbird.setReturnValue(false, crapValues, "size", "()int", new Object[] {}, new Integer(7), 1);
        Mockingbird.setReturnValue(false, crapValues, "size", "()int", new Object[] {}, new Integer(7), 1);
        Mockingbird.setReturnValue(false, crapValues, "get", "(int)java.lang.Object", new Object[] {new Integer(0)}, methodCrap, 1);
        Mockingbird.setReturnValue(methodCrap.getCrap(), 1892.0F);
        Mockingbird.setReturnValue(false, crapValues, "size", "()int", new Object[] {}, new Integer(7), 1);
        Mockingbird.setReturnValue(false, crapValues, "get", "(int)java.lang.Object", new Object[] {new Integer(1)}, methodCrap2, 1);
        Mockingbird.setReturnValue(methodCrap2.getCrap(), 0.0F);
        Mockingbird.setReturnValue(false, crapValues, "size", "()int", new Object[] {}, new Integer(7), 1);
        Mockingbird.setReturnValue(false, crapValues, "get", "(int)java.lang.Object", new Object[] {new Integer(2)}, methodCrap3, 1);
        Mockingbird.setReturnValue(methodCrap3.getCrap(), 0.0F);
        Mockingbird.setReturnValue(false, crapValues, "size", "()int", new Object[] {}, new Integer(7), 1);
        Mockingbird.setReturnValue(false, crapValues, "get", "(int)java.lang.Object", new Object[] {new Integer(3)}, methodCrap4, 1);
        Mockingbird.setReturnValue(methodCrap4.getCrap(), 2.0F);
        Mockingbird.setReturnValue(false, crapValues, "size", "()int", new Object[] {}, new Integer(7), 1);
        Mockingbird.setReturnValue(false, crapValues, "get", "(int)java.lang.Object", new Object[] {new Integer(4)}, methodCrap5, 1);
        Mockingbird.setReturnValue(methodCrap5.getCrap(), 0.0F);
        Mockingbird.setReturnValue(false, crapValues, "size", "()int", new Object[] {}, new Integer(7), 1);
        Mockingbird.setReturnValue(false, crapValues, "get", "(int)java.lang.Object", new Object[] {new Integer(5)}, methodCrap6, 1);
        Mockingbird.setReturnValue(methodCrap6.getCrap(), 1.997003F);
        Mockingbird.setReturnValue(false, crapValues, "size", "()int", new Object[] {}, new Integer(7), 1);
        Mockingbird.setReturnValue(false, crapValues, "get", "(int)java.lang.Object", new Object[] {new Integer(6)}, methodCrap7, 1);
        Mockingbird.setReturnValue(methodCrap7.getCrap(), 20.0F);
        Mockingbird.setReturnValue(false, crapValues, "size", "()int", new Object[] {}, new Integer(7), 1);
        Mockingbird.setReturnValue(false, crapValues, "size", "()int", new Object[] {}, new Integer(7), 1);
        Mockingbird.setReturnValue(false, crapValues, "size", "()int", new Object[] {}, new Integer(7), 1);
        Mockingbird.setReturnValue(false, crapValues, "get", "(int)java.lang.Object", new Object[] {new Integer(0)}, methodCrap, 1);
        Mockingbird.setReturnValue(methodCrap.getCrap(), 1892.0F);
        Mockingbird.setReturnValue(false, crapValues, "size", "()int", new Object[] {}, new Integer(7), 1);
        Mockingbird.setReturnValue(false, crapValues, "get", "(int)java.lang.Object", new Object[] {new Integer(1)}, methodCrap2, 1);
        Mockingbird.setReturnValue(methodCrap2.getCrap(), 0.0F);
        Mockingbird.setReturnValue(false, crapValues, "size", "()int", new Object[] {}, new Integer(7), 1);
        Mockingbird.setReturnValue(false, crapValues, "get", "(int)java.lang.Object", new Object[] {new Integer(2)}, methodCrap3, 1);
        Mockingbird.setReturnValue(methodCrap3.getCrap(), 0.0F);
        Mockingbird.setReturnValue(false, crapValues, "size", "()int", new Object[] {}, new Integer(7), 1);
        Mockingbird.setReturnValue(false, crapValues, "get", "(int)java.lang.Object", new Object[] {new Integer(3)}, methodCrap4, 1);
        Mockingbird.setReturnValue(methodCrap4.getCrap(), 2.0F);
        Mockingbird.setReturnValue(false, crapValues, "size", "()int", new Object[] {}, new Integer(7), 1);
        Mockingbird.setReturnValue(false, crapValues, "get", "(int)java.lang.Object", new Object[] {new Integer(4)}, methodCrap5, 1);
        Mockingbird.setReturnValue(methodCrap5.getCrap(), 0.0F);
        Mockingbird.setReturnValue(false, crapValues, "size", "()int", new Object[] {}, new Integer(7), 1);
        Mockingbird.setReturnValue(false, crapValues, "get", "(int)java.lang.Object", new Object[] {new Integer(5)}, methodCrap6, 1);
        Mockingbird.setReturnValue(methodCrap6.getCrap(), 1.997003F);
        Mockingbird.setReturnValue(false, crapValues, "size", "()int", new Object[] {}, new Integer(7), 1);
        Mockingbird.setReturnValue(false, crapValues, "get", "(int)java.lang.Object", new Object[] {new Integer(6)}, methodCrap7, 1);
        Mockingbird.setReturnValue(methodCrap7.getCrap(), 20.0F);
        Mockingbird.setReturnValue(false, crapValues, "size", "()int", new Object[] {}, new Integer(7), 1);
        Iterator iterator2 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.setReturnValue(false, crapValues, "iterator", "()java.util.Iterator", new Object[] {}, iterator2, 1);
        Mockingbird.setReturnValue(false, iterator2, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator2, "next", "()java.lang.Object", new Object[] {}, methodCrap, 1);
        Mockingbird.setReturnValue(methodCrap.getCrap(), 1892.0F);
        Mockingbird.setReturnValue(false, iterator2, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator2, "next", "()java.lang.Object", new Object[] {}, methodCrap2, 1);
        Mockingbird.setReturnValue(methodCrap2.getCrap(), 0.0F);
        Mockingbird.setReturnValue(false, iterator2, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator2, "next", "()java.lang.Object", new Object[] {}, methodCrap3, 1);
        Mockingbird.setReturnValue(methodCrap3.getCrap(), 0.0F);
        Mockingbird.setReturnValue(false, iterator2, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator2, "next", "()java.lang.Object", new Object[] {}, methodCrap4, 1);
        Mockingbird.setReturnValue(methodCrap4.getCrap(), 2.0F);
        Mockingbird.setReturnValue(false, iterator2, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator2, "next", "()java.lang.Object", new Object[] {}, methodCrap5, 1);
        Mockingbird.setReturnValue(methodCrap5.getCrap(), 0.0F);
        Mockingbird.setReturnValue(false, iterator2, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator2, "next", "()java.lang.Object", new Object[] {}, methodCrap6, 1);
        Mockingbird.setReturnValue(methodCrap6.getCrap(), 1.997003F);
        Mockingbird.setReturnValue(false, iterator2, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator2, "next", "()java.lang.Object", new Object[] {}, methodCrap7, 1);
        Mockingbird.setReturnValue(methodCrap7.getCrap(), 20.0F);
        Mockingbird.setReturnValue(false, iterator2, "hasNext", "()boolean", new Object[] {}, Boolean.FALSE, 1);
        Iterator iterator3 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.setReturnValue(false, crapValues, "iterator", "()java.util.Iterator", new Object[] {}, iterator3, 1);
        Mockingbird.setReturnValue(false, iterator3, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator3, "next", "()java.lang.Object", new Object[] {}, methodCrap, 1);
        Mockingbird.setReturnValue(methodCrap.getCrapLoad(-64.996544F), 42);
        Mockingbird.setReturnValue(false, iterator3, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator3, "next", "()java.lang.Object", new Object[] {}, methodCrap2, 1);
        Mockingbird.setReturnValue(methodCrap2.getCrapLoad(-64.996544F), 0);
        Mockingbird.setReturnValue(false, iterator3, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator3, "next", "()java.lang.Object", new Object[] {}, methodCrap3, 1);
        Mockingbird.setReturnValue(methodCrap3.getCrapLoad(-64.996544F), 0);
        Mockingbird.setReturnValue(false, iterator3, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator3, "next", "()java.lang.Object", new Object[] {}, methodCrap4, 1);
        Mockingbird.setReturnValue(methodCrap4.getCrapLoad(-64.996544F), 0);
        Mockingbird.setReturnValue(false, iterator3, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator3, "next", "()java.lang.Object", new Object[] {}, methodCrap5, 1);
        Mockingbird.setReturnValue(methodCrap5.getCrapLoad(-64.996544F), 0);
        Mockingbird.setReturnValue(false, iterator3, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator3, "next", "()java.lang.Object", new Object[] {}, methodCrap6, 1);
        Mockingbird.setReturnValue(methodCrap6.getCrapLoad(-64.996544F), 0);
        Mockingbird.setReturnValue(false, iterator3, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator3, "next", "()java.lang.Object", new Object[] {}, methodCrap7, 1);
        Mockingbird.setReturnValue(methodCrap7.getCrapLoad(-64.996544F), 3);
        Mockingbird.setReturnValue(false, iterator3, "hasNext", "()boolean", new Object[] {}, Boolean.FALSE, 1);
        Mockingbird.enterTestMode(SystemCrapStats.class);
        SystemCrapStats systemCrapStats = new SystemCrapStats(crapValues, "testSystemCrapStatsName", crapProject, 100.0F, 1000.0F, 0.0F);
        Mockingbird.enterRecordingMode();
        crapProject.toXml(null);
        Mockingbird.setNormalReturnForVoid(true);
        Iterator iterator4 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.setReturnValue(false, crapValues, "iterator", "()java.util.Iterator", new Object[] {}, iterator4, 1);
        Mockingbird.setReturnValue(false, iterator4, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator4, "next", "()java.lang.Object", new Object[] {}, methodCrap, 1);
        Mockingbird.setReturnValue(methodCrap.getCrap(), 1892.0F);
        Mockingbird.setReturnValue(false, iterator4, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator4, "next", "()java.lang.Object", new Object[] {}, methodCrap2, 1);
        Mockingbird.setReturnValue(methodCrap2.getCrap(), 0.0F);
        Mockingbird.setReturnValue(false, iterator4, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator4, "next", "()java.lang.Object", new Object[] {}, methodCrap3, 1);
        Mockingbird.setReturnValue(methodCrap3.getCrap(), 0.0F);
        Mockingbird.setReturnValue(false, iterator4, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator4, "next", "()java.lang.Object", new Object[] {}, methodCrap4, 1);
        Mockingbird.setReturnValue(methodCrap4.getCrap(), 2.0F);
        Mockingbird.setReturnValue(false, iterator4, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator4, "next", "()java.lang.Object", new Object[] {}, methodCrap5, 1);
        Mockingbird.setReturnValue(methodCrap5.getCrap(), 0.0F);
        Mockingbird.setReturnValue(false, iterator4, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator4, "next", "()java.lang.Object", new Object[] {}, methodCrap6, 1);
        Mockingbird.setReturnValue(methodCrap6.getCrap(), 1.997003F);
        Mockingbird.setReturnValue(false, iterator4, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator4, "next", "()java.lang.Object", new Object[] {}, methodCrap7, 1);
        Mockingbird.setReturnValue(methodCrap7.getCrap(), 20.0F);
        Mockingbird.setReturnValue(false, iterator4, "hasNext", "()boolean", new Object[] {}, Boolean.FALSE, 1);
        Iterator iterator5 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.setReturnValue(false, crapValues, "iterator", "()java.util.Iterator", new Object[] {}, iterator5, 1);
        Mockingbird.setReturnValue(false, iterator5, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator5, "next", "()java.lang.Object", new Object[] {}, methodCrap, 1);
        Mockingbird.setReturnValue(methodCrap.getCrap(), 1892.0F);
        Mockingbird.setReturnValue(methodCrap.getCrap(), 1892.0F);
        Mockingbird.setReturnValue(false, iterator5, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator5, "next", "()java.lang.Object", new Object[] {}, methodCrap2, 1);
        Mockingbird.setReturnValue(methodCrap2.getCrap(), 0.0F);
        Mockingbird.setReturnValue(false, iterator5, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator5, "next", "()java.lang.Object", new Object[] {}, methodCrap3, 1);
        Mockingbird.setReturnValue(methodCrap3.getCrap(), 0.0F);
        Mockingbird.setReturnValue(false, iterator5, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator5, "next", "()java.lang.Object", new Object[] {}, methodCrap4, 1);
        Mockingbird.setReturnValue(methodCrap4.getCrap(), 2.0F);
        Mockingbird.setReturnValue(methodCrap4.getCrap(), 2.0F);
        Mockingbird.setReturnValue(false, iterator5, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator5, "next", "()java.lang.Object", new Object[] {}, methodCrap5, 1);
        Mockingbird.setReturnValue(methodCrap5.getCrap(), 0.0F);
        Mockingbird.setReturnValue(false, iterator5, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator5, "next", "()java.lang.Object", new Object[] {}, methodCrap6, 1);
        Mockingbird.setReturnValue(methodCrap6.getCrap(), 1.997003F);
        Mockingbird.setReturnValue(false, iterator5, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator5, "next", "()java.lang.Object", new Object[] {}, methodCrap7, 1);
        Mockingbird.setReturnValue(methodCrap7.getCrap(), 20.0F);
        Mockingbird.setReturnValue(methodCrap7.getCrap(), 20.0F);
        Mockingbird.setReturnValue(false, iterator5, "hasNext", "()boolean", new Object[] {}, Boolean.FALSE, 1);
        Iterator iterator6 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.setReturnValue(false, crapValues, "iterator", "()java.util.Iterator", new Object[] {}, iterator6, 1);
        Mockingbird.setReturnValue(false, iterator6, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator6, "next", "()java.lang.Object", new Object[] {}, methodCrap, 1);
        Mockingbird.setReturnValue(methodCrap.getCrap(), 1892.0F);
        Mockingbird.setReturnValue(methodCrap.getCrap(), 1892.0F);
        Mockingbird.setReturnValue(false, iterator6, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator6, "next", "()java.lang.Object", new Object[] {}, methodCrap2, 1);
        Mockingbird.setReturnValue(methodCrap2.getCrap(), 0.0F);
        Mockingbird.setReturnValue(false, iterator6, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator6, "next", "()java.lang.Object", new Object[] {}, methodCrap3, 1);
        Mockingbird.setReturnValue(methodCrap3.getCrap(), 0.0F);
        Mockingbird.setReturnValue(false, iterator6, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator6, "next", "()java.lang.Object", new Object[] {}, methodCrap4, 1);
        Mockingbird.setReturnValue(methodCrap4.getCrap(), 2.0F);
        Mockingbird.setReturnValue(false, iterator6, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator6, "next", "()java.lang.Object", new Object[] {}, methodCrap5, 1);
        Mockingbird.setReturnValue(methodCrap5.getCrap(), 0.0F);
        Mockingbird.setReturnValue(false, iterator6, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator6, "next", "()java.lang.Object", new Object[] {}, methodCrap6, 1);
        Mockingbird.setReturnValue(methodCrap6.getCrap(), 1.997003F);
        Mockingbird.setReturnValue(false, iterator6, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator6, "next", "()java.lang.Object", new Object[] {}, methodCrap7, 1);
        Mockingbird.setReturnValue(methodCrap7.getCrap(), 20.0F);
        Mockingbird.setReturnValue(methodCrap7.getCrap(), 20.0F);
        Mockingbird.setReturnValue(false, iterator6, "hasNext", "()boolean", new Object[] {}, Boolean.FALSE, 1);
        Iterator iterator7 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.setReturnValue(false, crapValues, "iterator", "()java.util.Iterator", new Object[] {}, iterator7, 1);
        Mockingbird.setReturnValue(false, iterator7, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator7, "next", "()java.lang.Object", new Object[] {}, methodCrap, 1);
        Mockingbird.setReturnValue(methodCrap.getCrap(), 1892.0F);
        Mockingbird.setReturnValue(methodCrap.getCrap(), 1892.0F);
        Mockingbird.setReturnValue(false, iterator7, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator7, "next", "()java.lang.Object", new Object[] {}, methodCrap2, 1);
        Mockingbird.setReturnValue(methodCrap2.getCrap(), 0.0F);
        Mockingbird.setReturnValue(false, iterator7, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator7, "next", "()java.lang.Object", new Object[] {}, methodCrap3, 1);
        Mockingbird.setReturnValue(methodCrap3.getCrap(), 0.0F);
        Mockingbird.setReturnValue(false, iterator7, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator7, "next", "()java.lang.Object", new Object[] {}, methodCrap4, 1);
        Mockingbird.setReturnValue(methodCrap4.getCrap(), 2.0F);
        Mockingbird.setReturnValue(false, iterator7, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator7, "next", "()java.lang.Object", new Object[] {}, methodCrap5, 1);
        Mockingbird.setReturnValue(methodCrap5.getCrap(), 0.0F);
        Mockingbird.setReturnValue(false, iterator7, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator7, "next", "()java.lang.Object", new Object[] {}, methodCrap6, 1);
        Mockingbird.setReturnValue(methodCrap6.getCrap(), 1.997003F);
        Mockingbird.setReturnValue(false, iterator7, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator7, "next", "()java.lang.Object", new Object[] {}, methodCrap7, 1);
        Mockingbird.setReturnValue(methodCrap7.getCrap(), 20.0F);
        Mockingbird.setReturnValue(methodCrap7.getCrap(), 20.0F);
        Mockingbird.setReturnValue(false, iterator7, "hasNext", "()boolean", new Object[] {}, Boolean.FALSE, 1);
        Iterator iterator8 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.setReturnValue(false, crapValues, "iterator", "()java.util.Iterator", new Object[] {}, iterator8, 1);
        Mockingbird.setReturnValue(false, iterator8, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator8, "next", "()java.lang.Object", new Object[] {}, methodCrap, 1);
        Mockingbird.setReturnValue(methodCrap.getCrap(), 1892.0F);
        Mockingbird.setReturnValue(methodCrap.getCrap(), 1892.0F);
        Mockingbird.setReturnValue(false, iterator8, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator8, "next", "()java.lang.Object", new Object[] {}, methodCrap2, 1);
        Mockingbird.setReturnValue(methodCrap2.getCrap(), 0.0F);
        Mockingbird.setReturnValue(false, iterator8, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator8, "next", "()java.lang.Object", new Object[] {}, methodCrap3, 1);
        Mockingbird.setReturnValue(methodCrap3.getCrap(), 0.0F);
        Mockingbird.setReturnValue(false, iterator8, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator8, "next", "()java.lang.Object", new Object[] {}, methodCrap4, 1);
        Mockingbird.setReturnValue(methodCrap4.getCrap(), 2.0F);
        Mockingbird.setReturnValue(false, iterator8, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator8, "next", "()java.lang.Object", new Object[] {}, methodCrap5, 1);
        Mockingbird.setReturnValue(methodCrap5.getCrap(), 0.0F);
        Mockingbird.setReturnValue(false, iterator8, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator8, "next", "()java.lang.Object", new Object[] {}, methodCrap6, 1);
        Mockingbird.setReturnValue(methodCrap6.getCrap(), 1.997003F);
        Mockingbird.setReturnValue(false, iterator8, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator8, "next", "()java.lang.Object", new Object[] {}, methodCrap7, 1);
        Mockingbird.setReturnValue(methodCrap7.getCrap(), 20.0F);
        Mockingbird.setReturnValue(methodCrap7.getCrap(), 20.0F);
        Mockingbird.setReturnValue(false, iterator8, "hasNext", "()boolean", new Object[] {}, Boolean.FALSE, 1);
        Iterator iterator9 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.setReturnValue(false, crapValues, "iterator", "()java.util.Iterator", new Object[] {}, iterator9, 1);
        Mockingbird.setReturnValue(false, iterator9, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator9, "next", "()java.lang.Object", new Object[] {}, methodCrap, 1);
        Mockingbird.setReturnValue(methodCrap.getCrap(), 1892.0F);
        Mockingbird.setReturnValue(methodCrap.getCrap(), 1892.0F);
        Mockingbird.setReturnValue(false, iterator9, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator9, "next", "()java.lang.Object", new Object[] {}, methodCrap2, 1);
        Mockingbird.setReturnValue(methodCrap2.getCrap(), 0.0F);
        Mockingbird.setReturnValue(false, iterator9, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator9, "next", "()java.lang.Object", new Object[] {}, methodCrap3, 1);
        Mockingbird.setReturnValue(methodCrap3.getCrap(), 0.0F);
        Mockingbird.setReturnValue(false, iterator9, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator9, "next", "()java.lang.Object", new Object[] {}, methodCrap4, 1);
        Mockingbird.setReturnValue(methodCrap4.getCrap(), 2.0F);
        Mockingbird.setReturnValue(false, iterator9, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator9, "next", "()java.lang.Object", new Object[] {}, methodCrap5, 1);
        Mockingbird.setReturnValue(methodCrap5.getCrap(), 0.0F);
        Mockingbird.setReturnValue(false, iterator9, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator9, "next", "()java.lang.Object", new Object[] {}, methodCrap6, 1);
        Mockingbird.setReturnValue(methodCrap6.getCrap(), 1.997003F);
        Mockingbird.setReturnValue(false, iterator9, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator9, "next", "()java.lang.Object", new Object[] {}, methodCrap7, 1);
        Mockingbird.setReturnValue(methodCrap7.getCrap(), 20.0F);
        Mockingbird.setReturnValue(false, iterator9, "hasNext", "()boolean", new Object[] {}, Boolean.FALSE, 1);
        Iterator iterator10 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.setReturnValue(false, crapValues, "iterator", "()java.util.Iterator", new Object[] {}, iterator10, 1);
        Mockingbird.setReturnValue(false, iterator10, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator10, "next", "()java.lang.Object", new Object[] {}, methodCrap, 1);
        Mockingbird.setReturnValue(methodCrap.getCrap(), 1892.0F);
        Mockingbird.setReturnValue(methodCrap.getCrap(), 1892.0F);
        Mockingbird.setReturnValue(false, iterator10, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator10, "next", "()java.lang.Object", new Object[] {}, methodCrap2, 1);
        Mockingbird.setReturnValue(methodCrap2.getCrap(), 0.0F);
        Mockingbird.setReturnValue(false, iterator10, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator10, "next", "()java.lang.Object", new Object[] {}, methodCrap3, 1);
        Mockingbird.setReturnValue(methodCrap3.getCrap(), 0.0F);
        Mockingbird.setReturnValue(false, iterator10, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator10, "next", "()java.lang.Object", new Object[] {}, methodCrap4, 1);
        Mockingbird.setReturnValue(methodCrap4.getCrap(), 2.0F);
        Mockingbird.setReturnValue(false, iterator10, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator10, "next", "()java.lang.Object", new Object[] {}, methodCrap5, 1);
        Mockingbird.setReturnValue(methodCrap5.getCrap(), 0.0F);
        Mockingbird.setReturnValue(false, iterator10, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator10, "next", "()java.lang.Object", new Object[] {}, methodCrap6, 1);
        Mockingbird.setReturnValue(methodCrap6.getCrap(), 1.997003F);
        Mockingbird.setReturnValue(false, iterator10, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator10, "next", "()java.lang.Object", new Object[] {}, methodCrap7, 1);
        Mockingbird.setReturnValue(methodCrap7.getCrap(), 20.0F);
        Mockingbird.setReturnValue(false, iterator10, "hasNext", "()boolean", new Object[] {}, Boolean.FALSE, 1);
        Iterator iterator11 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.setReturnValue(false, crapValues, "iterator", "()java.util.Iterator", new Object[] {}, iterator11, 1);
        Mockingbird.setReturnValue(false, iterator11, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator11, "next", "()java.lang.Object", new Object[] {}, methodCrap, 1);
        Mockingbird.setReturnValue(methodCrap.getCrap(), 1892.0F);
        Mockingbird.setReturnValue(methodCrap.getCrap(), 1892.0F);
        Mockingbird.setReturnValue(false, iterator11, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator11, "next", "()java.lang.Object", new Object[] {}, methodCrap2, 1);
        Mockingbird.setReturnValue(methodCrap2.getCrap(), 0.0F);
        Mockingbird.setReturnValue(false, iterator11, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator11, "next", "()java.lang.Object", new Object[] {}, methodCrap3, 1);
        Mockingbird.setReturnValue(methodCrap3.getCrap(), 0.0F);
        Mockingbird.setReturnValue(false, iterator11, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator11, "next", "()java.lang.Object", new Object[] {}, methodCrap4, 1);
        Mockingbird.setReturnValue(methodCrap4.getCrap(), 2.0F);
        Mockingbird.setReturnValue(false, iterator11, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator11, "next", "()java.lang.Object", new Object[] {}, methodCrap5, 1);
        Mockingbird.setReturnValue(methodCrap5.getCrap(), 0.0F);
        Mockingbird.setReturnValue(false, iterator11, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator11, "next", "()java.lang.Object", new Object[] {}, methodCrap6, 1);
        Mockingbird.setReturnValue(methodCrap6.getCrap(), 1.997003F);
        Mockingbird.setReturnValue(false, iterator11, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator11, "next", "()java.lang.Object", new Object[] {}, methodCrap7, 1);
        Mockingbird.setReturnValue(methodCrap7.getCrap(), 20.0F);
        Mockingbird.setReturnValue(false, iterator11, "hasNext", "()boolean", new Object[] {}, Boolean.FALSE, 1);
        Iterator iterator12 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.setReturnValue(false, crapValues, "iterator", "()java.util.Iterator", new Object[] {}, iterator12, 1);
        Mockingbird.setReturnValue(false, iterator12, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator12, "next", "()java.lang.Object", new Object[] {}, methodCrap, 1);
        Mockingbird.setReturnValue(methodCrap.getCrap(), 1892.0F);
        Mockingbird.setReturnValue(false, iterator12, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator12, "next", "()java.lang.Object", new Object[] {}, methodCrap2, 1);
        Mockingbird.setReturnValue(methodCrap2.getCrap(), 0.0F);
        Mockingbird.setReturnValue(false, iterator12, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator12, "next", "()java.lang.Object", new Object[] {}, methodCrap3, 1);
        Mockingbird.setReturnValue(methodCrap3.getCrap(), 0.0F);
        Mockingbird.setReturnValue(false, iterator12, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator12, "next", "()java.lang.Object", new Object[] {}, methodCrap4, 1);
        Mockingbird.setReturnValue(methodCrap4.getCrap(), 2.0F);
        Mockingbird.setReturnValue(false, iterator12, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator12, "next", "()java.lang.Object", new Object[] {}, methodCrap5, 1);
        Mockingbird.setReturnValue(methodCrap5.getCrap(), 0.0F);
        Mockingbird.setReturnValue(false, iterator12, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator12, "next", "()java.lang.Object", new Object[] {}, methodCrap6, 1);
        Mockingbird.setReturnValue(methodCrap6.getCrap(), 1.997003F);
        Mockingbird.setReturnValue(false, iterator12, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator12, "next", "()java.lang.Object", new Object[] {}, methodCrap7, 1);
        Mockingbird.setReturnValue(methodCrap7.getCrap(), 20.0F);
        Mockingbird.setReturnValue(false, iterator12, "hasNext", "()boolean", new Object[] {}, Boolean.FALSE, 1);
        Mockingbird.setReturnValue(true, Collections.class, "sort", "(java.util.List,java.util.Comparator)void", null, 1);
        Iterator iterator13 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.setReturnValue(false, crapValues, "iterator", "()java.util.Iterator", new Object[] {}, iterator13, 1);
        Mockingbird.setReturnValue(false, iterator13, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator13, "next", "()java.lang.Object", new Object[] {}, methodCrap2, 1);
        methodCrap2.toXml(null);
        Mockingbird.setNormalReturnForVoid(true);
        Mockingbird.setReturnValue(false, iterator13, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator13, "next", "()java.lang.Object", new Object[] {}, methodCrap3, 1);
        methodCrap3.toXml(null);
        Mockingbird.setNormalReturnForVoid(true);
        Mockingbird.setReturnValue(false, iterator13, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator13, "next", "()java.lang.Object", new Object[] {}, methodCrap5, 1);
        methodCrap5.toXml(null);
        Mockingbird.setNormalReturnForVoid(true);
        Mockingbird.setReturnValue(false, iterator13, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator13, "next", "()java.lang.Object", new Object[] {}, methodCrap6, 1);
        methodCrap6.toXml(null);
        Mockingbird.setNormalReturnForVoid(true);
        Mockingbird.setReturnValue(false, iterator13, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator13, "next", "()java.lang.Object", new Object[] {}, methodCrap4, 1);
        methodCrap4.toXml(null);
        Mockingbird.setNormalReturnForVoid(true);
        Mockingbird.setReturnValue(false, iterator13, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator13, "next", "()java.lang.Object", new Object[] {}, methodCrap7, 1);
        methodCrap7.toXml(null);
        Mockingbird.setNormalReturnForVoid(true);
        Mockingbird.setReturnValue(false, iterator13, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator13, "next", "()java.lang.Object", new Object[] {}, methodCrap, 1);
        methodCrap.toXml(null);
        Mockingbird.setNormalReturnForVoid(true);
        Mockingbird.setReturnValue(false, iterator13, "hasNext", "()boolean", new Object[] {}, Boolean.FALSE, 1);
        Mockingbird.enterTestMode(SystemCrapStats.class);
        String result = systemCrapStats.toXml();
        assertEquals("result", "<crap_result>\n  <stats>\n    <name>\n      testSystemCrapStatsName\n    </name>\n    <totalCrap>\n      1916.00\n    </totalCrap>\n    <crap>\n      273.71\n    </crap>\n    <median>\n      2.00\n    </median>\n    <average>\n      273.71\n    </average>\n    <stdDev>\n      660.70\n    </stdDev>\n    <methodCount>\n      7\n    </methodCount>\n    <crapMethodCount>\n      1\n    </crapMethodCount>\n    <crapMethodPercent>\n      14.29\n    </crapMethodPercent>\n    <crapLoad>\n      0\n    </crapLoad>\n    <crapThreshold>\n      100\n    </crapThreshold>\n    <histogram>\n      <hist>\n        <place>\n          one\n        </place>\n        <value>\n          4\n        </value>\n        <height>\n          170.00px\n        </height>\n      </hist>\n      <hist>\n        <place>\n          two\n        </place>\n        <value>\n          1\n        </value>\n        <height>\n          42.50px\n        </height>\n      </hist>\n      <hist>\n        <place>\n          four\n        </place>\n        <value>\n          0\n        </value>\n        <height>\n          0.00px\n        </height>\n      </hist>\n      <hist>\n        <place>\n          eight\n        </place>\n        <value>\n          0\n        </value>\n        <height>\n          0.00px\n        </height>\n      </hist>\n      <hist>\n        <place>\n          sixteen\n        </place>\n        <value>\n          1\n        </value>\n        <height>\n          42.50px\n        </height>\n      </hist>\n      <hist>\n        <place>\n          thirtytwo\n        </place>\n        <value>\n          0\n        </value>\n        <height>\n          0.00px\n        </height>\n      </hist>\n      <hist>\n        <place>\n          sixtyfour\n        </place>\n        <value>\n          0\n        </value>\n        <height>\n          0.00px\n        </height>\n      </hist>\n      <hist>\n        <place>\n          one28\n        </place>\n        <value>\n          0\n        </value>\n        <height>\n          0.00px\n        </height>\n      </hist>\n      <hist>\n        <place>\n          two56\n        </place>\n        <value>\n          1\n        </value>\n        <height>\n          42.50px\n        </height>\n      </hist>\n    </histogram>\n  </stats>\n  <methods>\n  </methods>\n</crap_result>\n", result);
        assertSame("systemCrapStats.getSubjects()", crapValues, systemCrapStats.getSubjects());
    }
    
    public void testToXml5() throws Throwable {
        MethodComplexity complexity2 = new MethodComplexity("testSystemCrapStatsMethodSignature", "testSystemCrapStatsPkgclassName", "testSystemCrapStatsMethodName", "testSystemCrapStatsMethodDescriptor", "testSystemCrapStatsJava5Signature", 100, "testSystemCrapStatsPrettyMethodSignature");
        MethodCrap methodCrap = new MethodCrap("testSystemCrapStatsMethodSignature", 1.0F, complexity2);
        List crapValues = new ArrayList(100);
        crapValues.add(methodCrap);
        crapValues.add(new MethodCrap("testSystemCrapStatsMethodSignature1", 0.0F, complexity2));
        CrapProject crapProject = new CrapProject("testSystemCrapStatsProjectDir", new ArrayList(1000), new ArrayList(0), new ArrayList(1), new ArrayList(10), "/home/agitar/work/sexy-dolphin-05-agitar-0/tmp/agitar-agitar/Agitator48455.dir/Agitator71.tmp");
        SystemCrapStats systemCrapStats = new SystemCrapStats(crapValues, "testSystemCrapStatsName", crapProject, 100.0F, 1000.0F, 0.0F);
        String result = systemCrapStats.toXml();
        assertEquals("result", "<crap_result>\n  <project>\n    testSystemCrapStatsProjectDir\n  </project>\n  <classDirectories>\n  </classDirectories>\n  <testClassDirectories>\n  </testClassDirectories>\n  <sourceDirectories>\n  </sourceDirectories>\n  <libClasspaths>\n  </libClasspaths>\n  <stats>\n    <name>\n      testSystemCrapStatsName\n    </name>\n    <totalCrap>\n      10200.00\n    </totalCrap>\n    <crap>\n      5100.00\n    </crap>\n    <median>\n      10100.00\n    </median>\n    <average>\n      5100.00\n    </average>\n    <stdDev>\n      5000.00\n    </stdDev>\n    <methodCount>\n      2\n    </methodCount>\n    <crapMethodCount>\n      2\n    </crapMethodCount>\n    <crapMethodPercent>\n      100.00\n    </crapMethodPercent>\n    <crapLoad>\n      102\n    </crapLoad>\n    <crapThreshold>\n      100\n    </crapThreshold>\n    <histogram>\n      <hist>\n        <place>\n          one\n        </place>\n        <value>\n          0\n        </value>\n        <height>\n          0.00px\n        </height>\n      </hist>\n      <hist>\n        <place>\n          two\n        </place>\n        <value>\n          0\n        </value>\n        <height>\n          0.00px\n        </height>\n      </hist>\n      <hist>\n        <place>\n          four\n        </place>\n        <value>\n          0\n        </value>\n        <height>\n          0.00px\n        </height>\n      </hist>\n      <hist>\n        <place>\n          eight\n        </place>\n        <value>\n          0\n        </value>\n        <height>\n          0.00px\n        </height>\n      </hist>\n      <hist>\n        <place>\n          sixteen\n        </place>\n        <value>\n          0\n        </value>\n        <height>\n          0.00px\n        </height>\n      </hist>\n      <hist>\n        <place>\n          thirtytwo\n        </place>\n        <value>\n          0\n        </value>\n        <height>\n          0.00px\n        </height>\n      </hist>\n      <hist>\n        <place>\n          sixtyfour\n        </place>\n        <value>\n          1\n        </value>\n        <height>\n          170.00px\n        </height>\n      </hist>\n      <hist>\n        <place>\n          one28\n        </place>\n        <value>\n          0\n        </value>\n        <height>\n          0.00px\n        </height>\n      </hist>\n      <hist>\n        <place>\n          two56\n        </place>\n        <value>\n          1\n        </value>\n        <height>\n          170.00px\n        </height>\n      </hist>\n    </histogram>\n  </stats>\n  <methods>\n    <method>\n      <package>\n        \n      </package>\n      <className>\n        testSystemCrapStatsPkgclassName\n      </className>\n      <methodName>\n        testSystemCrapStatsMethodName\n      </methodName>\n      <methodSignature>\n        testSystemCrapStatsJava5Signature\n      </methodSignature>\n      <fullMethod>\n        testSystemCrapStatsPrettyMethodSignature\n      </fullMethod>\n      <crap>\n        100.00\n      </crap>\n      <complexity>\n        100\n      </complexity>\n      <coverage>\n        100.00\n      </coverage>\n      <crapLoad>\n        1\n      </crapLoad>\n    </method>\n    <method>\n      <package>\n        \n      </package>\n      <className>\n        testSystemCrapStatsPkgclassName\n      </className>\n      <methodName>\n        testSystemCrapStatsMethodName\n      </methodName>\n      <methodSignature>\n        testSystemCrapStatsJava5Signature\n      </methodSignature>\n      <fullMethod>\n        testSystemCrapStatsPrettyMethodSignature\n      </fullMethod>\n      <crap>\n        10100.00\n      </crap>\n      <complexity>\n        100\n      </complexity>\n      <coverage>\n        0.00\n      </coverage>\n      <crapLoad>\n        101\n      </crapLoad>\n    </method>\n  </methods>\n</crap_result>\n", result);
        assertSame("systemCrapStats.getSubjects()", crapValues, systemCrapStats.getSubjects());
    }
    
    public void testToXml6() throws Throwable {
        ArrayList crapValues = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        CrapProject crapProject = (CrapProject) Mockingbird.getProxyObject(CrapProject.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, crapValues, "size", "()int", new Object[] {}, new Integer(4), 1);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.setReturnValue(false, crapValues, "iterator", "()java.util.Iterator", new Object[] {}, iterator, 1);
        Mockingbird.setReturnValue(false, iterator, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        MethodCrap methodCrap = (MethodCrap) Mockingbird.getProxyObject(MethodCrap.class);
        Mockingbird.setReturnValue(false, iterator, "next", "()java.lang.Object", new Object[] {}, methodCrap, 1);
        Mockingbird.setReturnValue(methodCrap.getCrap(), 1.0F);
        Mockingbird.setReturnValue(false, iterator, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        MethodCrap methodCrap2 = (MethodCrap) Mockingbird.getProxyObject(MethodCrap.class);
        Mockingbird.setReturnValue(false, iterator, "next", "()java.lang.Object", new Object[] {}, methodCrap2, 1);
        Mockingbird.setReturnValue(methodCrap2.getCrap(), 1.997003F);
        Mockingbird.setReturnValue(false, iterator, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        MethodCrap methodCrap3 = (MethodCrap) Mockingbird.getProxyObject(MethodCrap.class);
        Mockingbird.setReturnValue(false, iterator, "next", "()java.lang.Object", new Object[] {}, methodCrap3, 1);
        Mockingbird.setReturnValue(methodCrap3.getCrap(), 2100.761F);
        Mockingbird.setReturnValue(false, iterator, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        MethodCrap methodCrap4 = (MethodCrap) Mockingbird.getProxyObject(MethodCrap.class);
        Mockingbird.setReturnValue(false, iterator, "next", "()java.lang.Object", new Object[] {}, methodCrap4, 1);
        Mockingbird.setReturnValue(methodCrap4.getCrap(), 1.0423028F);
        Mockingbird.setReturnValue(false, iterator, "hasNext", "()boolean", new Object[] {}, Boolean.FALSE, 1);
        Mockingbird.setReturnValue(false, crapValues, "size", "()int", new Object[] {}, new Integer(4), 1);
        Mockingbird.setReturnValue(false, crapValues, "size", "()int", new Object[] {}, new Integer(4), 1);
        Mockingbird.setReturnValue(false, crapValues, "get", "(int)java.lang.Object", new Object[] {new Integer(0)}, methodCrap, 1);
        Mockingbird.setReturnValue(methodCrap.getCrap(), 1.0F);
        Mockingbird.setReturnValue(false, crapValues, "size", "()int", new Object[] {}, new Integer(4), 1);
        Mockingbird.setReturnValue(false, crapValues, "get", "(int)java.lang.Object", new Object[] {new Integer(1)}, methodCrap2, 1);
        Mockingbird.setReturnValue(methodCrap2.getCrap(), 1.997003F);
        Mockingbird.setReturnValue(false, crapValues, "size", "()int", new Object[] {}, new Integer(4), 1);
        Mockingbird.setReturnValue(false, crapValues, "get", "(int)java.lang.Object", new Object[] {new Integer(2)}, methodCrap3, 1);
        Mockingbird.setReturnValue(methodCrap3.getCrap(), 2100.761F);
        Mockingbird.setReturnValue(false, crapValues, "size", "()int", new Object[] {}, new Integer(4), 1);
        Mockingbird.setReturnValue(false, crapValues, "get", "(int)java.lang.Object", new Object[] {new Integer(3)}, methodCrap4, 1);
        Mockingbird.setReturnValue(methodCrap4.getCrap(), 1.0423028F);
        Mockingbird.setReturnValue(false, crapValues, "size", "()int", new Object[] {}, new Integer(4), 1);
        Mockingbird.setReturnValue(false, crapValues, "size", "()int", new Object[] {}, new Integer(4), 1);
        Mockingbird.setReturnValue(false, crapValues, "size", "()int", new Object[] {}, new Integer(4), 1);
        Mockingbird.setReturnValue(false, crapValues, "get", "(int)java.lang.Object", new Object[] {new Integer(0)}, methodCrap, 1);
        Mockingbird.setReturnValue(methodCrap.getCrap(), 1.0F);
        Mockingbird.setReturnValue(false, crapValues, "size", "()int", new Object[] {}, new Integer(4), 1);
        Mockingbird.setReturnValue(false, crapValues, "get", "(int)java.lang.Object", new Object[] {new Integer(1)}, methodCrap2, 1);
        Mockingbird.setReturnValue(methodCrap2.getCrap(), 1.997003F);
        Mockingbird.setReturnValue(false, crapValues, "size", "()int", new Object[] {}, new Integer(4), 1);
        Mockingbird.setReturnValue(false, crapValues, "get", "(int)java.lang.Object", new Object[] {new Integer(2)}, methodCrap3, 1);
        Mockingbird.setReturnValue(methodCrap3.getCrap(), 2100.761F);
        Mockingbird.setReturnValue(false, crapValues, "size", "()int", new Object[] {}, new Integer(4), 1);
        Mockingbird.setReturnValue(false, crapValues, "get", "(int)java.lang.Object", new Object[] {new Integer(3)}, methodCrap4, 1);
        Mockingbird.setReturnValue(methodCrap4.getCrap(), 1.0423028F);
        Mockingbird.setReturnValue(false, crapValues, "size", "()int", new Object[] {}, new Integer(4), 1);
        Iterator iterator2 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.setReturnValue(false, crapValues, "iterator", "()java.util.Iterator", new Object[] {}, iterator2, 1);
        Mockingbird.setReturnValue(false, iterator2, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator2, "next", "()java.lang.Object", new Object[] {}, methodCrap, 1);
        Mockingbird.setReturnValue(methodCrap.getCrap(), 1.0F);
        Mockingbird.setReturnValue(false, iterator2, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator2, "next", "()java.lang.Object", new Object[] {}, methodCrap2, 1);
        Mockingbird.setReturnValue(methodCrap2.getCrap(), 1.997003F);
        Mockingbird.setReturnValue(false, iterator2, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator2, "next", "()java.lang.Object", new Object[] {}, methodCrap3, 1);
        Mockingbird.setReturnValue(methodCrap3.getCrap(), 2100.761F);
        Mockingbird.setReturnValue(false, iterator2, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator2, "next", "()java.lang.Object", new Object[] {}, methodCrap4, 1);
        Mockingbird.setReturnValue(methodCrap4.getCrap(), 1.0423028F);
        Mockingbird.setReturnValue(false, iterator2, "hasNext", "()boolean", new Object[] {}, Boolean.FALSE, 1);
        Iterator iterator3 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.setReturnValue(false, crapValues, "iterator", "()java.util.Iterator", new Object[] {}, iterator3, 1);
        Mockingbird.setReturnValue(false, iterator3, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator3, "next", "()java.lang.Object", new Object[] {}, methodCrap, 1);
        Mockingbird.setReturnValue(methodCrap.getCrapLoad(-2.14748365E9F), 0);
        Mockingbird.setReturnValue(false, iterator3, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator3, "next", "()java.lang.Object", new Object[] {}, methodCrap2, 1);
        Mockingbird.setReturnValue(methodCrap2.getCrapLoad(-2.14748365E9F), 0);
        Mockingbird.setReturnValue(false, iterator3, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator3, "next", "()java.lang.Object", new Object[] {}, methodCrap3, 1);
        Mockingbird.setReturnValue(methodCrap3.getCrapLoad(-2.14748365E9F), 47);
        Mockingbird.setReturnValue(false, iterator3, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator3, "next", "()java.lang.Object", new Object[] {}, methodCrap4, 1);
        Mockingbird.setReturnValue(methodCrap4.getCrapLoad(-2.14748365E9F), 0);
        Mockingbird.setReturnValue(false, iterator3, "hasNext", "()boolean", new Object[] {}, Boolean.FALSE, 1);
        Mockingbird.enterTestMode(SystemCrapStats.class);
        SystemCrapStats systemCrapStats = new SystemCrapStats(crapValues, "testSystemCrapStatsName", crapProject, 100.0F, 1000.0F, 0.0F);
        Mockingbird.enterRecordingMode();
        crapProject.toXml(null);
        Mockingbird.setNormalReturnForVoid(true);
        Iterator iterator4 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.setReturnValue(false, crapValues, "iterator", "()java.util.Iterator", new Object[] {}, iterator4, 1);
        Mockingbird.setReturnValue(false, iterator4, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator4, "next", "()java.lang.Object", new Object[] {}, methodCrap, 1);
        Mockingbird.setReturnValue(methodCrap.getCrap(), 1.0F);
        Mockingbird.setReturnValue(false, iterator4, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator4, "next", "()java.lang.Object", new Object[] {}, methodCrap2, 1);
        Mockingbird.setReturnValue(methodCrap2.getCrap(), 1.997003F);
        Mockingbird.setReturnValue(false, iterator4, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator4, "next", "()java.lang.Object", new Object[] {}, methodCrap3, 1);
        Mockingbird.setReturnValue(methodCrap3.getCrap(), 2100.761F);
        Mockingbird.setReturnValue(false, iterator4, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator4, "next", "()java.lang.Object", new Object[] {}, methodCrap4, 1);
        Mockingbird.setReturnValue(methodCrap4.getCrap(), 1.0423028F);
        Mockingbird.setReturnValue(false, iterator4, "hasNext", "()boolean", new Object[] {}, Boolean.FALSE, 1);
        Iterator iterator5 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.setReturnValue(false, crapValues, "iterator", "()java.util.Iterator", new Object[] {}, iterator5, 1);
        Mockingbird.setReturnValue(false, iterator5, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator5, "next", "()java.lang.Object", new Object[] {}, methodCrap, 1);
        Mockingbird.setReturnValue(methodCrap.getCrap(), 1.0F);
        Mockingbird.setReturnValue(false, iterator5, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator5, "next", "()java.lang.Object", new Object[] {}, methodCrap2, 1);
        Mockingbird.setReturnValue(methodCrap2.getCrap(), 1.997003F);
        Mockingbird.setReturnValue(false, iterator5, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator5, "next", "()java.lang.Object", new Object[] {}, methodCrap3, 1);
        Mockingbird.setReturnValue(methodCrap3.getCrap(), 2100.761F);
        Mockingbird.setReturnValue(methodCrap3.getCrap(), 2100.761F);
        Mockingbird.setReturnValue(false, iterator5, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator5, "next", "()java.lang.Object", new Object[] {}, methodCrap4, 1);
        Mockingbird.setReturnValue(methodCrap4.getCrap(), 1.0423028F);
        Mockingbird.setReturnValue(false, iterator5, "hasNext", "()boolean", new Object[] {}, Boolean.FALSE, 1);
        Iterator iterator6 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.setReturnValue(false, crapValues, "iterator", "()java.util.Iterator", new Object[] {}, iterator6, 1);
        Mockingbird.setReturnValue(false, iterator6, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator6, "next", "()java.lang.Object", new Object[] {}, methodCrap, 1);
        Mockingbird.setReturnValue(methodCrap.getCrap(), 1.0F);
        Mockingbird.setReturnValue(false, iterator6, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator6, "next", "()java.lang.Object", new Object[] {}, methodCrap2, 1);
        Mockingbird.setReturnValue(methodCrap2.getCrap(), 1.997003F);
        Mockingbird.setReturnValue(false, iterator6, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator6, "next", "()java.lang.Object", new Object[] {}, methodCrap3, 1);
        Mockingbird.setReturnValue(methodCrap3.getCrap(), 2100.761F);
        Mockingbird.setReturnValue(methodCrap3.getCrap(), 2100.761F);
        Mockingbird.setReturnValue(false, iterator6, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator6, "next", "()java.lang.Object", new Object[] {}, methodCrap4, 1);
        Mockingbird.setReturnValue(methodCrap4.getCrap(), 1.0423028F);
        Mockingbird.setReturnValue(false, iterator6, "hasNext", "()boolean", new Object[] {}, Boolean.FALSE, 1);
        Iterator iterator7 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.setReturnValue(false, crapValues, "iterator", "()java.util.Iterator", new Object[] {}, iterator7, 1);
        Mockingbird.setReturnValue(false, iterator7, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator7, "next", "()java.lang.Object", new Object[] {}, methodCrap, 1);
        Mockingbird.setReturnValue(methodCrap.getCrap(), 1.0F);
        Mockingbird.setReturnValue(false, iterator7, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator7, "next", "()java.lang.Object", new Object[] {}, methodCrap2, 1);
        Mockingbird.setReturnValue(methodCrap2.getCrap(), 1.997003F);
        Mockingbird.setReturnValue(false, iterator7, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator7, "next", "()java.lang.Object", new Object[] {}, methodCrap3, 1);
        Mockingbird.setReturnValue(methodCrap3.getCrap(), 2100.761F);
        Mockingbird.setReturnValue(methodCrap3.getCrap(), 2100.761F);
        Mockingbird.setReturnValue(false, iterator7, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator7, "next", "()java.lang.Object", new Object[] {}, methodCrap4, 1);
        Mockingbird.setReturnValue(methodCrap4.getCrap(), 1.0423028F);
        Mockingbird.setReturnValue(false, iterator7, "hasNext", "()boolean", new Object[] {}, Boolean.FALSE, 1);
        Iterator iterator8 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.setReturnValue(false, crapValues, "iterator", "()java.util.Iterator", new Object[] {}, iterator8, 1);
        Mockingbird.setReturnValue(false, iterator8, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator8, "next", "()java.lang.Object", new Object[] {}, methodCrap, 1);
        Mockingbird.setReturnValue(methodCrap.getCrap(), 1.0F);
        Mockingbird.setReturnValue(false, iterator8, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator8, "next", "()java.lang.Object", new Object[] {}, methodCrap2, 1);
        Mockingbird.setReturnValue(methodCrap2.getCrap(), 1.997003F);
        Mockingbird.setReturnValue(false, iterator8, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator8, "next", "()java.lang.Object", new Object[] {}, methodCrap3, 1);
        Mockingbird.setReturnValue(methodCrap3.getCrap(), 2100.761F);
        Mockingbird.setReturnValue(methodCrap3.getCrap(), 2100.761F);
        Mockingbird.setReturnValue(false, iterator8, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator8, "next", "()java.lang.Object", new Object[] {}, methodCrap4, 1);
        Mockingbird.setReturnValue(methodCrap4.getCrap(), 1.0423028F);
        Mockingbird.setReturnValue(false, iterator8, "hasNext", "()boolean", new Object[] {}, Boolean.FALSE, 1);
        Iterator iterator9 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.setReturnValue(false, crapValues, "iterator", "()java.util.Iterator", new Object[] {}, iterator9, 1);
        Mockingbird.setReturnValue(false, iterator9, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator9, "next", "()java.lang.Object", new Object[] {}, methodCrap, 1);
        Mockingbird.setReturnValue(methodCrap.getCrap(), 1.0F);
        Mockingbird.setReturnValue(false, iterator9, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator9, "next", "()java.lang.Object", new Object[] {}, methodCrap2, 1);
        Mockingbird.setReturnValue(methodCrap2.getCrap(), 1.997003F);
        Mockingbird.setReturnValue(false, iterator9, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator9, "next", "()java.lang.Object", new Object[] {}, methodCrap3, 1);
        Mockingbird.setReturnValue(methodCrap3.getCrap(), 2100.761F);
        Mockingbird.setReturnValue(methodCrap3.getCrap(), 2100.761F);
        Mockingbird.setReturnValue(false, iterator9, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator9, "next", "()java.lang.Object", new Object[] {}, methodCrap4, 1);
        Mockingbird.setReturnValue(methodCrap4.getCrap(), 1.0423028F);
        Mockingbird.setReturnValue(false, iterator9, "hasNext", "()boolean", new Object[] {}, Boolean.FALSE, 1);
        Iterator iterator10 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.setReturnValue(false, crapValues, "iterator", "()java.util.Iterator", new Object[] {}, iterator10, 1);
        Mockingbird.setReturnValue(false, iterator10, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator10, "next", "()java.lang.Object", new Object[] {}, methodCrap, 1);
        Mockingbird.setReturnValue(methodCrap.getCrap(), 1.0F);
        Mockingbird.setReturnValue(false, iterator10, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator10, "next", "()java.lang.Object", new Object[] {}, methodCrap2, 1);
        Mockingbird.setReturnValue(methodCrap2.getCrap(), 1.997003F);
        Mockingbird.setReturnValue(false, iterator10, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator10, "next", "()java.lang.Object", new Object[] {}, methodCrap3, 1);
        Mockingbird.setReturnValue(methodCrap3.getCrap(), 2100.761F);
        Mockingbird.setReturnValue(methodCrap3.getCrap(), 2100.761F);
        Mockingbird.setReturnValue(false, iterator10, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator10, "next", "()java.lang.Object", new Object[] {}, methodCrap4, 1);
        Mockingbird.setReturnValue(methodCrap4.getCrap(), 1.0423028F);
        Mockingbird.setReturnValue(false, iterator10, "hasNext", "()boolean", new Object[] {}, Boolean.FALSE, 1);
        Iterator iterator11 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.setReturnValue(false, crapValues, "iterator", "()java.util.Iterator", new Object[] {}, iterator11, 1);
        Mockingbird.setReturnValue(false, iterator11, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator11, "next", "()java.lang.Object", new Object[] {}, methodCrap, 1);
        Mockingbird.setReturnValue(methodCrap.getCrap(), 1.0F);
        Mockingbird.setReturnValue(false, iterator11, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator11, "next", "()java.lang.Object", new Object[] {}, methodCrap2, 1);
        Mockingbird.setReturnValue(methodCrap2.getCrap(), 1.997003F);
        Mockingbird.setReturnValue(false, iterator11, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator11, "next", "()java.lang.Object", new Object[] {}, methodCrap3, 1);
        Mockingbird.setReturnValue(methodCrap3.getCrap(), 2100.761F);
        Mockingbird.setReturnValue(methodCrap3.getCrap(), 2100.761F);
        Mockingbird.setReturnValue(false, iterator11, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator11, "next", "()java.lang.Object", new Object[] {}, methodCrap4, 1);
        Mockingbird.setReturnValue(methodCrap4.getCrap(), 1.0423028F);
        Mockingbird.setReturnValue(false, iterator11, "hasNext", "()boolean", new Object[] {}, Boolean.FALSE, 1);
        Iterator iterator12 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.setReturnValue(false, crapValues, "iterator", "()java.util.Iterator", new Object[] {}, iterator12, 1);
        Mockingbird.setReturnValue(false, iterator12, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator12, "next", "()java.lang.Object", new Object[] {}, methodCrap, 1);
        Mockingbird.setReturnValue(methodCrap.getCrap(), 1.0F);
        Mockingbird.setReturnValue(false, iterator12, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator12, "next", "()java.lang.Object", new Object[] {}, methodCrap2, 1);
        Mockingbird.setReturnValue(methodCrap2.getCrap(), 1.997003F);
        Mockingbird.setReturnValue(false, iterator12, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator12, "next", "()java.lang.Object", new Object[] {}, methodCrap3, 1);
        Mockingbird.setReturnValue(methodCrap3.getCrap(), 2100.761F);
        Mockingbird.setReturnValue(false, iterator12, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator12, "next", "()java.lang.Object", new Object[] {}, methodCrap4, 1);
        Mockingbird.setReturnValue(methodCrap4.getCrap(), 1.0423028F);
        Mockingbird.setReturnValue(false, iterator12, "hasNext", "()boolean", new Object[] {}, Boolean.FALSE, 1);
        Mockingbird.setReturnValue(true, Collections.class, "sort", "(java.util.List,java.util.Comparator)void", null, 1);
        Iterator iterator13 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.setReturnValue(false, crapValues, "iterator", "()java.util.Iterator", new Object[] {}, iterator13, 1);
        Mockingbird.setReturnValue(false, iterator13, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator13, "next", "()java.lang.Object", new Object[] {}, methodCrap, 1);
        methodCrap.toXml(null);
        Mockingbird.setNormalReturnForVoid(true);
        Mockingbird.setReturnValue(false, iterator13, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator13, "next", "()java.lang.Object", new Object[] {}, methodCrap4, 1);
        methodCrap4.toXml(null);
        Mockingbird.setNormalReturnForVoid(true);
        Mockingbird.setReturnValue(false, iterator13, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator13, "next", "()java.lang.Object", new Object[] {}, methodCrap2, 1);
        methodCrap2.toXml(null);
        Mockingbird.setNormalReturnForVoid(true);
        Mockingbird.setReturnValue(false, iterator13, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator13, "next", "()java.lang.Object", new Object[] {}, methodCrap3, 1);
        methodCrap3.toXml(null);
        Mockingbird.setNormalReturnForVoid(true);
        Mockingbird.setReturnValue(false, iterator13, "hasNext", "()boolean", new Object[] {}, Boolean.FALSE, 1);
        Mockingbird.enterTestMode(SystemCrapStats.class);
        String result = systemCrapStats.toXml();
        assertEquals("result", "<crap_result>\n  <stats>\n    <name>\n      testSystemCrapStatsName\n    </name>\n    <totalCrap>\n      2104.80\n    </totalCrap>\n    <crap>\n      526.20\n    </crap>\n    <median>\n      2.00\n    </median>\n    <average>\n      526.20\n    </average>\n    <stdDev>\n      909.07\n    </stdDev>\n    <methodCount>\n      4\n    </methodCount>\n    <crapMethodCount>\n      1\n    </crapMethodCount>\n    <crapMethodPercent>\n      25.00\n    </crapMethodPercent>\n    <crapLoad>\n      0\n    </crapLoad>\n    <crapThreshold>\n      100\n    </crapThreshold>\n    <histogram>\n      <hist>\n        <place>\n          one\n        </place>\n        <value>\n          3\n        </value>\n        <height>\n          170.00px\n        </height>\n      </hist>\n      <hist>\n        <place>\n          two\n        </place>\n        <value>\n          0\n        </value>\n        <height>\n          0.00px\n        </height>\n      </hist>\n      <hist>\n        <place>\n          four\n        </place>\n        <value>\n          0\n        </value>\n        <height>\n          0.00px\n        </height>\n      </hist>\n      <hist>\n        <place>\n          eight\n        </place>\n        <value>\n          0\n        </value>\n        <height>\n          0.00px\n        </height>\n      </hist>\n      <hist>\n        <place>\n          sixteen\n        </place>\n        <value>\n          0\n        </value>\n        <height>\n          0.00px\n        </height>\n      </hist>\n      <hist>\n        <place>\n          thirtytwo\n        </place>\n        <value>\n          0\n        </value>\n        <height>\n          0.00px\n        </height>\n      </hist>\n      <hist>\n        <place>\n          sixtyfour\n        </place>\n        <value>\n          0\n        </value>\n        <height>\n          0.00px\n        </height>\n      </hist>\n      <hist>\n        <place>\n          one28\n        </place>\n        <value>\n          0\n        </value>\n        <height>\n          0.00px\n        </height>\n      </hist>\n      <hist>\n        <place>\n          two56\n        </place>\n        <value>\n          1\n        </value>\n        <height>\n          56.67px\n        </height>\n      </hist>\n    </histogram>\n  </stats>\n  <methods>\n  </methods>\n</crap_result>\n", result);
        assertSame("systemCrapStats.getSubjects()", crapValues, systemCrapStats.getSubjects());
    }
    
    public void testToXml7() throws Throwable {
        CrapProject crapProject = new CrapProject("testSystemCrapStatsProjectDir", new ArrayList(100), new ArrayList(1000), new ArrayList(0), new ArrayList(1), "/home/agitar/work/sexy-dolphin-05-agitar-0/tmp/agitar-agitar/Agitator48455.dir/Agitator71.tmp");
        List crapValues = new ArrayList(10);
        MethodComplexity complexity2 = new MethodComplexity("testSystemCrapStatsMethodSignature", "testSystemCrapStatsPkgclassName", "testSystemCrapStatsMethodName", "testSystemCrapStatsMethodDescriptor", "testSystemCrapStatsJava5Signature", 0, "testSystemCrapStatsPrettyMethodSignature");
        MethodComplexity complexity2_2 = new MethodComplexity("testSystemCrapStatsMethodSignature1", "testSystemCrapStatsPkgclassName1", "testSystemCrapStatsMethodName1", "testSystemCrapStatsMethodDescriptor1", "testSystemCrapStatsJava5Signature1", 10, "testSystemCrapStatsPrettyMethodSignature1");
        crapValues.add(new MethodCrap("testSystemCrapStatsMethodSignature", 0.0F, complexity2));
        crapValues.add(new MethodCrap("testSystemCrapStatsMethodSignature1", 1.0F, complexity2_2));
        SystemCrapStats systemCrapStats = new SystemCrapStats(crapValues, "testSystemCrapStatsName", crapProject, 100.0F, 1000.0F, 0.0F);
        String result = systemCrapStats.toXml();
        assertEquals("result", "<crap_result>\n  <project>\n    testSystemCrapStatsProjectDir\n  </project>\n  <classDirectories>\n  </classDirectories>\n  <testClassDirectories>\n  </testClassDirectories>\n  <sourceDirectories>\n  </sourceDirectories>\n  <libClasspaths>\n  </libClasspaths>\n  <stats>\n    <name>\n      testSystemCrapStatsName\n    </name>\n    <totalCrap>\n      10.00\n    </totalCrap>\n    <crap>\n      5.00\n    </crap>\n    <median>\n      10.00\n    </median>\n    <average>\n      5.00\n    </average>\n    <stdDev>\n      5.00\n    </stdDev>\n    <methodCount>\n      2\n    </methodCount>\n    <crapMethodCount>\n      0\n    </crapMethodCount>\n    <crapMethodPercent>\n      0.00\n    </crapMethodPercent>\n    <crapLoad>\n      0\n    </crapLoad>\n    <crapThreshold>\n      100\n    </crapThreshold>\n    <histogram>\n      <hist>\n        <place>\n          one\n        </place>\n        <value>\n          1\n        </value>\n        <height>\n          170.00px\n        </height>\n      </hist>\n      <hist>\n        <place>\n          two\n        </place>\n        <value>\n          0\n        </value>\n        <height>\n          0.00px\n        </height>\n      </hist>\n      <hist>\n        <place>\n          four\n        </place>\n        <value>\n          0\n        </value>\n        <height>\n          0.00px\n        </height>\n      </hist>\n      <hist>\n        <place>\n          eight\n        </place>\n        <value>\n          1\n        </value>\n        <height>\n          170.00px\n        </height>\n      </hist>\n      <hist>\n        <place>\n          sixteen\n        </place>\n        <value>\n          0\n        </value>\n        <height>\n          0.00px\n        </height>\n      </hist>\n      <hist>\n        <place>\n          thirtytwo\n        </place>\n        <value>\n          0\n        </value>\n        <height>\n          0.00px\n        </height>\n      </hist>\n      <hist>\n        <place>\n          sixtyfour\n        </place>\n        <value>\n          0\n        </value>\n        <height>\n          0.00px\n        </height>\n      </hist>\n      <hist>\n        <place>\n          one28\n        </place>\n        <value>\n          0\n        </value>\n        <height>\n          0.00px\n        </height>\n      </hist>\n      <hist>\n        <place>\n          two56\n        </place>\n        <value>\n          0\n        </value>\n        <height>\n          0.00px\n        </height>\n      </hist>\n    </histogram>\n  </stats>\n  <methods>\n    <method>\n      <package>\n        \n      </package>\n      <className>\n        testSystemCrapStatsPkgclassName\n      </className>\n      <methodName>\n        testSystemCrapStatsMethodName\n      </methodName>\n      <methodSignature>\n        testSystemCrapStatsJava5Signature\n      </methodSignature>\n      <fullMethod>\n        testSystemCrapStatsPrettyMethodSignature\n      </fullMethod>\n      <crap>\n        0.00\n      </crap>\n      <complexity>\n        0\n      </complexity>\n      <coverage>\n        0.00\n      </coverage>\n      <crapLoad>\n        0\n      </crapLoad>\n    </method>\n    <method>\n      <package>\n        \n      </package>\n      <className>\n        testSystemCrapStatsPkgclassName1\n      </className>\n      <methodName>\n        testSystemCrapStatsMethodName1\n      </methodName>\n      <methodSignature>\n        testSystemCrapStatsJava5Signature1\n      </methodSignature>\n      <fullMethod>\n        testSystemCrapStatsPrettyMethodSignature1\n      </fullMethod>\n      <crap>\n        10.00\n      </crap>\n      <complexity>\n        10\n      </complexity>\n      <coverage>\n        100.00\n      </coverage>\n      <crapLoad>\n        0\n      </crapLoad>\n    </method>\n  </methods>\n</crap_result>\n", result);
        assertSame("systemCrapStats.getSubjects()", crapValues, systemCrapStats.getSubjects());
    }
    
    public void testToXml8() throws Throwable {
        CrapProject crapProject = new CrapProject("testSystemCrapStatsProjectDir", new ArrayList(100), new ArrayList(1000), new ArrayList(0), new ArrayList(1), "/home/agitar/work/sexy-dolphin-05-agitar-0/tmp/agitar-agitar/Agitator48455.dir/Agitator71.tmp");
        List crapValues = new ArrayList(10);
        SystemCrapStats systemCrapStats = new SystemCrapStats(crapValues, "testSystemCrapStatsName", crapProject, 100.0F, 1000.0F, 0.0F);
        String result = systemCrapStats.toXml();
        assertEquals("result", "<crap_result>\n  <project>\n    testSystemCrapStatsProjectDir\n  </project>\n  <classDirectories>\n  </classDirectories>\n  <testClassDirectories>\n  </testClassDirectories>\n  <sourceDirectories>\n  </sourceDirectories>\n  <libClasspaths>\n  </libClasspaths>\n  <stats>\n    <name>\n      testSystemCrapStatsName\n    </name>\n    <totalCrap>\n      0.00\n    </totalCrap>\n    <crap>\n      \uFFFD\n    </crap>\n    <median>\n      0.00\n    </median>\n    <average>\n      \uFFFD\n    </average>\n    <stdDev>\n      \uFFFD\n    </stdDev>\n    <methodCount>\n      0\n    </methodCount>\n    <crapMethodCount>\n      0\n    </crapMethodCount>\n    <crapMethodPercent>\n      \uFFFD\n    </crapMethodPercent>\n    <crapLoad>\n      0\n    </crapLoad>\n    <crapThreshold>\n      100\n    </crapThreshold>\n    <histogram>\n      <hist>\n        <place>\n          one\n        </place>\n        <value>\n          0\n        </value>\n        <height>\n          0.00px\n        </height>\n      </hist>\n      <hist>\n        <place>\n          two\n        </place>\n        <value>\n          0\n        </value>\n        <height>\n          0.00px\n        </height>\n      </hist>\n      <hist>\n        <place>\n          four\n        </place>\n        <value>\n          0\n        </value>\n        <height>\n          0.00px\n        </height>\n      </hist>\n      <hist>\n        <place>\n          eight\n        </place>\n        <value>\n          0\n        </value>\n        <height>\n          0.00px\n        </height>\n      </hist>\n      <hist>\n        <place>\n          sixteen\n        </place>\n        <value>\n          0\n        </value>\n        <height>\n          0.00px\n        </height>\n      </hist>\n      <hist>\n        <place>\n          thirtytwo\n        </place>\n        <value>\n          0\n        </value>\n        <height>\n          0.00px\n        </height>\n      </hist>\n      <hist>\n        <place>\n          sixtyfour\n        </place>\n        <value>\n          0\n        </value>\n        <height>\n          0.00px\n        </height>\n      </hist>\n      <hist>\n        <place>\n          one28\n        </place>\n        <value>\n          0\n        </value>\n        <height>\n          0.00px\n        </height>\n      </hist>\n      <hist>\n        <place>\n          two56\n        </place>\n        <value>\n          0\n        </value>\n        <height>\n          0.00px\n        </height>\n      </hist>\n    </histogram>\n  </stats>\n  <methods>\n  </methods>\n</crap_result>\n", result);
        assertSame("systemCrapStats.getSubjects()", crapValues, systemCrapStats.getSubjects());
    }
    
    public void testValidateParams() throws Throwable {
        SystemCrapStats systemCrapStats = new SystemCrapStats(new ArrayList(1000), "testSystemCrapStatsName", null, 100.0F, 1000.0F, 0.0F);
        callPrivateMethod("org.crap4j.SystemCrapStats", "validateParams", new Class[] {List.class}, systemCrapStats, new Object[] {new ArrayList(100)});
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testWriteXmlToFile() throws Throwable {
        CrapProject crapProject = new CrapProject("testSystemCrapStatsProjectDir", new ArrayList(1000), new ArrayList(0), new ArrayList(1), new ArrayList(10), "/home/agitar/work/sexy-dolphin-05-agitar-0/tmp/agitar-agitar/Agitator48455.dir/Agitator71.tmp");
        SystemCrapStats systemCrapStats = new SystemCrapStats(new ArrayList(100), "testSystemCrapStatsName", crapProject, 100.0F, 1000.0F, 0.0F);
        systemCrapStats.writeXmlToFile("testSystemCrapStatsStatsXml");
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testConstructorThrowsIllegalArgumentException() throws Throwable {
        CrapProject crapProject = new CrapProject("testSystemCrapStatsProjectDir", new ArrayList(100), new ArrayList(1000), new ArrayList(0), new ArrayList(1), "/home/agitar/work/sexy-dolphin-05-agitar-0/tmp/agitar-agitar/Agitator48455.dir/Agitator71.tmp");
        try {
            new SystemCrapStats(null, "testSystemCrapStatsName", crapProject, 100.0F, 1000.0F, 0.0F);
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertEquals("ex.getMessage()", "Cannot compute for null values", ex.getMessage());
            assertThrownBy(SystemCrapStats.class, ex);
        }
    }
    
    public void testConstructorThrowsNullPointerException() throws Throwable {
        CrapProject crapProject = new CrapProject("testSystemCrapStatsProjectDir", new ArrayList(100), new ArrayList(1000), new ArrayList(0), new ArrayList(1), "/home/agitar/work/sexy-dolphin-05-agitar-0/tmp/agitar-agitar/Agitator48455.dir/Agitator71.tmp");
        List crapValues = new ArrayList(10);
        crapValues.add(null);
        try {
            new SystemCrapStats(crapValues, "testSystemCrapStatsName", crapProject, 100.0F, 1000.0F, 0.0F);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(SystemCrapStats.class, ex);
            assertEquals("(ArrayList) crapValues.size()", 1, crapValues.size());
        }
    }
    
    public void testConstructorThrowsNullPointerException1() throws Throwable {
        MethodComplexity complexity2 = new MethodComplexity("testSystemCrapStatsMethodSignature", "testSystemCrapStatsPkgclassName", "testSystemCrapStatsMethodName", "testSystemCrapStatsMethodDescriptor", "testSystemCrapStatsJava5Signature", 100, "testSystemCrapStatsPrettyMethodSignature");
        CrapProject crapProject = new CrapProject("testSystemCrapStatsProjectDir", new ArrayList(100), new ArrayList(1000), new ArrayList(0), new ArrayList(1), "/home/agitar/work/sexy-dolphin-05-agitar-0/tmp/agitar-agitar/Agitator48455.dir/Agitator71.tmp");
        List crapValues = new ArrayList(10);
        crapValues.add(new MethodCrap("testSystemCrapStatsMethodSignature", 0.0F, complexity2));
        crapValues.add(null);
        try {
            new SystemCrapStats(crapValues, "testSystemCrapStatsName", crapProject, 100.0F, 1000.0F, 0.0F);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(SystemCrapStats.class, ex);
            assertEquals("(ArrayList) crapValues.size()", 2, crapValues.size());
        }
    }
    
    public void testComputeCrapWorkLoadThrowsNullPointerException() throws Throwable {
        CrapProject crapProject = new CrapProject("testSystemCrapStatsProjectDir", new ArrayList(100), new ArrayList(1000), new ArrayList(0), new ArrayList(1), "/home/agitar/work/sexy-dolphin-05-agitar-0/tmp/agitar-agitar/Agitator48455.dir/Agitator71.tmp");
        SystemCrapStats systemCrapStats = new SystemCrapStats(new ArrayList(10), "testSystemCrapStatsName", crapProject, 100.0F, 1000.0F, 0.0F);
        try {
            callPrivateMethod("org.crap4j.SystemCrapStats", "computeCrapWorkLoad", new Class[] {List.class}, systemCrapStats, new Object[] {null});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(SystemCrapStats.class, ex);
        }
    }
    
    public void testComputeTotalCrapThrowsNullPointerException() throws Throwable {
        SystemCrapStats systemCrapStats = new SystemCrapStats(new ArrayList(100), "testSystemCrapStatsName", null, 100.0F, 1000.0F, 0.0F);
        try {
            callPrivateMethod("org.crap4j.SystemCrapStats", "computeTotalCrap", new Class[] {List.class}, systemCrapStats, new Object[] {null});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(SystemCrapStats.class, ex);
        }
    }
    
    public void testCopyFileThrowsNullPointerException() throws Throwable {
        CrapProject crapProject = new CrapProject("testSystemCrapStatsProjectDir", new ArrayList(100), new ArrayList(1000), new ArrayList(0), new ArrayList(1), "/home/agitar/work/sexy-dolphin-05-agitar-0/tmp/agitar-agitar/Agitator48455.dir/Agitator71.tmp");
        SystemCrapStats systemCrapStats = new SystemCrapStats(new ArrayList(10), "testSystemCrapStatsName", crapProject, 100.0F, 1000.0F, 0.0F);
        byte[] bytes = new byte[3];
        try {
            systemCrapStats.copyFile(new ByteArrayInputStream(bytes), null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertEquals("ex.getMessage()", "name can't be null", ex.getMessage());
            assertThrownBy(FilePermission.class, ex);
        }
    }
    
    public void testCountCrapMethodsThrowsNullPointerException() throws Throwable {
        CrapProject crapProject = new CrapProject("testSystemCrapStatsProjectDir", new ArrayList(100), new ArrayList(1000), new ArrayList(0), new ArrayList(1), "/home/agitar/work/sexy-dolphin-05-agitar-0/tmp/agitar-agitar/Agitator48455.dir/Agitator71.tmp");
        SystemCrapStats systemCrapStats = new SystemCrapStats(new ArrayList(10), "testSystemCrapStatsName", crapProject, 100.0F, 1000.0F, 0.0F);
        try {
            callPrivateMethod("org.crap4j.SystemCrapStats", "countCrapMethods", new Class[] {List.class}, systemCrapStats, new Object[] {null});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(SystemCrapStats.class, ex);
        }
    }
    
    public void testCrapScoresThrowsArrayIndexOutOfBoundsException() throws Throwable {
        ArrayList crapValues = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        CrapProject crapProject = (CrapProject) Mockingbird.getProxyObject(CrapProject.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, crapValues, "size", "()int", new Object[] {}, new Integer(1), 1);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.setReturnValue(false, crapValues, "iterator", "()java.util.Iterator", new Object[] {}, iterator, 1);
        Mockingbird.setReturnValue(false, iterator, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        MethodCrap methodCrap = (MethodCrap) Mockingbird.getProxyObject(MethodCrap.class);
        Mockingbird.setReturnValue(false, iterator, "next", "()java.lang.Object", new Object[] {}, methodCrap, 1);
        Mockingbird.setReturnValue(methodCrap.getCrap(), 2.0F);
        Mockingbird.setReturnValue(false, iterator, "hasNext", "()boolean", new Object[] {}, Boolean.FALSE, 1);
        Mockingbird.setReturnValue(false, crapValues, "size", "()int", new Object[] {}, new Integer(1), 1);
        Mockingbird.setReturnValue(false, crapValues, "size", "()int", new Object[] {}, new Integer(1), 1);
        Mockingbird.setReturnValue(false, crapValues, "get", "(int)java.lang.Object", new Object[] {new Integer(0)}, methodCrap, 1);
        Mockingbird.setReturnValue(methodCrap.getCrap(), 2.0F);
        Mockingbird.setReturnValue(false, crapValues, "size", "()int", new Object[] {}, new Integer(1), 1);
        Mockingbird.setReturnValue(false, crapValues, "size", "()int", new Object[] {}, new Integer(1), 1);
        Mockingbird.setReturnValue(false, crapValues, "size", "()int", new Object[] {}, new Integer(1), 1);
        Mockingbird.setReturnValue(false, crapValues, "get", "(int)java.lang.Object", new Object[] {new Integer(0)}, methodCrap, 1);
        Mockingbird.setReturnValue(methodCrap.getCrap(), 2.0F);
        Mockingbird.setReturnValue(false, crapValues, "size", "()int", new Object[] {}, new Integer(1), 1);
        Iterator iterator2 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.setReturnValue(false, crapValues, "iterator", "()java.util.Iterator", new Object[] {}, iterator2, 1);
        Mockingbird.setReturnValue(false, iterator2, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator2, "next", "()java.lang.Object", new Object[] {}, methodCrap, 1);
        Mockingbird.setReturnValue(methodCrap.getCrap(), 2.0F);
        Mockingbird.setReturnValue(false, iterator2, "hasNext", "()boolean", new Object[] {}, Boolean.FALSE, 1);
        Iterator iterator3 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.setReturnValue(false, crapValues, "iterator", "()java.util.Iterator", new Object[] {}, iterator3, 1);
        Mockingbird.setReturnValue(false, iterator3, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator3, "next", "()java.lang.Object", new Object[] {}, methodCrap, 1);
        Mockingbird.setReturnValue(methodCrap.getCrapLoad(0.0F), Integer.MAX_VALUE);
        Mockingbird.setReturnValue(false, iterator3, "hasNext", "()boolean", new Object[] {}, Boolean.FALSE, 1);
        Mockingbird.enterTestMode(SystemCrapStats.class);
        SystemCrapStats systemCrapStats = new SystemCrapStats(crapValues, "testSystemCrapStatsName", crapProject, 100.0F, 1000.0F, 0.0F);
        ArrayList arrayList = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, crapValues, "size", "()int", new Object[] {}, new Integer(1), 1);
        Mockingbird.setReturnValue(false, arrayList, "size", "()int", new Object[] {}, new Integer(4), 1);
        MethodCrap methodCrap2 = (MethodCrap) Mockingbird.getProxyObject(MethodCrap.class);
        Mockingbird.setReturnValue(false, arrayList, "get", "(int)java.lang.Object", new Object[] {new Integer(0)}, methodCrap2, 1);
        Mockingbird.setReturnValue(methodCrap2.getCrap(), 40.0F);
        Mockingbird.setReturnValue(false, arrayList, "size", "()int", new Object[] {}, new Integer(4), 1);
        MethodCrap methodCrap3 = (MethodCrap) Mockingbird.getProxyObject(MethodCrap.class);
        Mockingbird.setReturnValue(false, arrayList, "get", "(int)java.lang.Object", new Object[] {new Integer(1)}, methodCrap3, 1);
        Mockingbird.setReturnValue(methodCrap3.getCrap(), 1.0634053F);
        Mockingbird.enterTestMode(SystemCrapStats.class);
        try {
            callPrivateMethod("org.crap4j.SystemCrapStats", "crapScores", new Class[] {List.class}, systemCrapStats, new Object[] {arrayList});
            fail("Expected ArrayIndexOutOfBoundsException to be thrown");
        } catch (ArrayIndexOutOfBoundsException ex) {
            assertEquals("ex.getMessage()", "1", ex.getMessage());
            assertThrownBy(SystemCrapStats.class, ex);
            assertSame("systemCrapStats.getSubjects()", crapValues, systemCrapStats.getSubjects());
            assertEquals("arrayList.size()", 0, arrayList.size());
        }
    }
    
    public void testCrapScoresThrowsNullPointerException() throws Throwable {
        CrapProject crapProject = new CrapProject("testSystemCrapStatsProjectDir", new ArrayList(100), new ArrayList(1000), new ArrayList(0), new ArrayList(1), "/home/agitar/work/sexy-dolphin-05-agitar-0/tmp/agitar-agitar/Agitator48455.dir/Agitator71.tmp");
        List crapValues = new ArrayList(10);
        SystemCrapStats systemCrapStats = new SystemCrapStats(crapValues, "testSystemCrapStatsName", crapProject, 100.0F, 1000.0F, 0.0F);
        List arrayList = new ArrayList(10000);
        arrayList.add(null);
        try {
            callPrivateMethod("org.crap4j.SystemCrapStats", "crapScores", new Class[] {List.class}, systemCrapStats, new Object[] {arrayList});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(SystemCrapStats.class, ex);
            assertSame("systemCrapStats.getSubjects()", crapValues, systemCrapStats.getSubjects());
            assertEquals("(ArrayList) arrayList.size()", 1, arrayList.size());
        }
    }
    
    public void testCrapScoresThrowsNullPointerException1() throws Throwable {
        CrapProject crapProject = new CrapProject("testSystemCrapStatsProjectDir", new ArrayList(100), new ArrayList(1000), new ArrayList(0), new ArrayList(1), "/home/agitar/work/sexy-dolphin-05-agitar-0/tmp/agitar-agitar/Agitator48455.dir/Agitator71.tmp");
        List crapValues = new ArrayList(10);
        SystemCrapStats systemCrapStats = new SystemCrapStats(crapValues, "testSystemCrapStatsName", crapProject, 100.0F, 1000.0F, 0.0F);
        try {
            callPrivateMethod("org.crap4j.SystemCrapStats", "crapScores", new Class[] {List.class}, systemCrapStats, new Object[] {null});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(SystemCrapStats.class, ex);
            assertSame("systemCrapStats.getSubjects()", crapValues, systemCrapStats.getSubjects());
        }
    }
    
    public void testGenerateBarPictureThrowsNoClassDefFoundError() throws Throwable {
        CrapProject crapProject = new CrapProject("testSystemCrapStatsProjectDir", new ArrayList(100), new ArrayList(1000), new ArrayList(0), new ArrayList(1), "/home/agitar/work/sexy-dolphin-05-agitar-0/tmp/agitar-agitar/Agitator48455.dir/Agitator71.tmp");
        SystemCrapStats systemCrapStats = new SystemCrapStats(new ArrayList(10), "testSystemCrapStatsName", crapProject, 100.0F, 1000.0F, 0.0F);
        try {
            systemCrapStats.generateBarPicture();
            fail("Expected NoClassDefFoundError to be thrown");
        } catch (NoClassDefFoundError ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(NewCrapImageGenerator.class, ex);
        }
    }
    
    public void testGenerateBarPictureThrowsNullPointerException() throws Throwable {
        SystemCrapStats systemCrapStats = new SystemCrapStats(new ArrayList(100), "testSystemCrapStatsName", null, 100.0F, 1000.0F, 0.0F);
        try {
            systemCrapStats.generateBarPicture();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(SystemCrapStats.class, ex);
        }
    }
    
    public void testGenerateDetailComplexityPageThrowsNullPointerException() throws Throwable {
        SystemCrapStats systemCrapStats = new SystemCrapStats(new ArrayList(100), "testSystemCrapStatsName", null, 100.0F, 1000.0F, 0.0F);
        try {
            callPrivateMethod("org.crap4j.SystemCrapStats", "generateDetailComplexityPage", new Class[] {StreamSource.class}, systemCrapStats, new Object[] {new StreamSource()});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(SystemCrapStats.class, ex);
        }
    }
    
    public void testGenerateDetailComplexityPageThrowsTransformerException() throws Throwable {
        CrapProject crapProject = new CrapProject("testSystemCrapStatsProjectDir", new ArrayList(100), new ArrayList(1000), new ArrayList(0), new ArrayList(1), "/home/agitar/work/sexy-dolphin-05-agitar-0/tmp/agitar-agitar/Agitator48455.dir/Agitator71.tmp");
        SystemCrapStats systemCrapStats = new SystemCrapStats(new ArrayList(10), "testSystemCrapStatsName", crapProject, 100.0F, 1000.0F, 0.0F);
        try {
            callPrivateMethod("org.crap4j.SystemCrapStats", "generateDetailComplexityPage", new Class[] {StreamSource.class}, systemCrapStats, new Object[] {null});
            fail("Expected TransformerException to be thrown");
        } catch (TransformerException ex) {
            assertEquals("ex.getMessage()", "java.lang.NullPointerException", ex.getMessage());
        }
    }
    
    public void testGenerateDetailCoveragePageThrowsNullPointerException() throws Throwable {
        SystemCrapStats systemCrapStats = new SystemCrapStats(new ArrayList(100), "testSystemCrapStatsName", null, 100.0F, 1000.0F, 0.0F);
        try {
            callPrivateMethod("org.crap4j.SystemCrapStats", "generateDetailCoveragePage", new Class[] {StreamSource.class}, systemCrapStats, new Object[] {new StreamSource()});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(SystemCrapStats.class, ex);
        }
    }
    
    public void testGenerateDetailCrapLoadPageThrowsNullPointerException() throws Throwable {
        SystemCrapStats systemCrapStats = new SystemCrapStats(new ArrayList(100), "testSystemCrapStatsName", null, 100.0F, 1000.0F, 0.0F);
        try {
            callPrivateMethod("org.crap4j.SystemCrapStats", "generateDetailCrapLoadPage", new Class[] {StreamSource.class}, systemCrapStats, new Object[] {new StreamSource()});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(SystemCrapStats.class, ex);
        }
    }
    
    public void testGenerateDetailCrapLoadPageThrowsTransformerException() throws Throwable {
        CrapProject crapProject = new CrapProject("testSystemCrapStatsProjectDir", new ArrayList(1000), new ArrayList(0), new ArrayList(1), new ArrayList(10), "/home/agitar/work/sexy-dolphin-05-agitar-0/tmp/agitar-agitar/Agitator48455.dir/Agitator71.tmp");
        SystemCrapStats systemCrapStats = new SystemCrapStats(new ArrayList(100), "testSystemCrapStatsName", crapProject, 100.0F, 1000.0F, 0.0F);
        File xmlReportFile = (File) callPrivateMethod("org.crap4j.SystemCrapStats", "getXmlReportFile", new Class[] {}, systemCrapStats, new Object[] {});
        SystemCrapStats systemCrapStats2 = new SystemCrapStats(new ArrayList(10000), "testSystemCrapStatsName1", crapProject, 1000.0F, 0.0F, -1.0F);
        try {
            callPrivateMethod("org.crap4j.SystemCrapStats", "generateDetailCrapLoadPage", new Class[] {StreamSource.class}, systemCrapStats2, new Object[] {new StreamSource(xmlReportFile)});
            fail("Expected TransformerException to be thrown");
        } catch (TransformerException ex) {
            assertEquals("ex.getMessage()", "javax.xml.transform.TransformerException: com.sun.org.apache.xml.internal.utils.WrappedRuntimeException: Content is not allowed in prolog.", ex.getMessage());
        }
    }
    
    public void testGenerateDetailCrapPageThrowsTransformerException() throws Throwable {
        CrapProject crapProject = new CrapProject("testSystemCrapStatsProjectDir", new ArrayList(100), new ArrayList(1000), new ArrayList(0), new ArrayList(1), "/home/agitar/work/sexy-dolphin-05-agitar-0/tmp/agitar-agitar/Agitator48455.dir/Agitator71.tmp");
        SystemCrapStats systemCrapStats = new SystemCrapStats(new ArrayList(10), "testSystemCrapStatsName", crapProject, 100.0F, 1000.0F, 0.0F);
        try {
            callPrivateMethod("org.crap4j.SystemCrapStats", "generateDetailCrapPage", new Class[] {StreamSource.class}, systemCrapStats, new Object[] {null});
            fail("Expected TransformerException to be thrown");
        } catch (TransformerException ex) {
            assertEquals("ex.getMessage()", "java.lang.NullPointerException", ex.getMessage());
        }
    }
    
    public void testGenerateHtmlThrowsNullPointerException() throws Throwable {
        SystemCrapStats systemCrapStats = new SystemCrapStats(new ArrayList(100), "testSystemCrapStatsName", null, 100.0F, 1000.0F, 0.0F);
        try {
            systemCrapStats.generateHtml();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(SystemCrapStats.class, ex);
        }
    }
    
    public void testGenerateMainPageThrowsNullPointerException() throws Throwable {
        SystemCrapStats systemCrapStats = new SystemCrapStats(new ArrayList(100), "testSystemCrapStatsName", null, 100.0F, 1000.0F, 0.0F);
        try {
            callPrivateMethod("org.crap4j.SystemCrapStats", "generateMainPage", new Class[] {StreamSource.class}, systemCrapStats, new Object[] {new StreamSource()});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(SystemCrapStats.class, ex);
        }
    }
    
    public void testGenerateMainPageThrowsTransformerException() throws Throwable {
        ArrayList crapValues = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        CrapProject crapProject = (CrapProject) Mockingbird.getProxyObject(CrapProject.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, crapValues, "size", "()int", new Object[] {}, new Integer(0), 1);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.setReturnValue(false, crapValues, "iterator", "()java.util.Iterator", new Object[] {}, iterator, 1);
        Mockingbird.setReturnValue(false, iterator, "hasNext", "()boolean", new Object[] {}, Boolean.FALSE, 1);
        Mockingbird.setReturnValue(false, crapValues, "size", "()int", new Object[] {}, new Integer(0), 1);
        Mockingbird.setReturnValue(false, crapValues, "size", "()int", new Object[] {}, new Integer(0), 1);
        Mockingbird.setReturnValue(false, crapValues, "size", "()int", new Object[] {}, new Integer(0), 1);
        Mockingbird.setReturnValue(false, crapValues, "size", "()int", new Object[] {}, new Integer(0), 1);
        Iterator iterator2 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.setReturnValue(false, crapValues, "iterator", "()java.util.Iterator", new Object[] {}, iterator2, 1);
        Mockingbird.setReturnValue(false, iterator2, "hasNext", "()boolean", new Object[] {}, Boolean.FALSE, 1);
        Iterator iterator3 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.setReturnValue(false, crapValues, "iterator", "()java.util.Iterator", new Object[] {}, iterator3, 1);
        Mockingbird.setReturnValue(false, iterator3, "hasNext", "()boolean", new Object[] {}, Boolean.FALSE, 1);
        Mockingbird.enterTestMode(SystemCrapStats.class);
        SystemCrapStats systemCrapStats = new SystemCrapStats(crapValues, "testSystemCrapStatsName", crapProject, 100.0F, 1000.0F, 0.0F);
        StreamSource streamSource = (StreamSource) Mockingbird.getProxyObject(StreamSource.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(crapProject.getReportHtmlFile(), Mockingbird.getProxyObject(File.class));
        StreamSource streamSource2 = (StreamSource) Mockingbird.getProxyObject(StreamSource.class);
        Mockingbird.replaceObjectForRecording(StreamSource.class, "<init>(java.io.InputStream)", streamSource2);
        TransformerFactory errorListener = (TransformerFactory) Mockingbird.getProxyObject(TransformerFactory.class);
        Mockingbird.setReturnValue(true, TransformerFactory.class, "newInstance", "()javax.xml.transform.TransformerFactory", new Object[] {}, errorListener, 1);
        Transformer errorListener2 = (Transformer) Mockingbird.getProxyObject(Transformer.class);
        Mockingbird.setReturnValue(false, errorListener, "newTransformer", "(javax.xml.transform.Source)javax.xml.transform.Transformer", new Object[] {streamSource2}, errorListener2, 1);
        StreamResult streamResult = (StreamResult) Mockingbird.getProxyObject(StreamResult.class);
        Mockingbird.replaceObjectForRecording(StreamResult.class, "<init>(java.io.File)", streamResult);
        Mockingbird.setException(false, errorListener2, "transform", "(javax.xml.transform.Source,javax.xml.transform.Result)void", new Object[] {streamSource, streamResult}, (Throwable) Mockingbird.getProxyObject(TransformerException.class), 1);
        Mockingbird.enterTestMode(SystemCrapStats.class);
        try {
            callPrivateMethod("org.crap4j.SystemCrapStats", "generateMainPage", new Class[] {StreamSource.class}, systemCrapStats, new Object[] {streamSource});
            fail("Expected TransformerException to be thrown");
        } catch (TransformerException ex) {
            assertTrue("Test call resulted in expected outcome", true);
        }
    }
    
    public void testGeneratePictureThrowsIllegalArgumentException() throws Throwable {
        CrapProject crapProject = new CrapProject("testSystemCrapStatsProjectDir", new ArrayList(100), new ArrayList(1000), new ArrayList(0), new ArrayList(1), "/home/agitar/work/sexy-dolphin-05-agitar-0/tmp/agitar-agitar/Agitator48455.dir/Agitator71.tmp");
        SystemCrapStats systemCrapStats = new SystemCrapStats(new ArrayList(10), "testSystemCrapStatsName", crapProject, 100.0F, 1000.0F, 0.0F);
        try {
            systemCrapStats.generatePicture();
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertEquals("ex.getMessage()", "Width (0) and height (0) cannot be <= 0", ex.getMessage());
            assertThrownBy(DirectColorModel.class, ex);
        }
    }
    
    public void testGeneratePictureThrowsNullPointerException() throws Throwable {
        SystemCrapStats systemCrapStats = new SystemCrapStats(new ArrayList(100), "testSystemCrapStatsName", null, 100.0F, 1000.0F, 0.0F);
        try {
            systemCrapStats.generatePicture();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(SystemCrapStats.class, ex);
        }
    }
    
    public void testGetRelativeResourceThrowsNullPointerException() throws Throwable {
        CrapProject crapProject = new CrapProject("testSystemCrapStatsProjectDir", new ArrayList(1000), new ArrayList(0), new ArrayList(1), new ArrayList(10), "/home/agitar/work/sexy-dolphin-05-agitar-0/tmp/agitar-agitar/Agitator48455.dir/Agitator71.tmp");
        SystemCrapStats systemCrapStats = new SystemCrapStats(new ArrayList(100), "testSystemCrapStatsName", crapProject, 100.0F, 1000.0F, 0.0F);
        try {
            systemCrapStats.getRelativeResource(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertEquals("ex.getMessage()", "name", ex.getMessage());
            assertThrownBy(ZipFile.class, ex);
        }
    }
    
    public void testMakeHistThrowsNullPointerException() throws Throwable {
        CrapProject crapProject = new CrapProject("testSystemCrapStatsProjectDir", new ArrayList(100), new ArrayList(1000), new ArrayList(0), new ArrayList(1), "/home/agitar/work/sexy-dolphin-05-agitar-0/tmp/agitar-agitar/Agitator48455.dir/Agitator71.tmp");
        SystemCrapStats systemCrapStats = new SystemCrapStats(new ArrayList(10), "testSystemCrapStatsName", crapProject, 100.0F, 1000.0F, 0.0F);
        try {
            callPrivateMethod("org.crap4j.SystemCrapStats", "makeHist", new Class[] {MyStringBuilder.class, String.class, String.class, String.class}, systemCrapStats, new Object[] {null, "testSystemCrapStatsPlace", "testSystemCrapStatsValue", "testSystemCrapStatsHeight"});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(SystemCrapStats.class, ex);
        }
    }
    
    public void testMakeHtmlThrowsTransformerConfigurationException() throws Throwable {
        ArrayList crapValues = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        CrapProject crapProject = (CrapProject) Mockingbird.getProxyObject(CrapProject.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, crapValues, "size", "()int", new Object[] {}, new Integer(0), 1);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.setReturnValue(false, crapValues, "iterator", "()java.util.Iterator", new Object[] {}, iterator, 1);
        Mockingbird.setReturnValue(false, iterator, "hasNext", "()boolean", new Object[] {}, Boolean.FALSE, 1);
        Mockingbird.setReturnValue(false, crapValues, "size", "()int", new Object[] {}, new Integer(0), 1);
        Mockingbird.setReturnValue(false, crapValues, "size", "()int", new Object[] {}, new Integer(0), 1);
        Mockingbird.setReturnValue(false, crapValues, "size", "()int", new Object[] {}, new Integer(0), 1);
        Mockingbird.setReturnValue(false, crapValues, "size", "()int", new Object[] {}, new Integer(0), 1);
        Iterator iterator2 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.setReturnValue(false, crapValues, "iterator", "()java.util.Iterator", new Object[] {}, iterator2, 1);
        Mockingbird.setReturnValue(false, iterator2, "hasNext", "()boolean", new Object[] {}, Boolean.FALSE, 1);
        Iterator iterator3 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.setReturnValue(false, crapValues, "iterator", "()java.util.Iterator", new Object[] {}, iterator3, 1);
        Mockingbird.setReturnValue(false, iterator3, "hasNext", "()boolean", new Object[] {}, Boolean.FALSE, 1);
        Mockingbird.enterTestMode(SystemCrapStats.class);
        SystemCrapStats systemCrapStats = new SystemCrapStats(crapValues, "testSystemCrapStatsName", crapProject, 100.0F, 1000.0F, 0.0F);
        StreamSource streamSource = (StreamSource) Mockingbird.getProxyObject(StreamSource.class);
        ByteArrayInputStream byteArrayInputStream = (ByteArrayInputStream) Mockingbird.getProxyObject(ByteArrayInputStream.class);
        File file = (File) Mockingbird.getProxyObject(File.class);
        Mockingbird.enterRecordingMode();
        StreamSource streamSource2 = (StreamSource) Mockingbird.getProxyObject(StreamSource.class);
        Mockingbird.replaceObjectForRecording(StreamSource.class, "<init>(java.io.InputStream)", streamSource2);
        TransformerFactory errorListener = (TransformerFactory) Mockingbird.getProxyObject(TransformerFactory.class);
        Mockingbird.setReturnValue(true, TransformerFactory.class, "newInstance", "()javax.xml.transform.TransformerFactory", new Object[] {}, errorListener, 1);
        Mockingbird.setException(false, errorListener, "newTransformer", "(javax.xml.transform.Source)javax.xml.transform.Transformer", new Object[] {streamSource2}, (Throwable) Mockingbird.getProxyObject(TransformerConfigurationException.class), 1);
        Mockingbird.enterTestMode(SystemCrapStats.class);
        try {
            callPrivateMethod("org.crap4j.SystemCrapStats", "makeHtml", new Class[] {StreamSource.class, InputStream.class, File.class}, systemCrapStats, new Object[] {streamSource, byteArrayInputStream, file});
            fail("Expected TransformerConfigurationException to be thrown");
        } catch (TransformerConfigurationException ex) {
            assertTrue("Test call resulted in expected outcome", true);
        }
    }
    
    public void testToXmlThrowsNullPointerException() throws Throwable {
        List crapValues = new ArrayList(100);
        SystemCrapStats systemCrapStats = new SystemCrapStats(crapValues, "testSystemCrapStatsName", null, 100.0F, 1000.0F, 0.0F);
        try {
            systemCrapStats.toXml();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(SystemCrapStats.class, ex);
            assertSame("systemCrapStats.getSubjects()", crapValues, systemCrapStats.getSubjects());
        }
    }
    
    public void testValidateParamsThrowsIllegalArgumentException() throws Throwable {
        SystemCrapStats systemCrapStats = new SystemCrapStats(new ArrayList(100), "testSystemCrapStatsName", null, 100.0F, 1000.0F, 0.0F);
        try {
            callPrivateMethod("org.crap4j.SystemCrapStats", "validateParams", new Class[] {List.class}, systemCrapStats, new Object[] {null});
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertEquals("ex.getMessage()", "Cannot compute for null values", ex.getMessage());
            assertThrownBy(SystemCrapStats.class, ex);
        }
    }
    
    public void testWriteReportThrowsIllegalArgumentException() throws Throwable {
        MethodComplexity complexity2 = new MethodComplexity("testSystemCrapStatsMethodSignature", "testSystemCrapStatsPkgclassName", "testSystemCrapStatsMethodName", "testSystemCrapStatsMethodDescriptor", "testSystemCrapStatsJava5Signature", 100, "testSystemCrapStatsPrettyMethodSignature");
        List crapValues = new ArrayList(100);
        crapValues.add(new MethodCrap("testSystemCrapStatsMethodSignature", 1.0F, complexity2));
        CrapProject crapProject = new CrapProject("testSystemCrapStatsProjectDir", new ArrayList(1000), new ArrayList(0), new ArrayList(1), new ArrayList(10), "/home/agitar/work/sexy-dolphin-05-agitar-0/tmp/agitar-agitar/Agitator48455.dir/Agitator71.tmp");
        SystemCrapStats systemCrapStats = new SystemCrapStats(crapValues, "testSystemCrapStatsName", crapProject, 100.0F, 1000.0F, 0.0F);
        try {
            systemCrapStats.writeReport();
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertEquals("ex.getMessage()", "Width (0) and height (0) cannot be <= 0", ex.getMessage());
            assertThrownBy(DirectColorModel.class, ex);
            assertSame("systemCrapStats.getSubjects()", crapValues, systemCrapStats.getSubjects());
        }
    }
    
    public void testWriteReportThrowsIllegalArgumentException1() throws Throwable {
        CrapProject crapProject = new CrapProject("testSystemCrapStatsProjectDir", new ArrayList(100), new ArrayList(1000), new ArrayList(0), new ArrayList(1), "/home/agitar/work/sexy-dolphin-05-agitar-0/tmp/agitar-agitar/Agitator48455.dir/Agitator71.tmp");
        List crapValues = new ArrayList(10);
        MethodComplexity complexity2 = new MethodComplexity("testSystemCrapStatsMethodSignature", "testSystemCrapStatsPkgclassName", "testSystemCrapStatsMethodName", "testSystemCrapStatsMethodDescriptor", "testSystemCrapStatsJava5Signature", 100, "testSystemCrapStatsPrettyMethodSignature");
        crapValues.add(new MethodCrap("testSystemCrapStatsMethodSignature", 0.0F, complexity2));
        SystemCrapStats systemCrapStats = new SystemCrapStats(crapValues, "testSystemCrapStatsName", crapProject, 100.0F, 1000.0F, 0.0F);
        try {
            systemCrapStats.writeReport();
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertEquals("ex.getMessage()", "Width (0) and height (0) cannot be <= 0", ex.getMessage());
            assertThrownBy(DirectColorModel.class, ex);
            assertSame("systemCrapStats.getSubjects()", crapValues, systemCrapStats.getSubjects());
        }
    }
    
    public void testWriteReportThrowsIllegalArgumentException2() throws Throwable {
        ArrayList crapValues = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        CrapProject crapProject = (CrapProject) Mockingbird.getProxyObject(CrapProject.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, crapValues, "size", "()int", new Object[] {}, new Integer(2), 1);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.setReturnValue(false, crapValues, "iterator", "()java.util.Iterator", new Object[] {}, iterator, 1);
        Mockingbird.setReturnValue(false, iterator, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        MethodCrap methodCrap = (MethodCrap) Mockingbird.getProxyObject(MethodCrap.class);
        Mockingbird.setReturnValue(false, iterator, "next", "()java.lang.Object", new Object[] {}, methodCrap, 1);
        Mockingbird.setReturnValue(methodCrap.getCrap(), 0.0F);
        Mockingbird.setReturnValue(false, iterator, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        MethodCrap methodCrap2 = (MethodCrap) Mockingbird.getProxyObject(MethodCrap.class);
        Mockingbird.setReturnValue(false, iterator, "next", "()java.lang.Object", new Object[] {}, methodCrap2, 1);
        Mockingbird.setReturnValue(methodCrap2.getCrap(), 70.0F);
        Mockingbird.setReturnValue(false, iterator, "hasNext", "()boolean", new Object[] {}, Boolean.FALSE, 1);
        Mockingbird.setReturnValue(false, crapValues, "size", "()int", new Object[] {}, new Integer(2), 1);
        Mockingbird.setReturnValue(false, crapValues, "size", "()int", new Object[] {}, new Integer(2), 1);
        Mockingbird.setReturnValue(false, crapValues, "get", "(int)java.lang.Object", new Object[] {new Integer(0)}, methodCrap, 1);
        Mockingbird.setReturnValue(methodCrap.getCrap(), 0.0F);
        Mockingbird.setReturnValue(false, crapValues, "size", "()int", new Object[] {}, new Integer(2), 1);
        Mockingbird.setReturnValue(false, crapValues, "get", "(int)java.lang.Object", new Object[] {new Integer(1)}, methodCrap2, 1);
        Mockingbird.setReturnValue(methodCrap2.getCrap(), 70.0F);
        Mockingbird.setReturnValue(false, crapValues, "size", "()int", new Object[] {}, new Integer(2), 1);
        Mockingbird.setReturnValue(false, crapValues, "size", "()int", new Object[] {}, new Integer(2), 1);
        Mockingbird.setReturnValue(false, crapValues, "size", "()int", new Object[] {}, new Integer(2), 1);
        Mockingbird.setReturnValue(false, crapValues, "get", "(int)java.lang.Object", new Object[] {new Integer(0)}, methodCrap, 1);
        Mockingbird.setReturnValue(methodCrap.getCrap(), 0.0F);
        Mockingbird.setReturnValue(false, crapValues, "size", "()int", new Object[] {}, new Integer(2), 1);
        Mockingbird.setReturnValue(false, crapValues, "get", "(int)java.lang.Object", new Object[] {new Integer(1)}, methodCrap2, 1);
        Mockingbird.setReturnValue(methodCrap2.getCrap(), 70.0F);
        Mockingbird.setReturnValue(false, crapValues, "size", "()int", new Object[] {}, new Integer(2), 1);
        Iterator iterator2 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.setReturnValue(false, crapValues, "iterator", "()java.util.Iterator", new Object[] {}, iterator2, 1);
        Mockingbird.setReturnValue(false, iterator2, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator2, "next", "()java.lang.Object", new Object[] {}, methodCrap, 1);
        Mockingbird.setReturnValue(methodCrap.getCrap(), 0.0F);
        Mockingbird.setReturnValue(false, iterator2, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator2, "next", "()java.lang.Object", new Object[] {}, methodCrap2, 1);
        Mockingbird.setReturnValue(methodCrap2.getCrap(), 70.0F);
        Mockingbird.setReturnValue(false, iterator2, "hasNext", "()boolean", new Object[] {}, Boolean.FALSE, 1);
        Iterator iterator3 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.setReturnValue(false, crapValues, "iterator", "()java.util.Iterator", new Object[] {}, iterator3, 1);
        Mockingbird.setReturnValue(false, iterator3, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator3, "next", "()java.lang.Object", new Object[] {}, methodCrap, 1);
        Mockingbird.setReturnValue(methodCrap.getCrapLoad(100.0F), 0);
        Mockingbird.setReturnValue(false, iterator3, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator3, "next", "()java.lang.Object", new Object[] {}, methodCrap2, 1);
        Mockingbird.setReturnValue(methodCrap2.getCrapLoad(1000.0F), 0);
        Mockingbird.setReturnValue(false, iterator3, "hasNext", "()boolean", new Object[] {}, Boolean.FALSE, 1);
        Mockingbird.enterTestMode(SystemCrapStats.class);
        SystemCrapStats systemCrapStats = new SystemCrapStats(crapValues, "Method Cotunt: ", crapProject, 257.0F, 100.0F, 1000.0F);
        Mockingbird.enterRecordingMode();
        MyStringBuilder myStringBuilder = (MyStringBuilder) Mockingbird.getProxyObject(MyStringBuilder.class);
        Mockingbird.replaceObjectForRecording(MyStringBuilder.class, "<init>()", myStringBuilder);
        Mockingbird.setReturnValue(myStringBuilder.start("<crap_result>"), myStringBuilder);
        crapProject.toXml(myStringBuilder);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(myStringBuilder.start("<stats>"), myStringBuilder);
        CrapProject.itemToXml(myStringBuilder, "name", "Method Cotunt: ");
        Mockingbird.setNormalReturnForVoid();
        NumberFormat decimalFormat = (NumberFormat) Mockingbird.getProxyObject(NumberFormat.class);
        Mockingbird.setReturnValue(FormatUtil.getNumberFormatter(), decimalFormat);
        Mockingbird.setReturnValue(false, decimalFormat, "format", "(double)java.lang.String", new Object[] {new Double(70.0)}, "70.00", 1);
        CrapProject.itemToXml(myStringBuilder, "totalCrap", "70.00");
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(false, decimalFormat, "format", "(double)java.lang.String", new Object[] {new Double(35.0)}, "35.00", 1);
        CrapProject.itemToXml(myStringBuilder, "crap", "35.00");
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(false, decimalFormat, "format", "(double)java.lang.String", new Object[] {new Double(70.0)}, "70.00", 1);
        CrapProject.itemToXml(myStringBuilder, "median", "70.00");
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(false, decimalFormat, "format", "(double)java.lang.String", new Object[] {new Double(35.0)}, "35.00", 1);
        CrapProject.itemToXml(myStringBuilder, "average", "35.00");
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(false, decimalFormat, "format", "(double)java.lang.String", new Object[] {new Double(35.0)}, "35.00", 1);
        CrapProject.itemToXml(myStringBuilder, "stdDev", "35.00");
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(true, Integer.class, "toString", "(int)java.lang.String", new Object[] {new Integer(2)}, "2", 1);
        CrapProject.itemToXml(myStringBuilder, "methodCount", "2");
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(true, Integer.class, "toString", "(int)java.lang.String", new Object[] {new Integer(0)}, "0", 1);
        CrapProject.itemToXml(myStringBuilder, "crapMethodCount", "0");
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(false, decimalFormat, "format", "(double)java.lang.String", new Object[] {new Double(0.0)}, "0.00", 1);
        CrapProject.itemToXml(myStringBuilder, "crapMethodPercent", "0.00");
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(true, Integer.class, "toString", "(int)java.lang.String", new Object[] {new Integer(0)}, "0", 1);
        CrapProject.itemToXml(myStringBuilder, "crapLoad", "0");
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(true, Integer.class, "toString", "(int)java.lang.String", new Object[] {new Integer(257)}, "257", 1);
        CrapProject.itemToXml(myStringBuilder, "crapThreshold", "257");
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(myStringBuilder.start("<histogram>"), myStringBuilder);
        Iterator iterator4 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.setReturnValue(false, crapValues, "iterator", "()java.util.Iterator", new Object[] {}, iterator4, 1);
        Mockingbird.setReturnValue(false, iterator4, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator4, "next", "()java.lang.Object", new Object[] {}, methodCrap, 1);
        Mockingbird.setReturnValue(methodCrap.getCrap(), 0.0F);
        Mockingbird.setReturnValue(false, iterator4, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator4, "next", "()java.lang.Object", new Object[] {}, methodCrap2, 1);
        Mockingbird.setReturnValue(methodCrap2.getCrap(), 70.0F);
        Mockingbird.setReturnValue(false, iterator4, "hasNext", "()boolean", new Object[] {}, Boolean.FALSE, 1);
        Iterator iterator5 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.setReturnValue(false, crapValues, "iterator", "()java.util.Iterator", new Object[] {}, iterator5, 1);
        Mockingbird.setReturnValue(false, iterator5, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator5, "next", "()java.lang.Object", new Object[] {}, methodCrap, 1);
        Mockingbird.setReturnValue(methodCrap.getCrap(), 0.0F);
        Mockingbird.setReturnValue(false, iterator5, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator5, "next", "()java.lang.Object", new Object[] {}, methodCrap2, 1);
        Mockingbird.setReturnValue(methodCrap2.getCrap(), 70.0F);
        Mockingbird.setReturnValue(methodCrap2.getCrap(), 70.0F);
        Mockingbird.setReturnValue(false, iterator5, "hasNext", "()boolean", new Object[] {}, Boolean.FALSE, 1);
        Iterator iterator6 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.setReturnValue(false, crapValues, "iterator", "()java.util.Iterator", new Object[] {}, iterator6, 1);
        Mockingbird.setReturnValue(false, iterator6, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator6, "next", "()java.lang.Object", new Object[] {}, methodCrap, 1);
        Mockingbird.setReturnValue(methodCrap.getCrap(), 0.0F);
        Mockingbird.setReturnValue(false, iterator6, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator6, "next", "()java.lang.Object", new Object[] {}, methodCrap2, 1);
        Mockingbird.setReturnValue(methodCrap2.getCrap(), 70.0F);
        Mockingbird.setReturnValue(methodCrap2.getCrap(), 70.0F);
        Mockingbird.setReturnValue(false, iterator6, "hasNext", "()boolean", new Object[] {}, Boolean.FALSE, 1);
        Iterator iterator7 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.setReturnValue(false, crapValues, "iterator", "()java.util.Iterator", new Object[] {}, iterator7, 1);
        Mockingbird.setReturnValue(false, iterator7, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator7, "next", "()java.lang.Object", new Object[] {}, methodCrap, 1);
        Mockingbird.setReturnValue(methodCrap.getCrap(), 0.0F);
        Mockingbird.setReturnValue(false, iterator7, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator7, "next", "()java.lang.Object", new Object[] {}, methodCrap2, 1);
        Mockingbird.setReturnValue(methodCrap2.getCrap(), 70.0F);
        Mockingbird.setReturnValue(methodCrap2.getCrap(), 70.0F);
        Mockingbird.setReturnValue(false, iterator7, "hasNext", "()boolean", new Object[] {}, Boolean.FALSE, 1);
        Iterator iterator8 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.setReturnValue(false, crapValues, "iterator", "()java.util.Iterator", new Object[] {}, iterator8, 1);
        Mockingbird.setReturnValue(false, iterator8, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator8, "next", "()java.lang.Object", new Object[] {}, methodCrap, 1);
        Mockingbird.setReturnValue(methodCrap.getCrap(), 0.0F);
        Mockingbird.setReturnValue(false, iterator8, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator8, "next", "()java.lang.Object", new Object[] {}, methodCrap2, 1);
        Mockingbird.setReturnValue(methodCrap2.getCrap(), 70.0F);
        Mockingbird.setReturnValue(methodCrap2.getCrap(), 70.0F);
        Mockingbird.setReturnValue(false, iterator8, "hasNext", "()boolean", new Object[] {}, Boolean.FALSE, 1);
        Iterator iterator9 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.setReturnValue(false, crapValues, "iterator", "()java.util.Iterator", new Object[] {}, iterator9, 1);
        Mockingbird.setReturnValue(false, iterator9, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator9, "next", "()java.lang.Object", new Object[] {}, methodCrap, 1);
        Mockingbird.setReturnValue(methodCrap.getCrap(), 0.0F);
        Mockingbird.setReturnValue(false, iterator9, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator9, "next", "()java.lang.Object", new Object[] {}, methodCrap2, 1);
        Mockingbird.setReturnValue(methodCrap2.getCrap(), 70.0F);
        Mockingbird.setReturnValue(methodCrap2.getCrap(), 70.0F);
        Mockingbird.setReturnValue(false, iterator9, "hasNext", "()boolean", new Object[] {}, Boolean.FALSE, 1);
        Iterator iterator10 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.setReturnValue(false, crapValues, "iterator", "()java.util.Iterator", new Object[] {}, iterator10, 1);
        Mockingbird.setReturnValue(false, iterator10, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator10, "next", "()java.lang.Object", new Object[] {}, methodCrap, 1);
        Mockingbird.setReturnValue(methodCrap.getCrap(), 0.0F);
        Mockingbird.setReturnValue(false, iterator10, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator10, "next", "()java.lang.Object", new Object[] {}, methodCrap2, 1);
        Mockingbird.setReturnValue(methodCrap2.getCrap(), 70.0F);
        Mockingbird.setReturnValue(methodCrap2.getCrap(), 70.0F);
        Mockingbird.setReturnValue(false, iterator10, "hasNext", "()boolean", new Object[] {}, Boolean.FALSE, 1);
        Iterator iterator11 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.setReturnValue(false, crapValues, "iterator", "()java.util.Iterator", new Object[] {}, iterator11, 1);
        Mockingbird.setReturnValue(false, iterator11, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator11, "next", "()java.lang.Object", new Object[] {}, methodCrap, 1);
        Mockingbird.setReturnValue(methodCrap.getCrap(), 0.0F);
        Mockingbird.setReturnValue(false, iterator11, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator11, "next", "()java.lang.Object", new Object[] {}, methodCrap2, 1);
        Mockingbird.setReturnValue(methodCrap2.getCrap(), 70.0F);
        Mockingbird.setReturnValue(false, iterator11, "hasNext", "()boolean", new Object[] {}, Boolean.FALSE, 1);
        Iterator iterator12 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.setReturnValue(false, crapValues, "iterator", "()java.util.Iterator", new Object[] {}, iterator12, 1);
        Mockingbird.setReturnValue(false, iterator12, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator12, "next", "()java.lang.Object", new Object[] {}, methodCrap, 1);
        Mockingbird.setReturnValue(methodCrap.getCrap(), 0.0F);
        Mockingbird.setReturnValue(false, iterator12, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator12, "next", "()java.lang.Object", new Object[] {}, methodCrap2, 1);
        Mockingbird.setReturnValue(methodCrap2.getCrap(), 70.0F);
        Mockingbird.setReturnValue(false, iterator12, "hasNext", "()boolean", new Object[] {}, Boolean.FALSE, 1);
        Mockingbird.setReturnValue(true, Integer.class, "toString", "(int)java.lang.String", new Object[] {new Integer(1)}, "1", 1);
        Mockingbird.setReturnValue(true, Math.class, "max", "(float,float)float", new Object[] {new Float(170.0F), new Float(28.0F)}, new Float(170.0F), 1);
        Mockingbird.setReturnValue(false, decimalFormat, "format", "(double)java.lang.String", new Object[] {new Double(170.0)}, "170.00", 1);
        Mockingbird.setReturnValue(myStringBuilder.start("<hist>"), myStringBuilder);
        CrapProject.itemToXml(myStringBuilder, "place", "one");
        Mockingbird.setNormalReturnForVoid();
        CrapProject.itemToXml(myStringBuilder, "value", "1");
        Mockingbird.setNormalReturnForVoid();
        CrapProject.itemToXml(myStringBuilder, "height", "170.00px");
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(myStringBuilder.end("</hist>"), myStringBuilder);
        Mockingbird.setReturnValue(true, Integer.class, "toString", "(int)java.lang.String", new Object[] {new Integer(0)}, "0", 1);
        Mockingbird.setReturnValue(false, decimalFormat, "format", "(double)java.lang.String", new Object[] {new Double(0.0)}, "0.00", 1);
        Mockingbird.setReturnValue(myStringBuilder.start("<hist>"), myStringBuilder);
        CrapProject.itemToXml(myStringBuilder, "place", "two");
        Mockingbird.setNormalReturnForVoid();
        CrapProject.itemToXml(myStringBuilder, "value", "0");
        Mockingbird.setNormalReturnForVoid();
        CrapProject.itemToXml(myStringBuilder, "height", "0.00px");
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(myStringBuilder.end("</hist>"), myStringBuilder);
        Mockingbird.setReturnValue(true, Integer.class, "toString", "(int)java.lang.String", new Object[] {new Integer(0)}, "0", 1);
        Mockingbird.setReturnValue(false, decimalFormat, "format", "(double)java.lang.String", new Object[] {new Double(0.0)}, "0.00", 1);
        Mockingbird.setReturnValue(myStringBuilder.start("<hist>"), myStringBuilder);
        CrapProject.itemToXml(myStringBuilder, "place", "four");
        Mockingbird.setNormalReturnForVoid();
        CrapProject.itemToXml(myStringBuilder, "value", "0");
        Mockingbird.setNormalReturnForVoid();
        CrapProject.itemToXml(myStringBuilder, "height", "0.00px");
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(myStringBuilder.end("</hist>"), myStringBuilder);
        Mockingbird.setReturnValue(true, Integer.class, "toString", "(int)java.lang.String", new Object[] {new Integer(0)}, "0", 1);
        Mockingbird.setReturnValue(false, decimalFormat, "format", "(double)java.lang.String", new Object[] {new Double(0.0)}, "0.00", 1);
        Mockingbird.setReturnValue(myStringBuilder.start("<hist>"), myStringBuilder);
        CrapProject.itemToXml(myStringBuilder, "place", "eight");
        Mockingbird.setNormalReturnForVoid();
        CrapProject.itemToXml(myStringBuilder, "value", "0");
        Mockingbird.setNormalReturnForVoid();
        CrapProject.itemToXml(myStringBuilder, "height", "0.00px");
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(myStringBuilder.end("</hist>"), myStringBuilder);
        Mockingbird.setReturnValue(true, Integer.class, "toString", "(int)java.lang.String", new Object[] {new Integer(0)}, "0", 1);
        Mockingbird.setReturnValue(false, decimalFormat, "format", "(double)java.lang.String", new Object[] {new Double(0.0)}, "0.00", 1);
        Mockingbird.setReturnValue(myStringBuilder.start("<hist>"), myStringBuilder);
        CrapProject.itemToXml(myStringBuilder, "place", "sixteen");
        Mockingbird.setNormalReturnForVoid();
        CrapProject.itemToXml(myStringBuilder, "value", "0");
        Mockingbird.setNormalReturnForVoid();
        CrapProject.itemToXml(myStringBuilder, "height", "0.00px");
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(myStringBuilder.end("</hist>"), myStringBuilder);
        Mockingbird.setReturnValue(true, Integer.class, "toString", "(int)java.lang.String", new Object[] {new Integer(0)}, "0", 1);
        Mockingbird.setReturnValue(false, decimalFormat, "format", "(double)java.lang.String", new Object[] {new Double(0.0)}, "0.00", 1);
        Mockingbird.setReturnValue(myStringBuilder.start("<hist>"), myStringBuilder);
        CrapProject.itemToXml(myStringBuilder, "place", "thirtytwo");
        Mockingbird.setNormalReturnForVoid();
        CrapProject.itemToXml(myStringBuilder, "value", "0");
        Mockingbird.setNormalReturnForVoid();
        CrapProject.itemToXml(myStringBuilder, "height", "0.00px");
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(myStringBuilder.end("</hist>"), myStringBuilder);
        Mockingbird.setReturnValue(true, Integer.class, "toString", "(int)java.lang.String", new Object[] {new Integer(1)}, "1", 1);
        Mockingbird.setReturnValue(true, Math.class, "max", "(float,float)float", new Object[] {new Float(170.0F), new Float(28.0F)}, new Float(170.0F), 1);
        Mockingbird.setReturnValue(false, decimalFormat, "format", "(double)java.lang.String", new Object[] {new Double(170.0)}, "170.00", 1);
        Mockingbird.setReturnValue(myStringBuilder.start("<hist>"), myStringBuilder);
        CrapProject.itemToXml(myStringBuilder, "place", "sixtyfour");
        Mockingbird.setNormalReturnForVoid();
        CrapProject.itemToXml(myStringBuilder, "value", "1");
        Mockingbird.setNormalReturnForVoid();
        CrapProject.itemToXml(myStringBuilder, "height", "170.00px");
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(myStringBuilder.end("</hist>"), myStringBuilder);
        Mockingbird.setReturnValue(true, Integer.class, "toString", "(int)java.lang.String", new Object[] {new Integer(0)}, "0", 1);
        Mockingbird.setReturnValue(false, decimalFormat, "format", "(double)java.lang.String", new Object[] {new Double(0.0)}, "0.00", 1);
        Mockingbird.setReturnValue(myStringBuilder.start("<hist>"), myStringBuilder);
        CrapProject.itemToXml(myStringBuilder, "place", "one28");
        Mockingbird.setNormalReturnForVoid();
        CrapProject.itemToXml(myStringBuilder, "value", "0");
        Mockingbird.setNormalReturnForVoid();
        CrapProject.itemToXml(myStringBuilder, "height", "0.00px");
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(myStringBuilder.end("</hist>"), myStringBuilder);
        Mockingbird.setReturnValue(true, Integer.class, "toString", "(int)java.lang.String", new Object[] {new Integer(0)}, "0", 1);
        Mockingbird.setReturnValue(false, decimalFormat, "format", "(double)java.lang.String", new Object[] {new Double(0.0)}, "0.00", 1);
        Mockingbird.setReturnValue(myStringBuilder.start("<hist>"), myStringBuilder);
        CrapProject.itemToXml(myStringBuilder, "place", "two56");
        Mockingbird.setNormalReturnForVoid();
        CrapProject.itemToXml(myStringBuilder, "value", "0");
        Mockingbird.setNormalReturnForVoid();
        CrapProject.itemToXml(myStringBuilder, "height", "0.00px");
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(myStringBuilder.end("</hist>"), myStringBuilder);
        Mockingbird.setReturnValue(myStringBuilder.end("</histogram>"), myStringBuilder);
        Mockingbird.setReturnValue(myStringBuilder.end("</stats>"), myStringBuilder);
        Mockingbird.setReturnValue(myStringBuilder.start("<methods>"), myStringBuilder);
        Mockingbird.setReturnValue(true, Collections.class, "sort", "(java.util.List,java.util.Comparator)void", null, 1);
        Iterator iterator13 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.setReturnValue(false, crapValues, "iterator", "()java.util.Iterator", new Object[] {}, iterator13, 1);
        Mockingbird.setReturnValue(false, iterator13, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator13, "next", "()java.lang.Object", new Object[] {}, methodCrap, 1);
        methodCrap.toXml(myStringBuilder);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(false, iterator13, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator13, "next", "()java.lang.Object", new Object[] {}, methodCrap2, 1);
        methodCrap2.toXml(myStringBuilder);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(false, iterator13, "hasNext", "()boolean", new Object[] {}, Boolean.FALSE, 1);
        Mockingbird.setReturnValue(myStringBuilder.end("</methods>"), myStringBuilder);
        Mockingbird.setReturnValue(myStringBuilder.end("</crap_result>"), myStringBuilder);
        Mockingbird.setReturnValue(myStringBuilder.toString(), "<crap_result>\n  <project>\n    testString\n  </project>\n  <classDirectories>\n  </classDirectories>\n  <testClassDirectories>\n  </testClassDirectories>\n  <sourceDirectories>\n  </sourceDirectories>\n  <libClasspaths>\n  </libClasspaths>\n  <stats>\n    <name>\n      Method Cotunt: \n    </name>\n    <totalCrap>\n      70.00\n    </totalCrap>\n    <crap>\n      35.00\n    </crap>\n    <median>\n      70.00\n    </median>\n    <average>\n      35.00\n    </average>\n    <stdDev>\n      35.00\n    </stdDev>\n    <methodCount>\n      2\n    </methodCount>\n    <crapMethodCount>\n      0\n    </crapMethodCount>\n    <crapMethodPercent>\n      0.00\n    </crapMethodPercent>\n    <crapLoad>\n      0\n    </crapLoad>\n    <crapThreshold>\n      257\n    </crapThreshold>\n    <histogram>\n      <hist>\n        <place>\n          one\n        </place>\n        <value>\n          1\n        </value>\n        <height>\n          170.00px\n        </height>\n      </hist>\n      <hist>\n        <place>\n          two\n        </place>\n        <value>\n          0\n        </value>\n        <height>\n          0.00px\n        </height>\n      </hist>\n      <hist>\n        <place>\n          four\n        </place>\n        <value>\n          0\n        </value>\n        <height>\n          0.00px\n        </height>\n      </hist>\n      <hist>\n        <place>\n          eight\n        </place>\n        <value>\n          0\n        </value>\n        <height>\n          0.00px\n        </height>\n      </hist>\n      <hist>\n        <place>\n          sixteen\n        </place>\n        <value>\n          0\n        </value>\n        <height>\n          0.00px\n        </height>\n      </hist>\n      <hist>\n        <place>\n          thirtytwo\n        </place>\n        <value>\n          0\n        </value>\n        <height>\n          0.00px\n        </height>\n      </hist>\n      <hist>\n        <place>\n          sixtyfour\n        </place>\n        <value>\n          1\n        </value>\n        <height>\n          170.00px\n        </height>\n      </hist>\n      <hist>\n        <place>\n          one28\n        </place>\n        <value>\n          0\n        </value>\n        <height>\n          0.00px\n        </height>\n      </hist>\n      <hist>\n        <place>\n          two56\n        </place>\n        <value>\n          0\n        </value>\n        <height>\n          0.00px\n        </height>\n      </hist>\n    </histogram>\n  </stats>\n  <methods>\n    <method>\n      <package>\n        \n      </package>\n      <className>\n        C\n      </className>\n      <methodName>\n        testString\n      </methodName>\n      <methodSignature>\n        3\n      </methodSignature>\n      <fullMethod>\n        testString\n      </fullMethod>\n      <crap>\n        0.00\n      </crap>\n      <complexity>\n        0\n      </complexity>\n      <coverage>\n        100.00\n      </coverage>\n      <crapLoad>\n        0\n      </crapLoad>\n    </method>\n    <method>\n      <package>\n        \n      </package>\n      <className>\n        testString\n      </className>\n      <methodName>\n        testString\n      </methodName>\n      <methodSignature>\n        testString\n      </methodSignature>\n      <fullMethod>\n        testString\n      </fullMethod>\n      <crap>\n        70.00\n      </crap>\n      <complexity>\n        70\n      </complexity>\n      <coverage>\n        100.00\n      </coverage>\n      <crapLoad>\n        0\n      </crapLoad>\n    </method>\n  </methods>\n</crap_result>\n");
        File file = (File) Mockingbird.getProxyObject(File.class);
        Mockingbird.setReturnValue(crapProject.getReportFile(), file);
        FileUtil.writeFile(file, "<crap_result>\n  <project>\n    testString\n  </project>\n  <classDirectories>\n  </classDirectories>\n  <testClassDirectories>\n  </testClassDirectories>\n  <sourceDirectories>\n  </sourceDirectories>\n  <libClasspaths>\n  </libClasspaths>\n  <stats>\n    <name>\n      Method Cotunt: \n    </name>\n    <totalCrap>\n      70.00\n    </totalCrap>\n    <crap>\n      35.00\n    </crap>\n    <median>\n      70.00\n    </median>\n    <average>\n      35.00\n    </average>\n    <stdDev>\n      35.00\n    </stdDev>\n    <methodCount>\n      2\n    </methodCount>\n    <crapMethodCount>\n      0\n    </crapMethodCount>\n    <crapMethodPercent>\n      0.00\n    </crapMethodPercent>\n    <crapLoad>\n      0\n    </crapLoad>\n    <crapThreshold>\n      257\n    </crapThreshold>\n    <histogram>\n      <hist>\n        <place>\n          one\n        </place>\n        <value>\n          1\n        </value>\n        <height>\n          170.00px\n        </height>\n      </hist>\n      <hist>\n        <place>\n          two\n        </place>\n        <value>\n          0\n        </value>\n        <height>\n          0.00px\n        </height>\n      </hist>\n      <hist>\n        <place>\n          four\n        </place>\n        <value>\n          0\n        </value>\n        <height>\n          0.00px\n        </height>\n      </hist>\n      <hist>\n        <place>\n          eight\n        </place>\n        <value>\n          0\n        </value>\n        <height>\n          0.00px\n        </height>\n      </hist>\n      <hist>\n        <place>\n          sixteen\n        </place>\n        <value>\n          0\n        </value>\n        <height>\n          0.00px\n        </height>\n      </hist>\n      <hist>\n        <place>\n          thirtytwo\n        </place>\n        <value>\n          0\n        </value>\n        <height>\n          0.00px\n        </height>\n      </hist>\n      <hist>\n        <place>\n          sixtyfour\n        </place>\n        <value>\n          1\n        </value>\n        <height>\n          170.00px\n        </height>\n      </hist>\n      <hist>\n        <place>\n          one28\n        </place>\n        <value>\n          0\n        </value>\n        <height>\n          0.00px\n        </height>\n      </hist>\n      <hist>\n        <place>\n          two56\n        </place>\n        <value>\n          0\n        </value>\n        <height>\n          0.00px\n        </height>\n      </hist>\n    </histogram>\n  </stats>\n  <methods>\n    <method>\n      <package>\n        \n      </package>\n      <className>\n        C\n      </className>\n      <methodName>\n        testString\n      </methodName>\n      <methodSignature>\n        3\n      </methodSignature>\n      <fullMethod>\n        testString\n      </fullMethod>\n      <crap>\n        0.00\n      </crap>\n      <complexity>\n        0\n      </complexity>\n      <coverage>\n        100.00\n      </coverage>\n      <crapLoad>\n        0\n      </crapLoad>\n    </method>\n    <method>\n      <package>\n        \n      </package>\n      <className>\n        testString\n      </className>\n      <methodName>\n        testString\n      </methodName>\n      <methodSignature>\n        testString\n      </methodSignature>\n      <fullMethod>\n        testString\n      </fullMethod>\n      <crap>\n        70.00\n      </crap>\n      <complexity>\n        70\n      </complexity>\n      <coverage>\n        100.00\n      </coverage>\n      <crapLoad>\n        0\n      </crapLoad>\n    </method>\n  </methods>\n</crap_result>\n");
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(crapProject.outputDir(), "/home/agitar/work/sexy-dolphin-05-agitar-0/tmp/agitar-agitar/Agitator48455.dir/Agitator71.tmp");
        CrapImageGenerator crapImageGenerator = (CrapImageGenerator) Mockingbird.getProxyObject(CrapImageGenerator.class);
        Mockingbird.replaceObjectForRecording(CrapImageGenerator.class, "<init>(float,java.lang.String,java.lang.String,float,float)", crapImageGenerator);
        crapImageGenerator.makeGaugeAndWriteToFile();
        Mockingbird.setExceptionForVoid((Throwable) Mockingbird.getProxyObject(IllegalArgumentException.class));
        Mockingbird.enterTestMode(SystemCrapStats.class);
        try {
            systemCrapStats.writeReport();
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertSame("systemCrapStats.getSubjects()", crapValues, systemCrapStats.getSubjects());
        }
    }
    
    public void testWriteReportThrowsIllegalArgumentException3() throws Throwable {
        CrapProject crapProject = new CrapProject("testSystemCrapStatsProjectDir", new ArrayList(100), new ArrayList(1000), new ArrayList(0), new ArrayList(1), "/home/agitar/work/sexy-dolphin-05-agitar-0/tmp/agitar-agitar/Agitator48455.dir/Agitator71.tmp");
        List crapValues = new ArrayList(10);
        MethodComplexity complexity2 = new MethodComplexity("testSystemCrapStatsMethodSignature", "testSystemCrapStatsPkgclassName", "testSystemCrapStatsMethodName", "testSystemCrapStatsMethodDescriptor", "testSystemCrapStatsJava5Signature", 13, "testSystemCrapStatsPrettyMethodSignature");
        crapValues.add(new MethodCrap("testSystemCrapStatsMethodSignature", 0.0F, complexity2));
        SystemCrapStats systemCrapStats = new SystemCrapStats(crapValues, "testSystemCrapStatsName", crapProject, 100.0F, 1000.0F, 0.0F);
        try {
            systemCrapStats.writeReport();
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertEquals("ex.getMessage()", "Width (0) and height (0) cannot be <= 0", ex.getMessage());
            assertThrownBy(DirectColorModel.class, ex);
            assertSame("systemCrapStats.getSubjects()", crapValues, systemCrapStats.getSubjects());
        }
    }
    
    public void testWriteReportThrowsIllegalArgumentException4() throws Throwable {
        CrapProject crapProject = new CrapProject("testSystemCrapStatsProjectDir", new ArrayList(100), new ArrayList(1000), new ArrayList(0), new ArrayList(1), "/home/agitar/work/sexy-dolphin-05-agitar-0/tmp/agitar-agitar/Agitator48455.dir/Agitator71.tmp");
        List crapValues = new ArrayList(10);
        MethodComplexity complexity2 = new MethodComplexity("testSystemCrapStatsMethodSignature", "testSystemCrapStatsPkgclassName", "testSystemCrapStatsMethodName", "testSystemCrapStatsMethodDescriptor", "testSystemCrapStatsJava5Signature", 0, "testSystemCrapStatsPrettyMethodSignature");
        crapValues.add(new MethodCrap("testSystemCrapStatsMethodSignature", 0.0F, complexity2));
        SystemCrapStats systemCrapStats = new SystemCrapStats(crapValues, "testSystemCrapStatsName", crapProject, 100.0F, 1000.0F, 0.0F);
        try {
            systemCrapStats.writeReport();
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertEquals("ex.getMessage()", "Width (0) and height (0) cannot be <= 0", ex.getMessage());
            assertThrownBy(DirectColorModel.class, ex);
            assertSame("systemCrapStats.getSubjects()", crapValues, systemCrapStats.getSubjects());
        }
    }
    
    public void testWriteReportThrowsIllegalArgumentException5() throws Throwable {
        MethodComplexity complexity2 = new MethodComplexity("testSystemCrapStatsMethodSignature", "testSystemCrapStatsPkgclassName", "testSystemCrapStatsMethodName", "testSystemCrapStatsMethodDescriptor", "testSystemCrapStatsJava5Signature", 100, "testSystemCrapStatsPrettyMethodSignature");
        MethodCrap methodCrap = new MethodCrap("testSystemCrapStatsMethodSignature", 1.0F, complexity2);
        List crapValues = new ArrayList(100);
        crapValues.add(methodCrap);
        crapValues.add(new MethodCrap("testSystemCrapStatsMethodSignature1", 0.0F, complexity2));
        CrapProject crapProject = new CrapProject("testSystemCrapStatsProjectDir", new ArrayList(1000), new ArrayList(0), new ArrayList(1), new ArrayList(10), "/home/agitar/work/sexy-dolphin-05-agitar-0/tmp/agitar-agitar/Agitator48455.dir/Agitator71.tmp");
        SystemCrapStats systemCrapStats = new SystemCrapStats(crapValues, "testSystemCrapStatsName", crapProject, 100.0F, 1000.0F, 0.0F);
        try {
            systemCrapStats.writeReport();
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertEquals("ex.getMessage()", "Width (0) and height (0) cannot be <= 0", ex.getMessage());
            assertThrownBy(DirectColorModel.class, ex);
            assertSame("systemCrapStats.getSubjects()", crapValues, systemCrapStats.getSubjects());
        }
    }
    
    public void testWriteReportThrowsIllegalArgumentException6() throws Throwable {
        CrapProject crapProject = new CrapProject("testSystemCrapStatsProjectDir", new ArrayList(100), new ArrayList(1000), new ArrayList(0), new ArrayList(1), "/home/agitar/work/sexy-dolphin-05-agitar-0/tmp/agitar-agitar/Agitator48455.dir/Agitator71.tmp");
        List crapValues = new ArrayList(10);
        SystemCrapStats systemCrapStats = new SystemCrapStats(crapValues, "testSystemCrapStatsName", crapProject, 100.0F, 1000.0F, 0.0F);
        try {
            systemCrapStats.writeReport();
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertEquals("ex.getMessage()", "Width (0) and height (0) cannot be <= 0", ex.getMessage());
            assertThrownBy(DirectColorModel.class, ex);
            assertSame("systemCrapStats.getSubjects()", crapValues, systemCrapStats.getSubjects());
        }
    }
    
    public void testWriteReportThrowsNullPointerException() throws Throwable {
        List crapValues = new ArrayList(100);
        SystemCrapStats systemCrapStats = new SystemCrapStats(crapValues, "testSystemCrapStatsName", null, 100.0F, 1000.0F, 0.0F);
        try {
            systemCrapStats.writeReport();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(SystemCrapStats.class, ex);
            assertSame("systemCrapStats.getSubjects()", crapValues, systemCrapStats.getSubjects());
        }
    }
    
    public void testWriteReportThrowsNullPointerException1() throws Throwable {
        ArrayList crapValues = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        SystemCrapStats systemCrapStats = new SystemCrapStats(crapValues, "testSystemCrapStatsName", (CrapProject) Mockingbird.getProxyObject(CrapProject.class), 100.0F, 1000.0F, 0.0F);
        Mockingbird.enterTestMode(SystemCrapStats.class);
        try {
            systemCrapStats.writeReport();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(CrapProject.class, ex);
            assertSame("systemCrapStats.getSubjects()", crapValues, systemCrapStats.getSubjects());
        }
    }
    
    public void testWriteXmlToFileThrowsNullPointerException() throws Throwable {
        CrapProject crapProject = new CrapProject("testSystemCrapStatsProjectDir", new ArrayList(1000), new ArrayList(0), new ArrayList(1), new ArrayList(10), "/home/agitar/work/sexy-dolphin-05-agitar-0/tmp/agitar-agitar/Agitator48455.dir/Agitator71.tmp");
        SystemCrapStats systemCrapStats = new SystemCrapStats(new ArrayList(100), "testSystemCrapStatsName", crapProject, 100.0F, 1000.0F, 0.0F);
        try {
            systemCrapStats.writeXmlToFile(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(Writer.class, ex);
        }
    }
    
    public void testWriteXmlToFileThrowsNullPointerException1() throws Throwable {
        SystemCrapStats systemCrapStats = new SystemCrapStats(new ArrayList(100), "testSystemCrapStatsName", null, 100.0F, 1000.0F, 0.0F);
        try {
            systemCrapStats.writeXmlToFile("testSystemCrapStatsStatsXml");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(SystemCrapStats.class, ex);
        }
    }
}

