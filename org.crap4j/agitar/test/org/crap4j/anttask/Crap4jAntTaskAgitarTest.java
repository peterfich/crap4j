/**
 * Generated by Agitar build: JUnitFactory Version 2.1.0.000576 (Build date: Oct 19, 2007) [2.1.0.000576]
 * JDK Version: 1.5.0_11
 *
 * Generated on Nov 1, 2007 12:04:23 AM
 * Time to generate: 02:40.713 seconds
 *
 */

package org.crap4j.anttask;

import com.agitar.lib.junit.AgitarTestCase;
import com.agitar.lib.mockingbird.Mockingbird;
import com.agitar.lib.mockingbird.MockingbirdSystem;
import java.io.File;
import java.io.IOException;
import java.io.PrintStream;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import org.apache.tools.ant.BuildException;
import org.apache.tools.ant.Project;
import org.apache.tools.ant.types.Path;
import org.crap4j.CrapProject;
import org.crap4j.Main;

public class Crap4jAntTaskAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return Crap4jAntTask.class;
    }
    
    public void testConstructor() throws Throwable {
        Crap4jAntTask crap4jAntTask = new Crap4jAntTask();
        assertNull("crap4jAntTask.getLocation().getFileName()", crap4jAntTask.getLocation().getFileName());
    }
    
    public void testCrapjAntTask() throws Throwable {
        Project project = new Project();
        Crap4jAntTask crap4jAntTask = new Crap4jAntTask();
        crap4jAntTask.CrapjAntTask(project);
        assertSame("crap4jAntTask.antProject", project, getPrivateField(crap4jAntTask, "antProject"));
    }
    
    public void testCreateClassDirs() throws Throwable {
        Crap4jAntTask crap4jAntTask = new Crap4jAntTask();
        Path result = crap4jAntTask.createClassDirs();
        assertNotNull("crap4jAntTask.getClassDirs()", crap4jAntTask.getClassDirs());
        assertNotNull("result", result);
    }
    
    public void testCreateClassDirs1() throws Throwable {
        Crap4jAntTask crap4jAntTask = new Crap4jAntTask();
        Path classDirs = crap4jAntTask.createClassDirs();
        Path result = crap4jAntTask.createClassDirs();
        assertEquals("crap4jAntTask.getClassDirs().elements.size()", 2, ((Collection) getPrivateField(crap4jAntTask.getClassDirs(), "elements")).size());
        assertSame("crap4jAntTask.getClassDirs().elements.get(0)", classDirs, ((List) getPrivateField(crap4jAntTask.getClassDirs(), "elements")).get(0));
        assertNotNull("result", result);
        assertNotNull("crap4jAntTask.getClassDirs()", crap4jAntTask.getClassDirs());
    }
    
    public void testCreateLibClasspath() throws Throwable {
        Crap4jAntTask crap4jAntTask = new Crap4jAntTask();
        Path libClasspath = crap4jAntTask.createLibClasspath();
        Path result = crap4jAntTask.createLibClasspath();
        int actual = ((Collection) getPrivateField(crap4jAntTask.getLibClasspath(), "elements")).size();
        assertEquals("crap4jAntTask.getLibClasspath().elements.size()", 2, actual);
        assertSame("crap4jAntTask.getLibClasspath().elements.get(0)", libClasspath, ((List) getPrivateField(crap4jAntTask.getLibClasspath(), "elements")).get(0));
        assertNotNull("result", result);
        assertNotNull("crap4jAntTask.getLibClasspath()", crap4jAntTask.getLibClasspath());
    }
    
    public void testCreateLibClasspath1() throws Throwable {
        Crap4jAntTask crap4jAntTask = new Crap4jAntTask();
        Path result = crap4jAntTask.createLibClasspath();
        assertNotNull("crap4jAntTask.getLibClasspath()", crap4jAntTask.getLibClasspath());
        assertNotNull("result", result);
    }
    
    public void testCreateSrcDirs() throws Throwable {
        Crap4jAntTask crap4jAntTask = new Crap4jAntTask();
        Path result = crap4jAntTask.createSrcDirs();
        assertNotNull("crap4jAntTask.getSrcDirs()", crap4jAntTask.getSrcDirs());
        assertNotNull("result", result);
    }
    
    public void testCreateTestClassDirs() throws Throwable {
        Crap4jAntTask crap4jAntTask = new Crap4jAntTask();
        Path result = crap4jAntTask.createTestClassDirs();
        assertNotNull("crap4jAntTask.getTestClassDirs()", crap4jAntTask.getTestClassDirs());
        assertNotNull("result", result);
    }
    
    public void testExecuteWithAggressiveMocks() throws Throwable {
        Crap4jAntTask crap4jAntTask = (Crap4jAntTask) Mockingbird.getProxyObject(Crap4jAntTask.class, true);
        File file = (File) Mockingbird.getProxyObject(File.class);
        Path path = (Path) Mockingbird.getProxyObject(Path.class);
        Path path2 = (Path) Mockingbird.getProxyObject(Path.class);
        Path path3 = (Path) Mockingbird.getProxyObject(Path.class);
        String[] strings = new String[0];
        String[] strings2 = new String[0];
        String[] strings3 = new String[2];
        Main main = (Main) Mockingbird.getProxyObject(Main.class);
        IOException iOException = (IOException) Mockingbird.getProxyObject(IOException.class);
        crap4jAntTask.setProjectDir(file);
        crap4jAntTask.setLibClasspath(path);
        crap4jAntTask.setTestClassDirs(path2);
        crap4jAntTask.setClassDirs(path3);
        crap4jAntTask.setSrcDirs(null);
        crap4jAntTask.setOutputDir(null);
        crap4jAntTask.setDebug(true);
        crap4jAntTask.setDontTest(false);
        PrintStream printStream = (PrintStream) Mockingbird.getProxyObject(PrintStream.class);
        MockingbirdSystem.out = printStream;
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        strings3[0] = "";
        strings3[1] = "";
        Mockingbird.setReturnValue(false, printStream, "println", "(java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, printStream, "println", "(java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, printStream, "println", "(java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(path3.list(), strings);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, printStream, "println", "(java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(path2.list(), strings2);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, printStream, "println", "(java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(path.list(), strings3);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, printStream, "println", "(java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(false, file, "getAbsolutePath", "()java.lang.String", new Object[] {}, "", 1);
        Mockingbird.setReturnValue(false, crap4jAntTask, "makeListFrom", "(org.apache.tools.ant.types.Path)java.util.List", new Object[] {path}, null, 1);
        Mockingbird.setReturnValue(false, crap4jAntTask, "makeListFrom", "(org.apache.tools.ant.types.Path)java.util.List", new Object[] {path2}, null, 1);
        Mockingbird.setReturnValue(false, crap4jAntTask, "makeListFrom", "(org.apache.tools.ant.types.Path)java.util.List", new Object[] {path3}, null, 1);
        Mockingbird.setReturnValue(false, crap4jAntTask, "makeListFrom", "(org.apache.tools.ant.types.Path)java.util.List", new Object[] {null}, null, 1);
        Mockingbird.replaceObjectForRecording(CrapProject.class, "<init>(java.lang.String,java.util.List,java.util.List,java.util.List,java.util.List,java.lang.String)", Mockingbird.getProxyObject(CrapProject.class));
        Mockingbird.setReturnValue(Main.createMain(), main);
        Mockingbird.setException(false, main, "run", "(org.crap4j.CrapProject,boolean,boolean)void", iOException, 1);
        Mockingbird.setReturnValue(false, iOException, "printStackTrace", "()void", new Object[] {}, null, 1);
        Mockingbird.enterTestMode(Crap4jAntTask.class);
        crap4jAntTask.execute();
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testExecuteWithAggressiveMocks1() throws Throwable {
        Crap4jAntTask crap4jAntTask = (Crap4jAntTask) Mockingbird.getProxyObject(Crap4jAntTask.class, true);
        File file = (File) Mockingbird.getProxyObject(File.class);
        Path path = (Path) Mockingbird.getProxyObject(Path.class);
        Path path2 = (Path) Mockingbird.getProxyObject(Path.class);
        Path path3 = (Path) Mockingbird.getProxyObject(Path.class);
        File file2 = (File) Mockingbird.getProxyObject(File.class);
        String[] strings = new String[0];
        String[] strings2 = new String[0];
        String[] strings3 = new String[2];
        Main main = (Main) Mockingbird.getProxyObject(Main.class);
        crap4jAntTask.setProjectDir(file);
        crap4jAntTask.setLibClasspath(path);
        crap4jAntTask.setTestClassDirs(path2);
        crap4jAntTask.setClassDirs(path3);
        crap4jAntTask.setSrcDirs(null);
        crap4jAntTask.setOutputDir(file2);
        crap4jAntTask.setDebug(true);
        crap4jAntTask.setDontTest(false);
        PrintStream printStream = (PrintStream) Mockingbird.getProxyObject(PrintStream.class);
        MockingbirdSystem.out = printStream;
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        strings3[0] = "";
        strings3[1] = "";
        Mockingbird.setReturnValue(false, printStream, "println", "(java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, printStream, "println", "(java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, printStream, "println", "(java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(path3.list(), strings);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, printStream, "println", "(java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(path2.list(), strings2);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, printStream, "println", "(java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(path.list(), strings3);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, printStream, "println", "(java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(false, file, "getAbsolutePath", "()java.lang.String", new Object[] {}, "", 1);
        Mockingbird.setReturnValue(false, crap4jAntTask, "makeListFrom", "(org.apache.tools.ant.types.Path)java.util.List", new Object[] {path}, null, 1);
        Mockingbird.setReturnValue(false, crap4jAntTask, "makeListFrom", "(org.apache.tools.ant.types.Path)java.util.List", new Object[] {path2}, null, 1);
        Mockingbird.setReturnValue(false, crap4jAntTask, "makeListFrom", "(org.apache.tools.ant.types.Path)java.util.List", new Object[] {path3}, null, 1);
        Mockingbird.setReturnValue(false, crap4jAntTask, "makeListFrom", "(org.apache.tools.ant.types.Path)java.util.List", new Object[] {null}, null, 1);
        Mockingbird.setReturnValue(false, file2, "getAbsolutePath", "()java.lang.String", new Object[] {}, "", 1);
        Mockingbird.replaceObjectForRecording(CrapProject.class, "<init>(java.lang.String,java.util.List,java.util.List,java.util.List,java.util.List,java.lang.String)", Mockingbird.getProxyObject(CrapProject.class));
        Mockingbird.setReturnValue(Main.createMain(), main);
        Mockingbird.setReturnValue(false, main, "run", "(org.crap4j.CrapProject,boolean,boolean)void", null, 1);
        Mockingbird.enterTestMode(Crap4jAntTask.class);
        crap4jAntTask.execute();
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testMakeListFrom() throws Throwable {
        Crap4jAntTask crap4jAntTask = new Crap4jAntTask();
        Path path = (Path) Mockingbird.getProxyObject(Path.class);
        Mockingbird.enterRecordingMode();
        String[] strings = new String[12];
        strings[0] = "/home/agitar/webapps/agitar-server/eclipse/plugins/com.agitar.agitator_2.1.0.000576/com.agitar.agitator.jar";
        strings[1] = "/home/agitar/webapps/agitar-server/eclipse/plugins/com.agitar.agitator_2.1.0.000576/lib/agitator-lib.jar";
        strings[2] = "/home/agitar/webapps/agitar-server/eclipse/plugins/com.agitar.agitator_2.1.0.000576/lib/checkstyle-4.1.jar";
        strings[3] = "/home/agitar/webapps/agitar-server/eclipse/plugins/com.agitar.agitator_2.1.0.000576/lib/checkstyle-optional-4.1.jar";
        strings[4] = "/home/agitar/webapps/agitar-server/eclipse/plugins/com.agitar.eclipse.coverage_2.1.0.000576/com.agitar.common.jar";
        strings[5] = "/home/agitar/webapps/agitar-server/eclipse/plugins/com.agitar.eclipse.api_2.1.0.000576/com.agitar.mockingbird.jar";
        strings[6] = "/home/agitar/webapps/agitar-server/eclipse/plugins/com.agitar.eclipse.api_2.1.0.000576/lib/junit.jar";
        strings[7] = "/home/agitar/platforms/linux/x86/eclipse/plugins/org.junit_3.8.2.v200706111738/junit.jar";
        strings[8] = "/home/agitar/work/sexy-dolphin-04-agitar-1/b2327b840ef1ed2634683c1df47b37d4/org.crap4j/bin";
        strings[9] = "/home/agitar/work/sexy-dolphin-04-agitar-1/b2327b840ef1ed2634683c1df47b37d4/org.crap4j/test_bin";
        strings[10] = "/home/agitar/work/sexy-dolphin-04-agitar-1/b2327b840ef1ed2634683c1df47b37d4/org.crap4j/integration_tests_bin";
        strings[11] = "/home/agitar/work/sexy-dolphin-04-agitar-1/b2327b840ef1ed2634683c1df47b37d4/org.crap4j/agitar/test_bin";
        Mockingbird.setReturnValue(path.list(), strings);
        Mockingbird.enterTestMode(Crap4jAntTask.class);
        ArrayList result = (ArrayList) callPrivateMethod("org.crap4j.anttask.Crap4jAntTask", "makeListFrom", new Class[] {Path.class}, crap4jAntTask, new Object[] {path});
        assertEquals("result.size()", 12, result.size());
        assertEquals("(ArrayList) result.get(0)", "/home/agitar/webapps/agitar-server/eclipse/plugins/com.agitar.agitator_2.1.0.000576/com.agitar.agitator.jar", ((List) result).get(0));
    }
    
    public void testSetClassDirs() throws Throwable {
        new Crap4jAntTask().setClassDirs(Path.systemClasspath);
        
    }
    
    public void testSetCrap4jHome() throws Throwable {
        Crap4jAntTask crap4jAntTask = new Crap4jAntTask();
        crap4jAntTask.setCrap4jHome("testCrap4jAntTaskParam1");
        assertEquals("crap4jAntTask.getCrap4jHome()", "testCrap4jAntTaskParam1", crap4jAntTask.getCrap4jHome());
    }
    
    public void testSetDebug() throws Throwable {
        Crap4jAntTask crap4jAntTask = new Crap4jAntTask();
        crap4jAntTask.setDebug(true);
        assertTrue("crap4jAntTask.isDebug()", crap4jAntTask.isDebug());
    }
    
    public void testSetDontTest() throws Throwable {
        Crap4jAntTask crap4jAntTask = new Crap4jAntTask();
        crap4jAntTask.setDontTest(true);
        assertTrue("crap4jAntTask.isDontTest()", crap4jAntTask.isDontTest());
    }
    
    public void testSetLibClasspath() throws Throwable {
        Path libClasspath = new Crap4jAntTask().createLibClasspath();
        Crap4jAntTask crap4jAntTask = new Crap4jAntTask();
        crap4jAntTask.setLibClasspath(libClasspath);
        assertSame("crap4jAntTask.getLibClasspath()", libClasspath, crap4jAntTask.getLibClasspath());
    }
    
    public void testSetOutputDir() throws Throwable {
        File file = new File("testCrap4jAntTaskParam1");
        Crap4jAntTask crap4jAntTask = new Crap4jAntTask();
        crap4jAntTask.setOutputDir(file);
        assertSame("crap4jAntTask.getOutputDir()", file, crap4jAntTask.getOutputDir());
    }
    
    public void testSetProjectDir() throws Throwable {
        File file = new File("testCrap4jAntTaskParam1");
        Crap4jAntTask crap4jAntTask = new Crap4jAntTask();
        crap4jAntTask.setProjectDir(file);
        assertSame("crap4jAntTask.getProjectDir()", file, crap4jAntTask.getProjectDir());
    }
    
    public void testSetSrcDirs() throws Throwable {
        Path srcDirs = new Crap4jAntTask().createSrcDirs();
        Crap4jAntTask crap4jAntTask = new Crap4jAntTask();
        crap4jAntTask.setSrcDirs(srcDirs);
        assertSame("crap4jAntTask.getSrcDirs()", srcDirs, crap4jAntTask.getSrcDirs());
    }
    
    public void testSetTestClassDirs() throws Throwable {
        Path systemClasspath = Path.systemClasspath;
        Crap4jAntTask crap4jAntTask = new Crap4jAntTask();
        crap4jAntTask.setTestClassDirs(systemClasspath);
        assertSame("crap4jAntTask.getTestClassDirs()", systemClasspath, crap4jAntTask.getTestClassDirs());
    }
    
    public void testStringOf() throws Throwable {
        Crap4jAntTask crap4jAntTask = new Crap4jAntTask();
        String result = (String) callPrivateMethod("org.crap4j.anttask.Crap4jAntTask", "stringOf", new Class[] {Path.class}, crap4jAntTask, new Object[] {new Path(new Project())});
        assertEquals("result", "", result);
    }
    
    public void testStringOf1() throws Throwable {
        Crap4jAntTask crap4jAntTask = new Crap4jAntTask();
        Path path = (Path) Mockingbird.getProxyObject(Path.class);
        Mockingbird.enterRecordingMode();
        String[] strings = new String[12];
        strings[0] = "/home/agitar/webapps/agitar-server/eclipse/plugins/com.agitar.agitator_2.1.0.000576/com.agitar.agitator.jar";
        strings[1] = "/home/agitar/webapps/agitar-server/eclipse/plugins/com.agitar.agitator_2.1.0.000576/lib/agitator-lib.jar";
        strings[2] = "/home/agitar/webapps/agitar-server/eclipse/plugins/com.agitar.agitator_2.1.0.000576/lib/checkstyle-4.1.jar";
        strings[3] = "/home/agitar/webapps/agitar-server/eclipse/plugins/com.agitar.agitator_2.1.0.000576/lib/checkstyle-optional-4.1.jar";
        strings[4] = "/home/agitar/webapps/agitar-server/eclipse/plugins/com.agitar.eclipse.coverage_2.1.0.000576/com.agitar.common.jar";
        strings[5] = "/home/agitar/webapps/agitar-server/eclipse/plugins/com.agitar.eclipse.api_2.1.0.000576/com.agitar.mockingbird.jar";
        strings[6] = "/home/agitar/webapps/agitar-server/eclipse/plugins/com.agitar.eclipse.api_2.1.0.000576/lib/junit.jar";
        strings[7] = "/home/agitar/platforms/linux/x86/eclipse/plugins/org.junit_3.8.2.v200706111738/junit.jar";
        strings[8] = "/home/agitar/work/sexy-dolphin-04-agitar-1/b2327b840ef1ed2634683c1df47b37d4/org.crap4j/bin";
        strings[9] = "/home/agitar/work/sexy-dolphin-04-agitar-1/b2327b840ef1ed2634683c1df47b37d4/org.crap4j/test_bin";
        strings[10] = "/home/agitar/work/sexy-dolphin-04-agitar-1/b2327b840ef1ed2634683c1df47b37d4/org.crap4j/integration_tests_bin";
        strings[11] = "/home/agitar/work/sexy-dolphin-04-agitar-1/b2327b840ef1ed2634683c1df47b37d4/org.crap4j/agitar/test_bin";
        Mockingbird.setReturnValue(path.list(), strings);
        Mockingbird.enterTestMode(Crap4jAntTask.class);
        String result = (String) callPrivateMethod("org.crap4j.anttask.Crap4jAntTask", "stringOf", new Class[] {Path.class}, crap4jAntTask, new Object[] {path});
        Object obj = "/home/agitar/webapps/agitar-server/eclipse/plugins/com.agitar.agitator_2.1.0.000576/com.agitar.agitator.jar, /home/agitar/webapps/agitar-server/eclipse/plugins/com.agitar.agitator_2.1.0.000576/lib/agitator-lib.jar, /home/agitar/webapps/agitar-server/eclipse/plugins/com.agitar.agitator_2.1.0.000576/lib/checkstyle-4.1.jar, /home/agitar/webapps/agitar-server/eclipse/plugins/com.agitar.agitator_2.1.0.000576/lib/checkstyle-optional-4.1.jar, /home/agitar/webapps/agitar-server/eclipse/plugins/com.agitar.eclipse.coverage_2.1.0.000576/com.agitar.common.jar, /home/agitar/webapps/agitar-server/eclipse/plugins/com.agitar.eclipse.api_2.1.0.000576/com.agitar.mockingbird.jar, /home/agitar/webapps/agitar-server/eclipse/plugins/com.agitar.eclipse.api_2.1.0.000576/lib/junit.jar, /home/agitar/platforms/linux/x86/eclipse/plugins/org.junit_3.8.2.v200706111738/junit.jar, " + new File("bin,").getAbsolutePath();
        Object obj2 = obj + " " + new File("test_bin,").getAbsolutePath() + " " + new File("integration_tests_bin,").getAbsolutePath();
        assertEquals("result", obj2 + " " + new File("agitar/test_bin,").getAbsolutePath() + " ", result);
    }
    
    public void testCreateClassDirsThrowsBuildException() throws Throwable {
        Crap4jAntTask crap4jAntTask = new Crap4jAntTask();
        Mockingbird.enterRecordingMode();
        Mockingbird.setException(true, ((Path) Mockingbird.getProxyObject(Path.class)).createPath(), (Throwable) Mockingbird.getProxyObject(BuildException.class));
        Mockingbird.enterTestMode(Crap4jAntTask.class);
        try {
            crap4jAntTask.createClassDirs();
            fail("Expected BuildException to be thrown");
        } catch (BuildException ex) {
            assertNotNull("crap4jAntTask.getClassDirs()", crap4jAntTask.getClassDirs());
        }
    }
    
    public void testCreateCrapProjectThrowsBuildException() throws Throwable {
        Crap4jAntTask crap4jAntTask = new Crap4jAntTask();
        File projectDir = (File) Mockingbird.getProxyObject(File.class);
        crap4jAntTask.setProjectDir(projectDir);
        crap4jAntTask.createTestClassDirs();
        Path path = (Path) Mockingbird.getProxyObject(Path.class);
        crap4jAntTask.setClassDirs(path);
        crap4jAntTask.createLibClasspath();
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, projectDir, "getAbsolutePath", "()java.lang.String", new Object[] {}, "/home/agitar/work/sexy-dolphin-04-agitar-1/b2327b840ef1ed2634683c1df47b37d4/org.crap4j/testCrap4jAntTaskParam1", 1);
        Mockingbird.setException(path.list(), (Throwable) Mockingbird.getProxyObject(BuildException.class));
        Mockingbird.enterTestMode(Crap4jAntTask.class);
        try {
            callPrivateMethod("org.crap4j.anttask.Crap4jAntTask", "createCrapProject", new Class[] {}, crap4jAntTask, new Object[] {});
            fail("Expected BuildException to be thrown");
        } catch (BuildException ex) {
            assertSame("crap4jAntTask.getClassDirs()", path, crap4jAntTask.getClassDirs());
            assertNull("crap4jAntTask.getOutputDir()", crap4jAntTask.getOutputDir());
            assertNotNull("crap4jAntTask.getTestClassDirs()", crap4jAntTask.getTestClassDirs());
            assertNull("crap4jAntTask.getSrcDirs()", crap4jAntTask.getSrcDirs());
            assertNotNull("crap4jAntTask.getLibClasspath()", crap4jAntTask.getLibClasspath());
            assertSame("crap4jAntTask.getProjectDir()", projectDir, crap4jAntTask.getProjectDir());
        }
    }
    
    public void testCreateCrapProjectThrowsNullPointerException() throws Throwable {
        Crap4jAntTask crap4jAntTask = new Crap4jAntTask();
        try {
            callPrivateMethod("org.crap4j.anttask.Crap4jAntTask", "createCrapProject", new Class[] {}, crap4jAntTask, new Object[] {});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(Crap4jAntTask.class, ex);
        }
    }
    
    public void testCreateCrapProjectThrowsNullPointerException1() throws Throwable {
        Crap4jAntTask crap4jAntTask = new Crap4jAntTask();
        try {
            callPrivateMethod("org.crap4j.anttask.Crap4jAntTask", "createCrapProject", new Class[] {}, crap4jAntTask, new Object[] {});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(Crap4jAntTask.class, ex);
        }
    }
    
    public void testCreateCrapProjectThrowsNullPointerException2() throws Throwable {
        Crap4jAntTask crap4jAntTask = new Crap4jAntTask();
        try {
            callPrivateMethod("org.crap4j.anttask.Crap4jAntTask", "createCrapProject", new Class[] {}, crap4jAntTask, new Object[] {});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(Crap4jAntTask.class, ex);
        }
    }
    
    public void testCreateSrcDirsThrowsBuildException() throws Throwable {
        Crap4jAntTask crap4jAntTask = new Crap4jAntTask();
        Mockingbird.enterRecordingMode();
        Mockingbird.setException(true, ((Path) Mockingbird.getProxyObject(Path.class)).createPath(), (Throwable) Mockingbird.getProxyObject(BuildException.class));
        Mockingbird.enterTestMode(Crap4jAntTask.class);
        try {
            crap4jAntTask.createSrcDirs();
            fail("Expected BuildException to be thrown");
        } catch (BuildException ex) {
            assertNotNull("crap4jAntTask.getSrcDirs()", crap4jAntTask.getSrcDirs());
        }
    }
    
    public void testCreateSrcDirsThrowsBuildException1() throws Throwable {
        Crap4jAntTask crap4jAntTask = new Crap4jAntTask();
        Path path = (Path) Mockingbird.getProxyObject(Path.class);
        crap4jAntTask.setSrcDirs(path);
        Mockingbird.enterRecordingMode();
        Mockingbird.setException(true, ((Path) Mockingbird.getProxyObject(Path.class)).createPath(), (Throwable) Mockingbird.getProxyObject(BuildException.class));
        Mockingbird.enterTestMode(Crap4jAntTask.class);
        try {
            crap4jAntTask.createSrcDirs();
            fail("Expected BuildException to be thrown");
        } catch (BuildException ex) {
            assertSame("crap4jAntTask.getSrcDirs()", path, crap4jAntTask.getSrcDirs());
        }
    }
    
    public void testCreateTestClassDirsThrowsBuildException() throws Throwable {
        Crap4jAntTask crap4jAntTask = new Crap4jAntTask();
        Path path = (Path) Mockingbird.getProxyObject(Path.class);
        crap4jAntTask.setTestClassDirs(path);
        Mockingbird.enterRecordingMode();
        Mockingbird.setException(path.createPath(), (Throwable) Mockingbird.getProxyObject(BuildException.class));
        Mockingbird.enterTestMode(Crap4jAntTask.class);
        try {
            crap4jAntTask.createTestClassDirs();
            fail("Expected BuildException to be thrown");
        } catch (BuildException ex) {
            assertSame("crap4jAntTask.getTestClassDirs()", path, crap4jAntTask.getTestClassDirs());
        }
    }
    
    public void testExecuteThrowsBuildException() throws Throwable {
        Crap4jAntTask crap4jAntTask = new Crap4jAntTask();
        File projectDir = (File) Mockingbird.getProxyObject(File.class);
        crap4jAntTask.setProjectDir(projectDir);
        Path path = (Path) Mockingbird.getProxyObject(Path.class);
        crap4jAntTask.setLibClasspath(path);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, projectDir, "getAbsolutePath", "()java.lang.String", new Object[] {}, "/home/agitar/work/sexy-dolphin-04-agitar-1/b2327b840ef1ed2634683c1df47b37d4/org.crap4j/testCrap4jAntTaskParam1", 1);
        Mockingbird.setException(path.list(), (Throwable) Mockingbird.getProxyObject(BuildException.class));
        Mockingbird.enterTestMode(Crap4jAntTask.class);
        try {
            crap4jAntTask.execute();
            fail("Expected BuildException to be thrown");
        } catch (BuildException ex) {
            assertFalse("crap4jAntTask.isDontTest()", crap4jAntTask.isDontTest());
            assertNull("crap4jAntTask.getClassDirs()", crap4jAntTask.getClassDirs());
            assertNull("crap4jAntTask.getTestClassDirs()", crap4jAntTask.getTestClassDirs());
            assertNull("crap4jAntTask.getOutputDir()", crap4jAntTask.getOutputDir());
            assertNull("crap4jAntTask.getSrcDirs()", crap4jAntTask.getSrcDirs());
            assertSame("crap4jAntTask.getLibClasspath()", path, crap4jAntTask.getLibClasspath());
            assertFalse("crap4jAntTask.isDebug()", crap4jAntTask.isDebug());
            assertSame("crap4jAntTask.getProjectDir()", projectDir, crap4jAntTask.getProjectDir());
        }
    }
    
    public void testExecuteThrowsBuildException1() throws Throwable {
        Crap4jAntTask crap4jAntTask = new Crap4jAntTask();
        Path path = (Path) Mockingbird.getProxyObject(Path.class);
        crap4jAntTask.setTestClassDirs(path);
        crap4jAntTask.setDebug(true);
        Path path2 = (Path) Mockingbird.getProxyObject(Path.class);
        crap4jAntTask.setLibClasspath(path2);
        Path path3 = (Path) Mockingbird.getProxyObject(Path.class);
        crap4jAntTask.setClassDirs(path3);
        Mockingbird.enterRecordingMode();
        String[] strings = new String[0];
        Mockingbird.setReturnValue(path3.list(), strings);
        String[] strings2 = new String[0];
        Mockingbird.setReturnValue(path.list(), strings2);
        Mockingbird.setException(path2.list(), (Throwable) Mockingbird.getProxyObject(BuildException.class));
        Mockingbird.enterTestMode(Crap4jAntTask.class);
        try {
            crap4jAntTask.execute();
            fail("Expected BuildException to be thrown");
        } catch (BuildException ex) {
            assertFalse("crap4jAntTask.isDontTest()", crap4jAntTask.isDontTest());
            assertSame("crap4jAntTask.getClassDirs()", path3, crap4jAntTask.getClassDirs());
            assertSame("crap4jAntTask.getTestClassDirs()", path, crap4jAntTask.getTestClassDirs());
            assertNull("crap4jAntTask.getOutputDir()", crap4jAntTask.getOutputDir());
            assertNull("crap4jAntTask.getSrcDirs()", crap4jAntTask.getSrcDirs());
            assertSame("crap4jAntTask.getLibClasspath()", path2, crap4jAntTask.getLibClasspath());
            assertTrue("crap4jAntTask.isDebug()", crap4jAntTask.isDebug());
            assertNull("crap4jAntTask.getProjectDir()", crap4jAntTask.getProjectDir());
        }
    }
    
    public void testExecuteThrowsBuildException2() throws Throwable {
        Crap4jAntTask crap4jAntTask = new Crap4jAntTask();
        File projectDir = (File) Mockingbird.getProxyObject(File.class);
        crap4jAntTask.setProjectDir(projectDir);
        crap4jAntTask.createTestClassDirs();
        Path path = (Path) Mockingbird.getProxyObject(Path.class);
        crap4jAntTask.setClassDirs(path);
        crap4jAntTask.createLibClasspath();
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, projectDir, "getAbsolutePath", "()java.lang.String", new Object[] {}, "/home/agitar/work/sexy-dolphin-04-agitar-1/b2327b840ef1ed2634683c1df47b37d4/org.crap4j/testCrap4jAntTaskParam1", 1);
        Mockingbird.setException(path.list(), (Throwable) Mockingbird.getProxyObject(BuildException.class));
        Mockingbird.enterTestMode(Crap4jAntTask.class);
        try {
            crap4jAntTask.execute();
            fail("Expected BuildException to be thrown");
        } catch (BuildException ex) {
            assertFalse("crap4jAntTask.isDontTest()", crap4jAntTask.isDontTest());
            assertSame("crap4jAntTask.getClassDirs()", path, crap4jAntTask.getClassDirs());
            assertNotNull("crap4jAntTask.getTestClassDirs()", crap4jAntTask.getTestClassDirs());
            assertNull("crap4jAntTask.getOutputDir()", crap4jAntTask.getOutputDir());
            assertNull("crap4jAntTask.getSrcDirs()", crap4jAntTask.getSrcDirs());
            assertNotNull("crap4jAntTask.getLibClasspath()", crap4jAntTask.getLibClasspath());
            assertFalse("crap4jAntTask.isDebug()", crap4jAntTask.isDebug());
            assertSame("crap4jAntTask.getProjectDir()", projectDir, crap4jAntTask.getProjectDir());
        }
    }
    
    public void testExecuteThrowsNullPointerException() throws Throwable {
        try {
            new Crap4jAntTask().execute();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(Crap4jAntTask.class, ex);
        }
    }
    
    public void testExecuteThrowsNullPointerException1() throws Throwable {
        Crap4jAntTask crap4jAntTask = new Crap4jAntTask();
        crap4jAntTask.setDebug(true);
        crap4jAntTask.createClassDirs();
        try {
            crap4jAntTask.execute();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(Crap4jAntTask.class, ex);
        }
    }
    
    public void testStringOfThrowsBuildException() throws Throwable {
        Crap4jAntTask crap4jAntTask = new Crap4jAntTask();
        Path path = (Path) Mockingbird.getProxyObject(Path.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setException(path.list(), (Throwable) Mockingbird.getProxyObject(BuildException.class));
        Mockingbird.enterTestMode(Crap4jAntTask.class);
        try {
            callPrivateMethod("org.crap4j.anttask.Crap4jAntTask", "stringOf", new Class[] {Path.class}, crap4jAntTask, new Object[] {path});
            fail("Expected BuildException to be thrown");
        } catch (BuildException ex) {
            assertTrue("Test call resulted in expected outcome", true);
        }
    }
}

