/**
 * Generated by Agitar build: JUnitFactory Version 2.1.1.000614 (Build date: Nov 19, 2007) [2.1.1.000614]
 * JDK Version: 1.5.0_11
 *
 * Generated on Nov 27, 2007 4:10:14 PM
 * Time to generate: 00:18.242 seconds
 *
 */

package org.crap4j.util;

import com.agitar.lib.junit.AgitarTestCase;
import com.agitar.lib.mockingbird.Mockingbird;

public class MyStringBuilderAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return MyStringBuilder.class;
    }
    
    public void testConstructor() throws Throwable {
        MyStringBuilder myStringBuilder = new MyStringBuilder();
        assertEquals("myStringBuilder.currentIndentation", 0, ((Number) getPrivateField(myStringBuilder, "currentIndentation")).intValue());
        assertEquals("myStringBuilder.myStringBuilder.length()", 0, ((CharSequence) getPrivateField(myStringBuilder, "myStringBuilder")).length());
    }
    
    public void testAppend() throws Throwable {
        MyStringBuilder myStringBuilder = new MyStringBuilder();
        MyStringBuilder result = myStringBuilder.append("testMyStringBuilderParam1");
        assertSame("result", myStringBuilder, result);
        assertEquals("myStringBuilder.myStringBuilder.length()", 26, ((CharSequence) getPrivateField(myStringBuilder, "myStringBuilder")).length());
    }
    
    public void testAppend1() throws Throwable {
        MyStringBuilder myStringBuilder = new MyStringBuilder();
        myStringBuilder.start("testMyStringBuilderParam1");
        MyStringBuilder result = myStringBuilder.append("testMyStringBuilderParam1");
        assertSame("result", myStringBuilder, result);
        assertEquals("myStringBuilder.myStringBuilder.length()", 54, ((CharSequence) getPrivateField(myStringBuilder, "myStringBuilder")).length());
    }
    
    public void testEnd() throws Throwable {
        MyStringBuilder myStringBuilder = new MyStringBuilder();
        callPrivateMethod("org.crap4j.util.MyStringBuilder", "indent", new Class[] {}, myStringBuilder, new Object[] {});
        MyStringBuilder result = myStringBuilder.end("testMyStringBuilders");
        assertEquals("myStringBuilder.currentIndentation", 0, ((Number) getPrivateField(myStringBuilder, "currentIndentation")).intValue());
        assertSame("result", myStringBuilder, result);
        assertEquals("myStringBuilder.myStringBuilder.length()", 21, ((CharSequence) getPrivateField(myStringBuilder, "myStringBuilder")).length());
    }
    
    public void testEnd1() throws Throwable {
        MyStringBuilder myStringBuilder = new MyStringBuilder();
        myStringBuilder.start("testMyStringBuilderParam1");
        myStringBuilder.start("testMyStringBuilderParam11");
        MyStringBuilder result = myStringBuilder.end("testMyStringBuilderParam1");
        assertEquals("myStringBuilder.currentIndentation", 2, ((Number) getPrivateField(myStringBuilder, "currentIndentation")).intValue());
        assertSame("result", myStringBuilder, result);
        assertEquals("myStringBuilder.myStringBuilder.length()", 83, ((CharSequence) getPrivateField(myStringBuilder, "myStringBuilder")).length());
    }
    
    public void testEnd2() throws Throwable {
        MyStringBuilder myStringBuilder = (MyStringBuilder) Mockingbird.getProxyObject(MyStringBuilder.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(myStringBuilder.append(""), myStringBuilder);
        Mockingbird.enterTestMode(MyStringBuilder.class);
        myStringBuilder.end("");
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(myStringBuilder.append(""), myStringBuilder);
        Mockingbird.enterTestMode(MyStringBuilder.class);
        MyStringBuilder result = myStringBuilder.end("");
        assertNotNull("result", result);
        assertEquals("myStringBuilder.currentIndentation", -4, ((Number) getPrivateField(myStringBuilder, "currentIndentation")).intValue());
    }
    
    public void testIndent() throws Throwable {
        MyStringBuilder myStringBuilder = new MyStringBuilder();
        myStringBuilder.append("testMyStringBuilders");
        callPrivateMethod("org.crap4j.util.MyStringBuilder", "indent", new Class[] {}, myStringBuilder, new Object[] {});
        assertEquals("myStringBuilder.currentIndentation", 2, ((Number) getPrivateField(myStringBuilder, "currentIndentation")).intValue());
    }
    
    public void testNewline() throws Throwable {
        MyStringBuilder myStringBuilder = new MyStringBuilder();
        callPrivateMethod("org.crap4j.util.MyStringBuilder", "newline", new Class[] {}, myStringBuilder, new Object[] {});
        assertEquals("myStringBuilder.myStringBuilder.length()", 1, ((CharSequence) getPrivateField(myStringBuilder, "myStringBuilder")).length());
    }
    
    public void testPad() throws Throwable {
        MyStringBuilder myStringBuilder = new MyStringBuilder();
        myStringBuilder.start("testMyStringBuilders");
        callPrivateMethod("org.crap4j.util.MyStringBuilder", "pad", new Class[] {}, myStringBuilder, new Object[] {});
        assertEquals("myStringBuilder.myStringBuilder.length()", 23, ((CharSequence) getPrivateField(myStringBuilder, "myStringBuilder")).length());
    }
    
    public void testPad1() throws Throwable {
        MyStringBuilder myStringBuilder = new MyStringBuilder();
        callPrivateMethod("org.crap4j.util.MyStringBuilder", "pad", new Class[] {}, myStringBuilder, new Object[] {});
        assertEquals("myStringBuilder.myStringBuilder.length()", 0, ((CharSequence) getPrivateField(myStringBuilder, "myStringBuilder")).length());
    }
    
    public void testStart() throws Throwable {
        MyStringBuilder myStringBuilder = new MyStringBuilder();
        MyStringBuilder result = myStringBuilder.start("testMyStringBuilderParam1");
        assertEquals("myStringBuilder.currentIndentation", 2, ((Number) getPrivateField(myStringBuilder, "currentIndentation")).intValue());
        assertSame("result", myStringBuilder, result);
        assertEquals("myStringBuilder.myStringBuilder.length()", 26, ((CharSequence) getPrivateField(myStringBuilder, "myStringBuilder")).length());
    }
    
    public void testStart1() throws Throwable {
        MyStringBuilder myStringBuilder = new MyStringBuilder();
        myStringBuilder.start("testMyStringBuilderParam1");
        MyStringBuilder result = myStringBuilder.start("testMyStringBuilderParam1");
        assertEquals("myStringBuilder.currentIndentation", 4, ((Number) getPrivateField(myStringBuilder, "currentIndentation")).intValue());
        assertSame("result", myStringBuilder, result);
        assertEquals("myStringBuilder.myStringBuilder.length()", 54, ((CharSequence) getPrivateField(myStringBuilder, "myStringBuilder")).length());
    }
    
    public void testStart2() throws Throwable {
        MyStringBuilder myStringBuilder = (MyStringBuilder) Mockingbird.getProxyObject(MyStringBuilder.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(myStringBuilder.append("testString"), myStringBuilder);
        Mockingbird.enterTestMode(MyStringBuilder.class);
        myStringBuilder.end("testString");
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(myStringBuilder.append("abcoefghijklmnopqrstuvwxyz"), myStringBuilder);
        Mockingbird.enterTestMode(MyStringBuilder.class);
        MyStringBuilder result = myStringBuilder.start("abcoefghijklmnopqrstuvwxyz");
        assertNotNull("result", result);
        assertEquals("myStringBuilder.currentIndentation", 0, ((Number) getPrivateField(myStringBuilder, "currentIndentation")).intValue());
    }
    
    public void testToString() throws Throwable {
        String result = new MyStringBuilder().toString();
        assertEquals("result", "", result);
    }
    
    public void testUnindent() throws Throwable {
        MyStringBuilder myStringBuilder = new MyStringBuilder();
        callPrivateMethod("org.crap4j.util.MyStringBuilder", "unindent", new Class[] {}, myStringBuilder, new Object[] {});
        assertEquals("myStringBuilder.currentIndentation", -2, ((Number) getPrivateField(myStringBuilder, "currentIndentation")).intValue());
    }
    
    public void testPadThrowsNullPointerException() throws Throwable {
        MyStringBuilder myStringBuilder = (MyStringBuilder) Mockingbird.getProxyObject(MyStringBuilder.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(myStringBuilder.append("testString"), myStringBuilder);
        Mockingbird.enterTestMode(MyStringBuilder.class);
        myStringBuilder.start("testString");
        try {
            callPrivateMethod("org.crap4j.util.MyStringBuilder", "pad", new Class[] {}, myStringBuilder, new Object[] {});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(MyStringBuilder.class, ex);
            assertNull("myStringBuilder.myStringBuilder", getPrivateField(myStringBuilder, "myStringBuilder"));
        }
    }
}

