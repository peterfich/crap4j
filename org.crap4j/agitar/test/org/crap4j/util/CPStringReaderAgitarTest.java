/**
 * Generated by Agitar build: JUnitFactory Version 2.1.1.000614 (Build date: Nov 19, 2007) [2.1.1.000614]
 * JDK Version: 1.5.0_11
 *
 * Generated on Nov 27, 2007 5:08:24 PM
 * Time to generate: 00:35.860 seconds
 *
 */

package org.crap4j.util;

import com.agitar.lib.junit.AgitarTestCase;
import com.agitar.lib.mockingbird.Mockingbird;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;

public class CPStringReaderAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return CPStringReader.class;
    }
    
    public void testConstructor() throws Throwable {
        InputStream inputStream = (InputStream) Mockingbird.getProxyObject(InputStream.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, inputStream, "available", "()int", new Object[] {}, new Integer(0), 1);
        Mockingbird.setReturnValue(false, inputStream, "read", "(byte[],int,int)int", new Integer(-3), 1);
        Mockingbird.setReturnValue(false, inputStream, "read", "(byte[],int,int)int", new Integer(3), 1);
        Mockingbird.setReturnValue(false, inputStream, "read", "(byte[],int,int)int", new Integer(1000), 1);
        Mockingbird.setReturnValue(false, inputStream, "read", "(byte[],int,int)int", new Integer(1001), 1);
        Mockingbird.setReturnValue(false, inputStream, "read", "(byte[],int,int)int", new Integer(-1), 1);
        Mockingbird.ignoreConstructorExceptions(CPStringReader.class, "(byte[])");
        Mockingbird.enterTestMode();
        CPStringReader cPStringReader = new CPStringReader(inputStream);
        assertNull("cPStringReader.className", getPrivateField(cPStringReader, "className"));
        assertEquals("cPStringReader.b.length", 2000, ((byte[]) getPrivateField(cPStringReader, "b")).length);
        assertEquals("cPStringReader.getConstantPoolStrings().length", 0, cPStringReader.getConstantPoolStrings().length);
        assertNull("cPStringReader.superName", getPrivateField(cPStringReader, "superName"));
    }
    
    public void testGetClassNameWithAggressiveMocks() throws Throwable {
        CPStringReader cPStringReader = (CPStringReader) Mockingbird.getProxyObject(CPStringReader.class, true);
        setPrivateField(cPStringReader, "className", "");
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "replace", "(char,char)java.lang.String", "", 1);
        Mockingbird.enterTestMode(CPStringReader.class);
        String result = cPStringReader.getClassName();
        assertEquals("result", "", result);
    }
    
    public void testGetConstantPoolStringsWithAggressiveMocks() throws Throwable {
        CPStringReader cPStringReader = (CPStringReader) Mockingbird.getProxyObject(CPStringReader.class, true);
        String[] strings = new String[0];
        setPrivateField(cPStringReader, "strings", strings);
        Mockingbird.enterTestMode(CPStringReader.class);
        String[] result = cPStringReader.getConstantPoolStrings();
        assertEquals("result.length", 0, result.length);
    }
    
    public void testGetSuperClassNameWithAggressiveMocks() throws Throwable {
        CPStringReader cPStringReader = (CPStringReader) Mockingbird.getProxyObject(CPStringReader.class, true);
        setPrivateField(cPStringReader, "superName", "");
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "replace", "(char,char)java.lang.String", "", 1);
        Mockingbird.enterTestMode(CPStringReader.class);
        String result = cPStringReader.getSuperClassName();
        assertEquals("result", "", result);
    }
    
    public void testReadClass() throws Throwable {
        byte[] bytes = new byte[3];
        InputStream byteArrayInputStream = new ByteArrayInputStream(bytes);
        callPrivateMethod("org.crap4j.util.CPStringReader", "readClass", new Class[] {InputStream.class}, null, new Object[] {byteArrayInputStream});
        byte[] result = (byte[]) callPrivateMethod("org.crap4j.util.CPStringReader", "readClass", new Class[] {InputStream.class}, null, new Object[] {byteArrayInputStream});
        assertEquals("result.length", 0, result.length);
    }
    
    public void testReadClass1() throws Throwable {
        byte[] bytes = new byte[3];
        byte[] result = (byte[]) callPrivateMethod("org.crap4j.util.CPStringReader", "readClass", new Class[] {InputStream.class}, null, new Object[] {new ByteArrayInputStream(bytes)});
        assertEquals("result.length", 3, result.length);
        assertEquals("(byte[]) result[0]", (byte)0, ((byte[]) result)[0]);
    }
    
    public void testReadUTFWithAggressiveMocks() throws Throwable {
        CPStringReader cPStringReader = (CPStringReader) Mockingbird.getProxyObject(CPStringReader.class, true);
        byte[] bytes = new byte[2];
        char[] chars = new char[2];
        setPrivateField(cPStringReader, "b", bytes);
        bytes[0] = (byte)0;
        bytes[1] = (byte)16;
        Mockingbird.enterRecordingMode();
        Mockingbird.replaceObjectForRecording(String.class, "<init>(char[],int,int)", Mockingbird.getProxyObject(String.class));
        Mockingbird.enterTestMode(CPStringReader.class);
        String result = (String) callPrivateMethod("org.crap4j.util.CPStringReader", "readUTF", new Class[] {int.class, int.class, char[].class}, cPStringReader, new Object[] {new Integer(0), new Integer(2), chars});
        assertEquals("result", "", result);
    }
    
    public void testConstructorThrowsArrayIndexOutOfBoundsException() throws Throwable {
        byte[] bytes = new byte[25];
        InputStream is = new ByteArrayInputStream(bytes);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, is, "available", "()int", new Object[] {}, new Integer(25), 1);
        Mockingbird.setReturnValue(false, is, "read", "(byte[],int,int)int", new Integer(25), 1);
        Mockingbird.setReturnValue(true, System.class, "arraycopy", "(java.lang.Object,int,java.lang.Object,int,int)void", null, 1);
        Mockingbird.setReturnValue(false, is, "read", "(byte[],int,int)int", new Integer(-1), 1);
        Mockingbird.setReturnValue(true, System.class, "arraycopy", "(java.lang.Object,int,java.lang.Object,int,int)void", null, 1);
        Mockingbird.enterTestMode(CPStringReader.class);
        try {
            new CPStringReader(is);
            fail("Expected ArrayIndexOutOfBoundsException to be thrown");
        } catch (ArrayIndexOutOfBoundsException ex) {
            assertEquals("ex.getMessage()", "0", ex.getMessage());
            assertThrownBy(CPStringReader.class, ex);
        }
    }
    
    public void testConstructorThrowsArrayIndexOutOfBoundsException1() throws Throwable {
        try {
            new CPStringReader(new ByteArrayInputStream("".getBytes()));
            fail("Expected ArrayIndexOutOfBoundsException to be thrown");
        } catch (ArrayIndexOutOfBoundsException ex) {
            assertEquals("ex.getMessage()", "8", ex.getMessage());
            assertThrownBy(CPStringReader.class, ex);
        }
    }
    
    public void testConstructorThrowsArrayIndexOutOfBoundsException2() throws Throwable {
        byte[] b = new byte[14];
        b[8] = (byte)7;
        b[10] = (byte)1;
        b[11] = (byte)4;
        try {
            new CPStringReader(b);
            fail("Expected ArrayIndexOutOfBoundsException to be thrown");
        } catch (ArrayIndexOutOfBoundsException ex) {
            assertEquals("ex.getMessage()", "1037", ex.getMessage());
            assertThrownBy(CPStringReader.class, ex);
        }
    }
    
    public void testConstructorThrowsArrayIndexOutOfBoundsException3() throws Throwable {
        byte[] b = new byte[25];
        b[8] = (byte)-21;
        b[19] = (byte)1;
        try {
            new CPStringReader(b);
            fail("Expected ArrayIndexOutOfBoundsException to be thrown");
        } catch (ArrayIndexOutOfBoundsException ex) {
            assertEquals("ex.getMessage()", "25", ex.getMessage());
            assertThrownBy(CPStringReader.class, ex);
        }
    }
    
    public void testConstructorThrowsArrayIndexOutOfBoundsException4() throws Throwable {
        byte[] b = new byte[27];
        b[8] = (byte)63;
        b[22] = (byte)4;
        try {
            new CPStringReader(b);
            fail("Expected ArrayIndexOutOfBoundsException to be thrown");
        } catch (ArrayIndexOutOfBoundsException ex) {
            assertEquals("ex.getMessage()", "27", ex.getMessage());
            assertThrownBy(CPStringReader.class, ex);
        }
    }
    
    public void testConstructorThrowsArrayIndexOutOfBoundsException5() throws Throwable {
        byte[] b = new byte[10];
        b[8] = (byte)-71;
        try {
            new CPStringReader(b);
            fail("Expected ArrayIndexOutOfBoundsException to be thrown");
        } catch (ArrayIndexOutOfBoundsException ex) {
            assertEquals("ex.getMessage()", "10", ex.getMessage());
            assertThrownBy(CPStringReader.class, ex);
        }
    }
    
    public void testConstructorThrowsArrayIndexOutOfBoundsException6() throws Throwable {
        byte[] b = new byte[24];
        b[8] = (byte)-9;
        b[16] = (byte)10;
        b[21] = (byte)6;
        try {
            new CPStringReader(b);
            fail("Expected ArrayIndexOutOfBoundsException to be thrown");
        } catch (ArrayIndexOutOfBoundsException ex) {
            assertEquals("ex.getMessage()", "30", ex.getMessage());
            assertThrownBy(CPStringReader.class, ex);
        }
    }
    
    public void testConstructorThrowsArrayIndexOutOfBoundsException7() throws Throwable {
        byte[] b = new byte[11];
        b[9] = (byte)2;
        try {
            new CPStringReader(b);
            fail("Expected ArrayIndexOutOfBoundsException to be thrown");
        } catch (ArrayIndexOutOfBoundsException ex) {
            assertEquals("ex.getMessage()", "15", ex.getMessage());
            assertThrownBy(CPStringReader.class, ex);
        }
    }
    
    public void testConstructorThrowsArrayIndexOutOfBoundsException8() throws Throwable {
        byte[] b = new byte[17];
        try {
            new CPStringReader(b);
            fail("Expected ArrayIndexOutOfBoundsException to be thrown");
        } catch (ArrayIndexOutOfBoundsException ex) {
            assertEquals("ex.getMessage()", "0", ex.getMessage());
            assertThrownBy(CPStringReader.class, ex);
        }
    }
    
    public void testConstructorThrowsArrayIndexOutOfBoundsException9() throws Throwable {
        byte[] b = new byte[11];
        b[8] = (byte)-3;
        b[10] = (byte)1;
        try {
            new CPStringReader(b);
            fail("Expected ArrayIndexOutOfBoundsException to be thrown");
        } catch (ArrayIndexOutOfBoundsException ex) {
            assertEquals("ex.getMessage()", "11", ex.getMessage());
            assertThrownBy(CPStringReader.class, ex);
        }
    }
    
    public void testConstructorThrowsArrayIndexOutOfBoundsException10() throws Throwable {
        byte[] b = new byte[14];
        b[8] = (byte)16;
        try {
            new CPStringReader(b);
            fail("Expected ArrayIndexOutOfBoundsException to be thrown");
        } catch (ArrayIndexOutOfBoundsException ex) {
            assertEquals("ex.getMessage()", "16", ex.getMessage());
            assertThrownBy(CPStringReader.class, ex);
        }
    }
    
    public void testConstructorThrowsArrayIndexOutOfBoundsException11() throws Throwable {
        byte[] b = new byte[18];
        b[8] = (byte)-29;
        b[10] = (byte)5;
        try {
            new CPStringReader(b);
            fail("Expected ArrayIndexOutOfBoundsException to be thrown");
        } catch (ArrayIndexOutOfBoundsException ex) {
            assertEquals("ex.getMessage()", "19", ex.getMessage());
            assertThrownBy(CPStringReader.class, ex);
        }
    }
    
    public void testConstructorThrowsArrayIndexOutOfBoundsException12() throws Throwable {
        byte[] b = new byte[11];
        b[8] = (byte)15;
        b[10] = (byte)11;
        try {
            new CPStringReader(b);
            fail("Expected ArrayIndexOutOfBoundsException to be thrown");
        } catch (ArrayIndexOutOfBoundsException ex) {
            assertEquals("ex.getMessage()", "15", ex.getMessage());
            assertThrownBy(CPStringReader.class, ex);
        }
    }
    
    public void testConstructorThrowsArrayIndexOutOfBoundsException13() throws Throwable {
        byte[] b = new byte[14];
        b[8] = (byte)-31;
        b[13] = (byte)5;
        try {
            new CPStringReader(b);
            fail("Expected ArrayIndexOutOfBoundsException to be thrown");
        } catch (ArrayIndexOutOfBoundsException ex) {
            assertEquals("ex.getMessage()", "22", ex.getMessage());
            assertThrownBy(CPStringReader.class, ex);
        }
    }
    
    public void testConstructorThrowsArrayIndexOutOfBoundsException14() throws Throwable {
        byte[] b = new byte[18];
        b[8] = (byte)-15;
        b[16] = (byte)1;
        try {
            new CPStringReader(b);
            fail("Expected ArrayIndexOutOfBoundsException to be thrown");
        } catch (ArrayIndexOutOfBoundsException ex) {
            assertEquals("ex.getMessage()", "18", ex.getMessage());
            assertThrownBy(CPStringReader.class, ex);
        }
    }
    
    public void testConstructorThrowsNullPointerException() throws Throwable {
        try {
            new CPStringReader((byte[]) null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(CPStringReader.class, ex);
        }
    }
    
    public void testReadClassThrowsIOException() throws Throwable {
        try {
            callPrivateMethod("org.crap4j.util.CPStringReader", "readClass", new Class[] {InputStream.class}, null, new Object[] {null});
            fail("Expected IOException to be thrown");
        } catch (IOException ex) {
            assertEquals("ex.getClass()", IOException.class, ex.getClass());
            assertThrownBy(CPStringReader.class, ex);
        }
    }
}

