/**
 * Generated by Agitar build: JUnitFactory Version 2.1.0.000576 (Build date: Oct 19, 2007) [2.1.0.000576]
 * JDK Version: 1.5.0_11
 *
 * Generated on Nov 6, 2007 1:37:39 PM
 * Time to generate: 00:16.910 seconds
 *
 */

package org.crap4j.complexity;

import com.agitar.lib.junit.AgitarTestCase;
import com.agitar.lib.mockingbird.Mockingbird;

public class ComplexitySubject1TestFixtureAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return ComplexitySubject1TestFixture.class;
    }
    
    public void testConstructor() throws Throwable {
        new ComplexitySubject1TestFixture();
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testGetAgitarEclipseApiPluginDirectory() throws Throwable {
        ComplexitySubject1TestFixture complexitySubject1TestFixture = new ComplexitySubject1TestFixture();
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(true, System.class, "getProperty", "(java.lang.String)java.lang.String", new Object[] {"java.io.tmp"}, "", 1);
        Mockingbird.enterTestMode(ComplexitySubject1TestFixture.class);
        String result = complexitySubject1TestFixture.getAgitarEclipseApiPluginDirectory();
        assertEquals("result", "", result);
    }
    
    public void testMethod0() throws Throwable {
        new ComplexitySubject1TestFixture().method0();
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testMethod1() throws Throwable {
        new ComplexitySubject1TestFixture().method1(5);
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testMethod11() throws Throwable {
        new ComplexitySubject1TestFixture().method1(3);
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testMethod12() throws Throwable {
        new ComplexitySubject1TestFixture().method1(4);
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testMethod2() throws Throwable {
        String result = new ComplexitySubject1TestFixture().method2("Yo");
        assertEquals("result", "Yo", result);
    }
    
    public void testMethod21() throws Throwable {
        String result = new ComplexitySubject1TestFixture().method2("testComplexitySubject1TestFixtureParam1");
        assertEquals("result", "Whatsup", result);
    }
    
    public void testMethod22() throws Throwable {
        String result = new ComplexitySubject1TestFixture().method2("Hi");
        assertEquals("result", "Hi dude", result);
    }
    
    public void testMethod23() throws Throwable {
        String result = new ComplexitySubject1TestFixture().method2(null);
        assertEquals("result", "Null", result);
    }
    
    public void testReadFile() throws Throwable {
        int result = new ComplexitySubject1TestFixture().readFile();
        assertEquals("result", 4, result);
    }
    
    public void testSwitcheroo() throws Throwable {
        new ComplexitySubject1TestFixture().switcheroo(3);
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testSwitcheroo1() throws Throwable {
        new ComplexitySubject1TestFixture().switcheroo(4);
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testSwitcheroo2() throws Throwable {
        new ComplexitySubject1TestFixture().switcheroo(100);
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testGetAgitarEclipseApiPluginDirectoryThrowsIllegalStateException() throws Throwable {
        try {
            new ComplexitySubject1TestFixture().getAgitarEclipseApiPluginDirectory();
            fail("Expected IllegalStateException to be thrown");
        } catch (IllegalStateException ex) {
            assertEquals("ex.getMessage()", "Cannot find the tmp var.", ex.getMessage());
            assertThrownBy(ComplexitySubject1TestFixture.class, ex);
        }
    }
}

