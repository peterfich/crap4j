/**
 * Generated by Agitar build: JUnitFactory Version 2.1.1.000614 (Build date: Nov 19, 2007) [2.1.1.000614]
 * JDK Version: 1.5.0_11
 *
 * Generated on Nov 27, 2007 5:09:30 PM
 * Time to generate: 00:59.266 seconds
 *
 */

package org.crap4j.complexity;

import com.agitar.lib.junit.AgitarTestCase;
import java.io.File;

public class CyclomaticComplexityAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return CyclomaticComplexity.class;
    }
    
    public void testConstructor() throws Throwable {
        new CyclomaticComplexity();
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testBuildAbstract() throws Throwable {
        CyclomaticComplexity cyclomaticComplexity = new CyclomaticComplexity();
        StringBuilder stringBuilder = new StringBuilder();
        callPrivateMethod("org.crap4j.complexity.CyclomaticComplexity", "buildAbstract", new Class[] {int.class, StringBuilder.class}, cyclomaticComplexity, new Object[] {new Integer(100), stringBuilder});
        int actual = ((Number) callPrivateMethod("java.lang.CharSequence", "length", new Class[] {}, stringBuilder, new Object[] {})).intValue();
        assertEquals("stringBuilder.length()", 0, actual);
    }
    
    public void testBuildAbstract1() throws Throwable {
        CyclomaticComplexity cyclomaticComplexity = new CyclomaticComplexity();
        StringBuilder stringBuilder = new StringBuilder(100);
        callPrivateMethod("org.crap4j.complexity.CyclomaticComplexity", "buildAbstract", new Class[] {int.class, StringBuilder.class}, cyclomaticComplexity, new Object[] {new Integer(-1), stringBuilder});
        int actual = ((Number) callPrivateMethod("java.lang.CharSequence", "length", new Class[] {}, stringBuilder, new Object[] {})).intValue();
        assertEquals("stringBuilder.length()", 9, actual);
    }
    
    public void testBuildAccess() throws Throwable {
        CyclomaticComplexity cyclomaticComplexity = new CyclomaticComplexity();
        String result = (String) callPrivateMethod("org.crap4j.complexity.CyclomaticComplexity", "buildAccess", new Class[] {int.class}, cyclomaticComplexity, new Object[] {new Integer(-1)});
        assertEquals("result", "public static final synchronized native abstract ", result);
    }
    
    public void testBuildAccess1() throws Throwable {
        CyclomaticComplexity cyclomaticComplexity = new CyclomaticComplexity();
        String result = (String) callPrivateMethod("org.crap4j.complexity.CyclomaticComplexity", "buildAccess", new Class[] {int.class}, cyclomaticComplexity, new Object[] {new Integer(10)});
        assertEquals("result", "private static ", result);
    }
    
    public void testBuildAccess2() throws Throwable {
        CyclomaticComplexity cyclomaticComplexity = new CyclomaticComplexity();
        String result = (String) callPrivateMethod("org.crap4j.complexity.CyclomaticComplexity", "buildAccess", new Class[] {int.class}, cyclomaticComplexity, new Object[] {new Integer(100)});
        assertEquals("result", "protected synchronized ", result);
    }
    
    public void testBuildAccess3() throws Throwable {
        CyclomaticComplexity cyclomaticComplexity = new CyclomaticComplexity();
        String result = (String) callPrivateMethod("org.crap4j.complexity.CyclomaticComplexity", "buildAccess", new Class[] {int.class}, cyclomaticComplexity, new Object[] {new Integer(10000)});
        assertEquals("result", "final native abstract ", result);
    }
    
    public void testBuildAccess4() throws Throwable {
        CyclomaticComplexity cyclomaticComplexity = new CyclomaticComplexity();
        String result = (String) callPrivateMethod("org.crap4j.complexity.CyclomaticComplexity", "buildAccess", new Class[] {int.class}, cyclomaticComplexity, new Object[] {new Integer(0)});
        assertEquals("result", "", result);
    }
    
    public void testBuildAccess5() throws Throwable {
        CyclomaticComplexity cyclomaticComplexity = new CyclomaticComplexity();
        String result = (String) callPrivateMethod("org.crap4j.complexity.CyclomaticComplexity", "buildAccess", new Class[] {int.class}, cyclomaticComplexity, new Object[] {new Integer(2)});
        assertEquals("result", "private ", result);
    }
    
    public void testBuildAccess6() throws Throwable {
        CyclomaticComplexity cyclomaticComplexity = new CyclomaticComplexity();
        String result = (String) callPrivateMethod("org.crap4j.complexity.CyclomaticComplexity", "buildAccess", new Class[] {int.class}, cyclomaticComplexity, new Object[] {new Integer(100000)});
        assertEquals("result", "synchronized abstract ", result);
    }
    
    public void testBuildAccess7() throws Throwable {
        CyclomaticComplexity cyclomaticComplexity = new CyclomaticComplexity();
        String result = (String) callPrivateMethod("org.crap4j.complexity.CyclomaticComplexity", "buildAccess", new Class[] {int.class}, cyclomaticComplexity, new Object[] {new Integer(1)});
        assertEquals("result", "public ", result);
    }
    
    public void testBuildAccess8() throws Throwable {
        CyclomaticComplexity cyclomaticComplexity = new CyclomaticComplexity();
        String result = (String) callPrivateMethod("org.crap4j.complexity.CyclomaticComplexity", "buildAccess", new Class[] {int.class}, cyclomaticComplexity, new Object[] {new Integer(1000)});
        assertEquals("result", "static synchronized native ", result);
    }
    
    public void testBuildFinal() throws Throwable {
        CyclomaticComplexity cyclomaticComplexity = new CyclomaticComplexity();
        callPrivateMethod("org.crap4j.complexity.CyclomaticComplexity", "buildFinal", new Class[] {int.class, StringBuilder.class}, cyclomaticComplexity, new Object[] {new Integer(100), null});
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testBuildFinal1() throws Throwable {
        CyclomaticComplexity cyclomaticComplexity = new CyclomaticComplexity();
        StringBuilder stringBuilder = new StringBuilder(100);
        callPrivateMethod("org.crap4j.complexity.CyclomaticComplexity", "buildFinal", new Class[] {int.class, StringBuilder.class}, cyclomaticComplexity, new Object[] {new Integer(-1), stringBuilder});
        int actual = ((Number) callPrivateMethod("java.lang.CharSequence", "length", new Class[] {}, stringBuilder, new Object[] {})).intValue();
        assertEquals("stringBuilder.length()", 6, actual);
    }
    
    public void testBuildNative() throws Throwable {
        CyclomaticComplexity cyclomaticComplexity = new CyclomaticComplexity();
        StringBuilder stringBuilder = new StringBuilder();
        callPrivateMethod("org.crap4j.complexity.CyclomaticComplexity", "buildNative", new Class[] {int.class, StringBuilder.class}, cyclomaticComplexity, new Object[] {new Integer(100), stringBuilder});
        int actual = ((Number) callPrivateMethod("java.lang.CharSequence", "length", new Class[] {}, stringBuilder, new Object[] {})).intValue();
        assertEquals("stringBuilder.length()", 0, actual);
    }
    
    public void testBuildStatic() throws Throwable {
        CyclomaticComplexity cyclomaticComplexity = new CyclomaticComplexity();
        StringBuilder stringBuilder = new StringBuilder("testString");
        stringBuilder.delete(0, 100);
        callPrivateMethod("org.crap4j.complexity.CyclomaticComplexity", "buildStatic", new Class[] {int.class, StringBuilder.class}, cyclomaticComplexity, new Object[] {new Integer(100), stringBuilder});
        int actual = ((Number) callPrivateMethod("java.lang.CharSequence", "length", new Class[] {}, stringBuilder, new Object[] {})).intValue();
        assertEquals("stringBuilder.length()", 0, actual);
    }
    
    public void testBuildStatic1() throws Throwable {
        CyclomaticComplexity cyclomaticComplexity = new CyclomaticComplexity();
        StringBuilder stringBuilder = new StringBuilder("testCyclomaticComplexityParam1");
        callPrivateMethod("org.crap4j.complexity.CyclomaticComplexity", "buildStatic", new Class[] {int.class, StringBuilder.class}, cyclomaticComplexity, new Object[] {new Integer(1000), stringBuilder});
        int actual = ((Number) callPrivateMethod("java.lang.CharSequence", "length", new Class[] {}, stringBuilder, new Object[] {})).intValue();
        assertEquals("stringBuilder.length()", 37, actual);
    }
    
    public void testBuildSynchronized() throws Throwable {
        CyclomaticComplexity cyclomaticComplexity = new CyclomaticComplexity();
        StringBuilder stringBuilder = new StringBuilder("testCyclomaticComplexityParam1");
        callPrivateMethod("org.crap4j.complexity.CyclomaticComplexity", "buildSynchronized", new Class[] {int.class, StringBuilder.class}, cyclomaticComplexity, new Object[] {new Integer(0), stringBuilder});
        int actual = ((Number) callPrivateMethod("java.lang.CharSequence", "length", new Class[] {}, stringBuilder, new Object[] {})).intValue();
        assertEquals("stringBuilder.length()", 30, actual);
    }
    
    public void testBuildSynchronized1() throws Throwable {
        CyclomaticComplexity cyclomaticComplexity = new CyclomaticComplexity();
        StringBuilder stringBuilder = new StringBuilder("testCyclomaticComplexityParam1");
        callPrivateMethod("org.crap4j.complexity.CyclomaticComplexity", "buildSynchronized", new Class[] {int.class, StringBuilder.class}, cyclomaticComplexity, new Object[] {new Integer(100), stringBuilder});
        int actual = ((Number) callPrivateMethod("java.lang.CharSequence", "length", new Class[] {}, stringBuilder, new Object[] {})).intValue();
        assertEquals("stringBuilder.length()", 43, actual);
    }
    
    public void testBuildVisibility() throws Throwable {
        CyclomaticComplexity cyclomaticComplexity = new CyclomaticComplexity();
        StringBuilder stringBuilder = new StringBuilder(100);
        callPrivateMethod("org.crap4j.complexity.CyclomaticComplexity", "buildVisibility", new Class[] {int.class, StringBuilder.class}, cyclomaticComplexity, new Object[] {new Integer(-1), stringBuilder});
        int actual = ((Number) callPrivateMethod("java.lang.CharSequence", "length", new Class[] {}, stringBuilder, new Object[] {})).intValue();
        assertEquals("stringBuilder.length()", 7, actual);
    }
    
    public void testBuildVisibility1() throws Throwable {
        CyclomaticComplexity cyclomaticComplexity = new CyclomaticComplexity();
        StringBuilder stringBuilder = new StringBuilder("testCyclomaticComplexityParam1");
        callPrivateMethod("org.crap4j.complexity.CyclomaticComplexity", "buildVisibility", new Class[] {int.class, StringBuilder.class}, cyclomaticComplexity, new Object[] {new Integer(1000), stringBuilder});
        int actual = ((Number) callPrivateMethod("java.lang.CharSequence", "length", new Class[] {}, stringBuilder, new Object[] {})).intValue();
        assertEquals("stringBuilder.length()", 30, actual);
    }
    
    public void testBuildVisibility2() throws Throwable {
        CyclomaticComplexity cyclomaticComplexity = new CyclomaticComplexity();
        StringBuilder stringBuilder = new StringBuilder("testString");
        stringBuilder.delete(0, 100);
        callPrivateMethod("org.crap4j.complexity.CyclomaticComplexity", "buildVisibility", new Class[] {int.class, StringBuilder.class}, cyclomaticComplexity, new Object[] {new Integer(10), stringBuilder});
        int actual = ((Number) callPrivateMethod("java.lang.CharSequence", "length", new Class[] {}, stringBuilder, new Object[] {})).intValue();
        assertEquals("stringBuilder.length()", 8, actual);
    }
    
    public void testBuildVisibility3() throws Throwable {
        CyclomaticComplexity cyclomaticComplexity = new CyclomaticComplexity();
        StringBuilder stringBuilder = new StringBuilder("testCyclomaticComplexityParam1");
        callPrivateMethod("org.crap4j.complexity.CyclomaticComplexity", "buildVisibility", new Class[] {int.class, StringBuilder.class}, cyclomaticComplexity, new Object[] {new Integer(100), stringBuilder});
        int actual = ((Number) callPrivateMethod("java.lang.CharSequence", "length", new Class[] {}, stringBuilder, new Object[] {})).intValue();
        assertEquals("stringBuilder.length()", 40, actual);
    }
    
    public void testNewGetCyclomaticComplexity() throws Throwable {
        int result = ((Number) callPrivateMethod("org.crap4j.complexity.CyclomaticComplexity", "newGetCyclomaticComplexity", new Class[] {String.class, Class.forName("com.agitar.org.objectweb.asm.tree.MethodNode")}, new CyclomaticComplexity(), new Object[] {"testCyclomaticComplexityOwner", null})).intValue();
        assertEquals("result", 1, result);
    }
    
    public void testBuildFinalThrowsNullPointerException() throws Throwable {
        CyclomaticComplexity cyclomaticComplexity = new CyclomaticComplexity();
        try {
            callPrivateMethod("org.crap4j.complexity.CyclomaticComplexity", "buildFinal", new Class[] {int.class, StringBuilder.class}, cyclomaticComplexity, new Object[] {new Integer(-1), null});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(CyclomaticComplexity.class, ex);
        }
    }
    
    public void testBuildNativeThrowsNullPointerException() throws Throwable {
        CyclomaticComplexity cyclomaticComplexity = new CyclomaticComplexity();
        try {
            callPrivateMethod("org.crap4j.complexity.CyclomaticComplexity", "buildNative", new Class[] {int.class, StringBuilder.class}, cyclomaticComplexity, new Object[] {new Integer(1000), null});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(CyclomaticComplexity.class, ex);
        }
    }
    
    public void testBuildStaticThrowsNullPointerException() throws Throwable {
        CyclomaticComplexity cyclomaticComplexity = new CyclomaticComplexity();
        try {
            callPrivateMethod("org.crap4j.complexity.CyclomaticComplexity", "buildStatic", new Class[] {int.class, StringBuilder.class}, cyclomaticComplexity, new Object[] {new Integer(1000), null});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(CyclomaticComplexity.class, ex);
        }
    }
    
    public void testBuildSynchronizedThrowsNullPointerException() throws Throwable {
        CyclomaticComplexity cyclomaticComplexity = new CyclomaticComplexity();
        try {
            callPrivateMethod("org.crap4j.complexity.CyclomaticComplexity", "buildSynchronized", new Class[] {int.class, StringBuilder.class}, cyclomaticComplexity, new Object[] {new Integer(100), null});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(CyclomaticComplexity.class, ex);
        }
    }
    
    public void testBuildVisibilityThrowsNullPointerException() throws Throwable {
        CyclomaticComplexity cyclomaticComplexity = new CyclomaticComplexity();
        try {
            callPrivateMethod("org.crap4j.complexity.CyclomaticComplexity", "buildVisibility", new Class[] {int.class, StringBuilder.class}, cyclomaticComplexity, new Object[] {new Integer(100), null});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(CyclomaticComplexity.class, ex);
        }
    }
    
    public void testBuildVisibilityThrowsNullPointerException1() throws Throwable {
        CyclomaticComplexity cyclomaticComplexity = new CyclomaticComplexity();
        try {
            callPrivateMethod("org.crap4j.complexity.CyclomaticComplexity", "buildVisibility", new Class[] {int.class, StringBuilder.class}, cyclomaticComplexity, new Object[] {new Integer(-1), null});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(CyclomaticComplexity.class, ex);
        }
    }
    
    public void testBuildVisibilityThrowsNullPointerException2() throws Throwable {
        CyclomaticComplexity cyclomaticComplexity = new CyclomaticComplexity();
        try {
            callPrivateMethod("org.crap4j.complexity.CyclomaticComplexity", "buildVisibility", new Class[] {int.class, StringBuilder.class}, cyclomaticComplexity, new Object[] {new Integer(10), null});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(CyclomaticComplexity.class, ex);
        }
    }
    
    public void testGetMethodComplexitiesForThrowsNullPointerException() throws Throwable {
        try {
            new CyclomaticComplexity().getMethodComplexitiesFor(new File("testCyclomaticComplexityParam1"));
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(CyclomaticComplexity.class, ex);
        }
    }
}

