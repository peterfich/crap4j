/**
 * Generated by Agitar build: JUnitFactory Version 2.1.0.000576 (Build date: Oct 19, 2007) [2.1.0.000576]
 * JDK Version: 1.5.0_11
 *
 * Generated on Nov 6, 2007 1:38:35 PM
 * Time to generate: 00:19.993 seconds
 *
 */

package org.crap4j.complexity;

import com.agitar.lib.junit.AgitarTestCase;
import java.lang.reflect.Array;

public class ComplexityMethodVisitorAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return ComplexityMethodVisitor.class;
    }
    
    public void testConstructor() throws Throwable {
        ComplexityMethodVisitor complexityMethodVisitor = new ComplexityMethodVisitor();
        assertEquals("complexityMethodVisitor.decisionOpcodes.length", 16, complexityMethodVisitor.decisionOpcodes.length);
        assertEquals("complexityMethodVisitor.complexity", 1, complexityMethodVisitor.complexity);
    }
    
    public void testNullAnnotationVisitorConstructor() throws Throwable {
        new ComplexityMethodVisitor.NullAnnotationVisitor();
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testCompute() throws Throwable {
        int result = new ComplexityMethodVisitor().compute();
        assertEquals("result", 2, result);
    }
    
    public void testIncBoth() throws Throwable {
        ComplexityMethodVisitor complexityMethodVisitor = new ComplexityMethodVisitor();
        callPrivateMethod("org.crap4j.complexity.ComplexityMethodVisitor", "incBoth", new Class[] {}, complexityMethodVisitor, new Object[] {});
        assertEquals("complexityMethodVisitor.edges", new Integer(1), getPrivateField(complexityMethodVisitor, "edges"));
    }
    
    public void testNullAnnotationVisitorVisit() throws Throwable {
        new ComplexityMethodVisitor.NullAnnotationVisitor().visit("testNullAnnotationVisitorName", new Integer(0));
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testNullAnnotationVisitorVisitAnnotation() throws Throwable {
        ComplexityMethodVisitor.NullAnnotationVisitor result = (ComplexityMethodVisitor.NullAnnotationVisitor) new ComplexityMethodVisitor.NullAnnotationVisitor().visitAnnotation("testNullAnnotationVisitorName", "testNullAnnotationVisitorDesc");
        assertNotNull("result", result);
    }
    
    public void testNullAnnotationVisitorVisitArray() throws Throwable {
        Object result = new ComplexityMethodVisitor.NullAnnotationVisitor().visitArray("testNullAnnotationVisitorName");
        assertNull("result", result);
    }
    
    public void testNullAnnotationVisitorVisitEnd() throws Throwable {
        new ComplexityMethodVisitor.NullAnnotationVisitor().visitEnd();
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testNullAnnotationVisitorVisitEnum() throws Throwable {
        new ComplexityMethodVisitor.NullAnnotationVisitor().visitEnum("testNullAnnotationVisitorName", "testNullAnnotationVisitorDesc", "testNullAnnotationVisitorValue");
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testVisitAnnotation() throws Throwable {
        ComplexityMethodVisitor.NullAnnotationVisitor result = (ComplexityMethodVisitor.NullAnnotationVisitor) new ComplexityMethodVisitor().visitAnnotation("testComplexityMethodVisitorParam1", true);
        assertNotNull("result", result);
    }
    
    public void testVisitAnnotationDefault() throws Throwable {
        ComplexityMethodVisitor.NullAnnotationVisitor result = (ComplexityMethodVisitor.NullAnnotationVisitor) new ComplexityMethodVisitor().visitAnnotationDefault();
        assertNotNull("result", result);
    }
    
    public void testVisitAttribute() throws Throwable {
        ComplexityMethodVisitor complexityMethodVisitor = new ComplexityMethodVisitor();
        callPrivateMethod("org.crap4j.complexity.ComplexityMethodVisitor", "visitAttribute", new Class[] {Class.forName("com.agitar.org.objectweb.asm.Attribute")}, complexityMethodVisitor, new Object[] {null});
        assertEquals("complexityMethodVisitor.compute()", 2, complexityMethodVisitor.compute());
    }
    
    public void testVisitCode() throws Throwable {
        ComplexityMethodVisitor complexityMethodVisitor = new ComplexityMethodVisitor();
        complexityMethodVisitor.visitCode();
        assertEquals("complexityMethodVisitor.compute()", 2, complexityMethodVisitor.compute());
    }
    
    public void testVisitEnd() throws Throwable {
        ComplexityMethodVisitor complexityMethodVisitor = new ComplexityMethodVisitor();
        complexityMethodVisitor.visitEnd();
        assertEquals("complexityMethodVisitor.compute()", 2, complexityMethodVisitor.compute());
    }
    
    public void testVisitFieldInsn() throws Throwable {
        ComplexityMethodVisitor complexityMethodVisitor = new ComplexityMethodVisitor();
        complexityMethodVisitor.visitFieldInsn(100, "testComplexityMethodVisitorParam2", "testComplexityMethodVisitorParam3", "testComplexityMethodVisitorParam4");
        assertEquals("complexityMethodVisitor.edges", new Integer(1), getPrivateField(complexityMethodVisitor, "edges"));
    }
    
    public void testVisitFrame() throws Throwable {
        ComplexityMethodVisitor complexityMethodVisitor = new ComplexityMethodVisitor();
        Object[] objects = new Object[3];
        complexityMethodVisitor.visitFrame(100, 1000, objects, 0, objects);
        assertEquals("complexityMethodVisitor.compute()", 2, complexityMethodVisitor.compute());
    }
    
    public void testVisitIincInsn() throws Throwable {
        ComplexityMethodVisitor complexityMethodVisitor = new ComplexityMethodVisitor();
        complexityMethodVisitor.visitIincInsn(100, 1000);
        assertEquals("complexityMethodVisitor.edges", new Integer(1), getPrivateField(complexityMethodVisitor, "edges"));
    }
    
    public void testVisitInsn() throws Throwable {
        ComplexityMethodVisitor complexityMethodVisitor = new ComplexityMethodVisitor();
        complexityMethodVisitor.visitInsn(100);
        assertEquals("complexityMethodVisitor.edges", new Integer(1), getPrivateField(complexityMethodVisitor, "edges"));
    }
    
    public void testVisitIntInsn() throws Throwable {
        ComplexityMethodVisitor complexityMethodVisitor = new ComplexityMethodVisitor();
        complexityMethodVisitor.visitIntInsn(100, 1000);
        assertEquals("complexityMethodVisitor.edges", new Integer(1), getPrivateField(complexityMethodVisitor, "edges"));
    }
    
    public void testVisitJumpInsn() throws Throwable {
        ComplexityMethodVisitor complexityMethodVisitor = new ComplexityMethodVisitor();
        callPrivateMethod("org.crap4j.complexity.ComplexityMethodVisitor", "visitJumpInsn", new Class[] {int.class, Class.forName("com.agitar.org.objectweb.asm.Label")}, complexityMethodVisitor, new Object[] {new Integer(153), null});
        assertEquals("complexityMethodVisitor.edges", new Integer(2), getPrivateField(complexityMethodVisitor, "edges"));
        assertEquals("complexityMethodVisitor.complexity", 2, complexityMethodVisitor.complexity);
    }
    
    public void testVisitJumpInsn1() throws Throwable {
        ComplexityMethodVisitor complexityMethodVisitor = new ComplexityMethodVisitor();
        callPrivateMethod("org.crap4j.complexity.ComplexityMethodVisitor", "visitJumpInsn", new Class[] {int.class, Class.forName("com.agitar.org.objectweb.asm.Label")}, complexityMethodVisitor, new Object[] {new Integer(157), null});
        assertEquals("complexityMethodVisitor.edges", new Integer(2), getPrivateField(complexityMethodVisitor, "edges"));
        assertEquals("complexityMethodVisitor.complexity", 2, complexityMethodVisitor.complexity);
    }
    
    public void testVisitJumpInsn2() throws Throwable {
        ComplexityMethodVisitor complexityMethodVisitor = new ComplexityMethodVisitor();
        callPrivateMethod("org.crap4j.complexity.ComplexityMethodVisitor", "visitJumpInsn", new Class[] {int.class, Class.forName("com.agitar.org.objectweb.asm.Label")}, complexityMethodVisitor, new Object[] {new Integer(100), null});
        assertEquals("complexityMethodVisitor.edges", new Integer(2), getPrivateField(complexityMethodVisitor, "edges"));
    }
    
    public void testVisitLabel() throws Throwable {
        ComplexityMethodVisitor complexityMethodVisitor = new ComplexityMethodVisitor();
        callPrivateMethod("org.crap4j.complexity.ComplexityMethodVisitor", "visitLabel", new Class[] {Class.forName("com.agitar.org.objectweb.asm.Label")}, complexityMethodVisitor, new Object[] {null});
        assertEquals("complexityMethodVisitor.nodes", new Integer(1), getPrivateField(complexityMethodVisitor, "nodes"));
    }
    
    public void testVisitLdcInsn() throws Throwable {
        ComplexityMethodVisitor complexityMethodVisitor = new ComplexityMethodVisitor();
        complexityMethodVisitor.visitLdcInsn("testString");
        assertEquals("complexityMethodVisitor.edges", new Integer(1), getPrivateField(complexityMethodVisitor, "edges"));
    }
    
    public void testVisitLineNumber() throws Throwable {
        ComplexityMethodVisitor complexityMethodVisitor = new ComplexityMethodVisitor();
        callPrivateMethod("org.crap4j.complexity.ComplexityMethodVisitor", "visitLineNumber", new Class[] {int.class, Class.forName("com.agitar.org.objectweb.asm.Label")}, complexityMethodVisitor, new Object[] {new Integer(100), null});
        assertEquals("complexityMethodVisitor.compute()", 2, complexityMethodVisitor.compute());
    }
    
    public void testVisitLocalVariable() throws Throwable {
        ComplexityMethodVisitor complexityMethodVisitor = new ComplexityMethodVisitor();
        callPrivateMethod("org.crap4j.complexity.ComplexityMethodVisitor", "visitLocalVariable", new Class[] {String.class, String.class, String.class, Class.forName("com.agitar.org.objectweb.asm.Label"), Class.forName("com.agitar.org.objectweb.asm.Label"), int.class}, complexityMethodVisitor, new Object[] {"testComplexityMethodVisitorName", "testComplexityMethodVisitorDesc", "testComplexityMethodVisitorSignature", null, null, new Integer(100)});
        assertEquals("complexityMethodVisitor.compute()", 2, complexityMethodVisitor.compute());
    }
    
    public void testVisitLookupSwitchInsn() throws Throwable {
        ComplexityMethodVisitor complexityMethodVisitor = new ComplexityMethodVisitor();
        Object[] instance = (Object[]) Array.newInstance(Class.forName("com.agitar.org.objectweb.asm.Label"), new int[] {3});
        int[] ints = new int[1];
        callPrivateMethod("org.crap4j.complexity.ComplexityMethodVisitor", "visitLookupSwitchInsn", new Class[] {Class.forName("com.agitar.org.objectweb.asm.Label"), int[].class, classForName("com.agitar.org.objectweb.asm.Label[]")}, complexityMethodVisitor, new Object[] {null, ints, instance});
        assertEquals("complexityMethodVisitor.edges", new Integer(3), getPrivateField(complexityMethodVisitor, "edges"));
        assertEquals("complexityMethodVisitor.complexity", 4, complexityMethodVisitor.complexity);
    }
    
    public void testVisitMaxs() throws Throwable {
        ComplexityMethodVisitor complexityMethodVisitor = new ComplexityMethodVisitor();
        complexityMethodVisitor.visitMaxs(100, 1000);
        assertEquals("complexityMethodVisitor.compute()", 2, complexityMethodVisitor.compute());
    }
    
    public void testVisitMethodInsn() throws Throwable {
        ComplexityMethodVisitor complexityMethodVisitor = new ComplexityMethodVisitor();
        complexityMethodVisitor.visitMethodInsn(100, "testComplexityMethodVisitorParam2", "testComplexityMethodVisitorParam3", "testComplexityMethodVisitorParam4");
        assertEquals("complexityMethodVisitor.edges", new Integer(1), getPrivateField(complexityMethodVisitor, "edges"));
    }
    
    public void testVisitMultiANewArrayInsn() throws Throwable {
        ComplexityMethodVisitor complexityMethodVisitor = new ComplexityMethodVisitor();
        complexityMethodVisitor.visitMultiANewArrayInsn("testComplexityMethodVisitorParam1", 100);
        assertEquals("complexityMethodVisitor.edges", new Integer(1), getPrivateField(complexityMethodVisitor, "edges"));
    }
    
    public void testVisitParameterAnnotation() throws Throwable {
        ComplexityMethodVisitor.NullAnnotationVisitor result = (ComplexityMethodVisitor.NullAnnotationVisitor) new ComplexityMethodVisitor().visitParameterAnnotation(100, "testComplexityMethodVisitorParam2", true);
        assertNotNull("result", result);
    }
    
    public void testVisitTableSwitchInsn() throws Throwable {
        ComplexityMethodVisitor complexityMethodVisitor = new ComplexityMethodVisitor();
        Object[] instance = (Object[]) Array.newInstance(Class.forName("com.agitar.org.objectweb.asm.Label"), new int[] {0});
        callPrivateMethod("org.crap4j.complexity.ComplexityMethodVisitor", "visitTableSwitchInsn", new Class[] {int.class, int.class, Class.forName("com.agitar.org.objectweb.asm.Label"), classForName("com.agitar.org.objectweb.asm.Label[]")}, complexityMethodVisitor, new Object[] {new Integer(100), new Integer(1000), null, instance});
        assertEquals("complexityMethodVisitor.nodes", new Integer(1), getPrivateField(complexityMethodVisitor, "nodes"));
        assertEquals("complexityMethodVisitor.complexity", 1, complexityMethodVisitor.complexity);
    }
    
    public void testVisitTryCatchBlock() throws Throwable {
        ComplexityMethodVisitor complexityMethodVisitor = new ComplexityMethodVisitor();
        callPrivateMethod("org.crap4j.complexity.ComplexityMethodVisitor", "visitTryCatchBlock", new Class[] {Class.forName("com.agitar.org.objectweb.asm.Label"), Class.forName("com.agitar.org.objectweb.asm.Label"), Class.forName("com.agitar.org.objectweb.asm.Label"), String.class}, complexityMethodVisitor, new Object[] {null, null, null, "testComplexityMethodVisitorType"});
        assertEquals("complexityMethodVisitor.compute()", 2, complexityMethodVisitor.compute());
    }
    
    public void testVisitTypeInsn() throws Throwable {
        ComplexityMethodVisitor complexityMethodVisitor = new ComplexityMethodVisitor();
        complexityMethodVisitor.visitTypeInsn(100, "testComplexityMethodVisitorParam2");
        assertEquals("complexityMethodVisitor.edges", new Integer(1), getPrivateField(complexityMethodVisitor, "edges"));
    }
    
    public void testVisitVarInsn() throws Throwable {
        ComplexityMethodVisitor complexityMethodVisitor = new ComplexityMethodVisitor();
        complexityMethodVisitor.visitVarInsn(100, 1000);
        assertEquals("complexityMethodVisitor.edges", new Integer(1), getPrivateField(complexityMethodVisitor, "edges"));
    }
    
    public void testVisitLookupSwitchInsnThrowsNullPointerException() throws Throwable {
        ComplexityMethodVisitor complexityMethodVisitor = new ComplexityMethodVisitor();
        int[] ints = new int[0];
        try {
            callPrivateMethod("org.crap4j.complexity.ComplexityMethodVisitor", "visitLookupSwitchInsn", new Class[] {Class.forName("com.agitar.org.objectweb.asm.Label"), int[].class, classForName("com.agitar.org.objectweb.asm.Label[]")}, complexityMethodVisitor, new Object[] {null, ints, null});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertEquals("complexityMethodVisitor.nodes", new Integer(1), getPrivateField(complexityMethodVisitor, "nodes"));
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(ComplexityMethodVisitor.class, ex);
            assertEquals("complexityMethodVisitor.complexity", 1, complexityMethodVisitor.complexity);
        }
    }
    
    public void testVisitTableSwitchInsnThrowsNullPointerException() throws Throwable {
        ComplexityMethodVisitor complexityMethodVisitor = new ComplexityMethodVisitor();
        try {
            callPrivateMethod("org.crap4j.complexity.ComplexityMethodVisitor", "visitTableSwitchInsn", new Class[] {int.class, int.class, Class.forName("com.agitar.org.objectweb.asm.Label"), classForName("com.agitar.org.objectweb.asm.Label[]")}, complexityMethodVisitor, new Object[] {new Integer(100), new Integer(1000), null, null});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertEquals("complexityMethodVisitor.nodes", new Integer(1), getPrivateField(complexityMethodVisitor, "nodes"));
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(ComplexityMethodVisitor.class, ex);
            assertEquals("complexityMethodVisitor.complexity", 1, complexityMethodVisitor.complexity);
        }
    }
}

