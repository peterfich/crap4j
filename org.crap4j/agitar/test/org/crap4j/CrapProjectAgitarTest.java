/**
 * Generated by Agitar build: JUnitFactory Version 2.1.0.000576 (Build date: Oct 19, 2007) [2.1.0.000576]
 * JDK Version: 1.5.0_11
 *
 * Generated on Oct 26, 2007 3:58:13 PM
 * Time to generate: 00:39.031 seconds
 *
 */

package org.crap4j;

import com.agitar.lib.junit.AgitarTestCase;
import com.agitar.lib.mockingbird.Mockingbird;
import java.io.File;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Vector;
import org.crap4j.util.FileUtil;
import org.crap4j.util.MyStringBuilder;

public class CrapProjectAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return CrapProject.class;
    }
    
    public void testConstructor() throws Throwable {
        List libClasspath = new ArrayList(100);
        libClasspath.add(null);
        libClasspath.add("testString");
        CrapProject crapProject = new CrapProject("testCrapProjectProjectDir", libClasspath, new ArrayList(1000), new ArrayList(0), new ArrayList(1), "agitar");
        assertEquals("crapProject.outputDir()", new File("testCrapProjectProjectDir/agitar").getAbsolutePath(), crapProject.outputDir());
        assertEquals("crapProject.testClassDirs().size()", 0, crapProject.testClassDirs().size());
        assertEquals("crapProject.libClasspaths().size()", 1, crapProject.libClasspaths().size());
        assertEquals("crapProject.sourceDirs().size()", 0, crapProject.sourceDirs().size());
        assertEquals("crapProject.classDirs().size()", 0, crapProject.classDirs().size());
        assertEquals("crapProject.projectDir()", "testCrapProjectProjectDir", crapProject.projectDir());
    }
    
    public void testConstructor1() throws Throwable {
        List libClasspath = new ArrayList(100);
        libClasspath.add("testString");
        CrapProject crapProject = new CrapProject("testCrapProjectProjectDir", libClasspath, new ArrayList(1000), new ArrayList(0), new ArrayList(1), "agitar");
        assertEquals("crapProject.outputDir()", new File("testCrapProjectProjectDir/agitar").getAbsolutePath(), crapProject.outputDir());
        assertEquals("crapProject.testClassDirs().size()", 0, crapProject.testClassDirs().size());
        assertEquals("crapProject.libClasspaths().size()", 1, crapProject.libClasspaths().size());
        assertEquals("crapProject.sourceDirs().size()", 0, crapProject.sourceDirs().size());
        assertEquals("crapProject.classDirs().size()", 0, crapProject.classDirs().size());
        assertEquals("crapProject.projectDir()", "testCrapProjectProjectDir", crapProject.projectDir());
    }
    
    public void testConstructor2() throws Throwable {
        List libClasspath = new ArrayList(100);
        libClasspath.add(null);
        CrapProject crapProject = new CrapProject("testCrapProjectProjectDir", libClasspath, new ArrayList(1000), new ArrayList(0), new ArrayList(1), "agitar");
        assertEquals("crapProject.outputDir()", new File("testCrapProjectProjectDir/agitar").getAbsolutePath(), crapProject.outputDir());
        assertEquals("crapProject.testClassDirs().size()", 0, crapProject.testClassDirs().size());
        assertEquals("crapProject.libClasspaths().size()", 0, crapProject.libClasspaths().size());
        assertEquals("crapProject.sourceDirs().size()", 0, crapProject.sourceDirs().size());
        assertEquals("crapProject.classDirs().size()", 0, crapProject.classDirs().size());
        assertEquals("crapProject.projectDir()", "testCrapProjectProjectDir", crapProject.projectDir());
    }
    
    public void testConstructor3() throws Throwable {
        CrapProject crapProject = new CrapProject("testCrapProjectProjectDir", new ArrayList(100), new ArrayList(1000), new ArrayList(0), new ArrayList(1), "agitar");
        assertEquals("crapProject.outputDir()", new File("testCrapProjectProjectDir/agitar").getAbsolutePath(), crapProject.outputDir());
        assertEquals("crapProject.testClassDirs().size()", 0, crapProject.testClassDirs().size());
        assertEquals("crapProject.libClasspaths().size()", 0, crapProject.libClasspaths().size());
        assertEquals("crapProject.sourceDirs().size()", 0, crapProject.sourceDirs().size());
        assertEquals("crapProject.classDirs().size()", 0, crapProject.classDirs().size());
        assertEquals("crapProject.projectDir()", "testCrapProjectProjectDir", crapProject.projectDir());
    }
    
    public void testConstructor4() throws Throwable {
        List list = (List) Mockingbird.getProxyObject(List.class);
        List list2 = (List) Mockingbird.getProxyObject(List.class);
        List list3 = (List) Mockingbird.getProxyObject(List.class);
        List list4 = (List) Mockingbird.getProxyObject(List.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Iterator iterator2 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Iterator iterator3 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Iterator iterator4 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", Mockingbird.getProxyObject(ArrayList.class));
        Mockingbird.setReturnValue(list.iterator(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", Mockingbird.getProxyObject(ArrayList.class));
        Mockingbird.setReturnValue(list2.iterator(), iterator2);
        Mockingbird.setReturnValue(iterator2.hasNext(), false);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", Mockingbird.getProxyObject(ArrayList.class));
        Mockingbird.setReturnValue(list3.iterator(), iterator3);
        Mockingbird.setReturnValue(iterator3.hasNext(), false);
        ArrayList arrayList = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList);
        Mockingbird.setReturnValue(list4.iterator(), iterator4);
        Mockingbird.setReturnValue(iterator4.hasNext(), true);
        Mockingbird.setReturnValue(iterator4.next(), "");
        Boolean boolean2 = Boolean.FALSE;
        Mockingbird.setReturnValue(true, FileUtil.class, "isAbsolute", "(java.lang.String)boolean", boolean2, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(CrapProject.class, true), "makeFilePathAbsoluteWithProject", "(java.lang.String)java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, arrayList, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(iterator4.hasNext(), true);
        Mockingbird.setReturnValue(iterator4.next(), "");
        Mockingbird.setReturnValue(true, FileUtil.class, "isAbsolute", "(java.lang.String)boolean", boolean2, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(CrapProject.class, true), "makeFilePathAbsoluteWithProject", "(java.lang.String)java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, arrayList, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(iterator4.hasNext(), true);
        Mockingbird.setReturnValue(iterator4.next(), null);
        Mockingbird.setReturnValue(iterator4.hasNext(), true);
        Mockingbird.setReturnValue(iterator4.next(), null);
        Mockingbird.setReturnValue(iterator4.hasNext(), false);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(true, FileUtil.class, "ensureDirectory", "(java.lang.String)void", null, 1);
        Mockingbird.enterTestMode();
        CrapProject crapProject = new CrapProject("", list, list2, list3, list4, null);
        assertEquals("crapProject.outputDir()", "", crapProject.outputDir());
        assertNotNull("crapProject.testClassDirs()", crapProject.testClassDirs());
        assertNotNull("crapProject.libClasspaths()", crapProject.libClasspaths());
        assertNotNull("crapProject.sourceDirs()", crapProject.sourceDirs());
        assertNotNull("crapProject.classDirs()", crapProject.classDirs());
        assertEquals("crapProject.projectDir()", "", crapProject.projectDir());
    }
    
    public void testConstructor5() throws Throwable {
        List list = (List) Mockingbird.getProxyObject(List.class);
        List list2 = (List) Mockingbird.getProxyObject(List.class);
        List list3 = (List) Mockingbird.getProxyObject(List.class);
        List list4 = (List) Mockingbird.getProxyObject(List.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Iterator iterator2 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Iterator iterator3 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Iterator iterator4 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", Mockingbird.getProxyObject(ArrayList.class));
        Mockingbird.setReturnValue(list.iterator(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", Mockingbird.getProxyObject(ArrayList.class));
        Mockingbird.setReturnValue(list2.iterator(), iterator2);
        Mockingbird.setReturnValue(iterator2.hasNext(), false);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", Mockingbird.getProxyObject(ArrayList.class));
        Mockingbird.setReturnValue(list3.iterator(), iterator3);
        Mockingbird.setReturnValue(iterator3.hasNext(), false);
        ArrayList arrayList = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList);
        Mockingbird.setReturnValue(list4.iterator(), iterator4);
        Mockingbird.setReturnValue(iterator4.hasNext(), true);
        Mockingbird.setReturnValue(iterator4.next(), "");
        Boolean boolean2 = Boolean.TRUE;
        Mockingbird.setReturnValue(true, FileUtil.class, "isAbsolute", "(java.lang.String)boolean", boolean2, 1);
        Mockingbird.setReturnValue(arrayList.add(""), false);
        Mockingbird.setReturnValue(iterator4.hasNext(), true);
        Mockingbird.setReturnValue(iterator4.next(), "");
        Mockingbird.setReturnValue(true, FileUtil.class, "isAbsolute", "(java.lang.String)boolean", boolean2, 1);
        Mockingbird.setReturnValue(arrayList.add(""), false);
        Mockingbird.setReturnValue(iterator4.hasNext(), true);
        Mockingbird.setReturnValue(iterator4.next(), null);
        Mockingbird.setReturnValue(iterator4.hasNext(), true);
        Mockingbird.setReturnValue(iterator4.next(), null);
        Mockingbird.setReturnValue(iterator4.hasNext(), false);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(true, FileUtil.class, "ensureDirectory", "(java.lang.String)void", null, 1);
        Mockingbird.enterTestMode();
        CrapProject crapProject = new CrapProject("", list, list2, list3, list4, "");
        assertEquals("crapProject.outputDir()", "", crapProject.outputDir());
        assertNotNull("crapProject.testClassDirs()", crapProject.testClassDirs());
        assertNotNull("crapProject.libClasspaths()", crapProject.libClasspaths());
        assertNotNull("crapProject.sourceDirs()", crapProject.sourceDirs());
        assertNotNull("crapProject.classDirs()", crapProject.classDirs());
        assertEquals("crapProject.projectDir()", "", crapProject.projectDir());
    }
    
    public void testConstructor6() throws Throwable {
        List list = (List) Mockingbird.getProxyObject(List.class);
        List list2 = (List) Mockingbird.getProxyObject(List.class);
        List list3 = (List) Mockingbird.getProxyObject(List.class);
        List list4 = (List) Mockingbird.getProxyObject(List.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Iterator iterator2 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Iterator iterator3 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Iterator iterator4 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", Mockingbird.getProxyObject(ArrayList.class));
        Mockingbird.setReturnValue(list.iterator(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", Mockingbird.getProxyObject(ArrayList.class));
        Mockingbird.setReturnValue(list2.iterator(), iterator2);
        Mockingbird.setReturnValue(iterator2.hasNext(), false);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", Mockingbird.getProxyObject(ArrayList.class));
        Mockingbird.setReturnValue(list3.iterator(), iterator3);
        Mockingbird.setReturnValue(iterator3.hasNext(), false);
        ArrayList arrayList = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList);
        Mockingbird.setReturnValue(list4.iterator(), iterator4);
        Mockingbird.setReturnValue(iterator4.hasNext(), true);
        Mockingbird.setReturnValue(iterator4.next(), "");
        Boolean boolean2 = Boolean.FALSE;
        Mockingbird.setReturnValue(true, FileUtil.class, "isAbsolute", "(java.lang.String)boolean", boolean2, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(CrapProject.class, true), "makeFilePathAbsoluteWithProject", "(java.lang.String)java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, arrayList, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(iterator4.hasNext(), true);
        Mockingbird.setReturnValue(iterator4.next(), "");
        Mockingbird.setReturnValue(true, FileUtil.class, "isAbsolute", "(java.lang.String)boolean", boolean2, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(CrapProject.class, true), "makeFilePathAbsoluteWithProject", "(java.lang.String)java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, arrayList, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(iterator4.hasNext(), true);
        Mockingbird.setReturnValue(iterator4.next(), null);
        Mockingbird.setReturnValue(iterator4.hasNext(), true);
        Mockingbird.setReturnValue(iterator4.next(), null);
        Mockingbird.setReturnValue(iterator4.hasNext(), false);
        Mockingbird.setReturnValue(true, FileUtil.class, "isAbsolute", "(java.lang.String)boolean", Boolean.TRUE, 1);
        Mockingbird.setReturnValue(true, FileUtil.class, "ensureDirectory", "(java.lang.String)void", null, 1);
        Mockingbird.enterTestMode();
        CrapProject crapProject = new CrapProject("", list, list2, list3, list4, "X");
        assertEquals("crapProject.outputDir()", "X", crapProject.outputDir());
        assertNotNull("crapProject.testClassDirs()", crapProject.testClassDirs());
        assertNotNull("crapProject.libClasspaths()", crapProject.libClasspaths());
        assertNotNull("crapProject.sourceDirs()", crapProject.sourceDirs());
        assertNotNull("crapProject.classDirs()", crapProject.classDirs());
        assertEquals("crapProject.projectDir()", "", crapProject.projectDir());
    }
    
    public void testAllClasspaths() throws Throwable {
        CrapProject crapProject = new CrapProject("testCrapProjectProjectDir", new ArrayList(100), new ArrayList(1000), new ArrayList(0), new ArrayList(1), "agitar");
        ArrayList result = (ArrayList) crapProject.allClasspaths();
        assertEquals("result.size()", 0, result.size());
    }
    
    public void testClassDirs() throws Throwable {
        CrapProject crapProject = new CrapProject("testCrapProjectProjectDir", new ArrayList(100), new ArrayList(1000), new ArrayList(0), new ArrayList(1), "agitar");
        ArrayList result = (ArrayList) crapProject.classDirs();
        assertEquals("result.size()", 0, result.size());
    }
    
    public void testCollectionToXml() throws Throwable {
        MyStringBuilder s = new MyStringBuilder();
        List collection = new ArrayList(100);
        CrapProject.collectionToXml(s, "testCrapProjectCollectionName", "testCrapProjectItemName", collection);
        assertEquals("(ArrayList) collection.size()", 0, collection.size());
    }
    
    public void testCollectionToXml1() throws Throwable {
        MyStringBuilder s = new MyStringBuilder();
        List collection = new ArrayList(100);
        collection.add("testString");
        CrapProject.collectionToXml(s, "testCrapProjectCollectionName", "testCrapProjectItemName", collection);
        assertEquals("(ArrayList) collection.size()", 1, collection.size());
    }
    
    public void testGetAllProjectClasses() throws Throwable {
        CrapProject crapProject = new CrapProject("testCrapProjectProjectDir", new ArrayList(100), new ArrayList(1000), new ArrayList(0), new ArrayList(1), "agitar");
        ArrayList result = (ArrayList) crapProject.getAllProjectClasses();
        assertEquals("result.size()", 0, result.size());
        assertEquals("crapProject.classDirs().size()", 0, crapProject.classDirs().size());
    }
    
    public void testGetAllProjectClassesWithAggressiveMocks() throws Throwable {
        CrapProject crapProject = (CrapProject) Mockingbird.getProxyObject(CrapProject.class, true);
        List list = (List) Mockingbird.getProxyObject(List.class);
        Mockingbird.enterRecordingMode();
        ArrayList arrayList = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        setPrivateField(crapProject, "classDirs", list);
        Mockingbird.setReturnValue(list.iterator(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), "");
        ArrayList arrayList2 = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList2);
        Mockingbird.setReturnValue(true, FileUtil.class, "getAllFilesInDirMatchingPattern", "(java.lang.String,java.lang.String,boolean)java.util.List", null, 1);
        Boolean boolean2 = Boolean.FALSE;
        Mockingbird.setReturnValue(false, arrayList2, "addAll", "(java.util.Collection)boolean", new Object[] {null}, boolean2, 1);
        Mockingbird.setReturnValue(arrayList.addAll(arrayList2), false);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), "");
        ArrayList arrayList3 = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList3);
        Mockingbird.setReturnValue(true, FileUtil.class, "getAllFilesInDirMatchingPattern", "(java.lang.String,java.lang.String,boolean)java.util.List", null, 1);
        Mockingbird.setReturnValue(false, arrayList3, "addAll", "(java.util.Collection)boolean", new Object[] {null}, boolean2, 1);
        Mockingbird.setReturnValue(arrayList.addAll(arrayList3), false);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.enterTestMode(CrapProject.class);
        List result = crapProject.getAllProjectClasses();
        assertNotNull("result", result);
        assertNotNull("crapProject.classDirs()", crapProject.classDirs());
    }
    
    public void testGetClassesIn() throws Throwable {
        CrapProject crapProject = new CrapProject("testCrapProjectProjectDir", new ArrayList(100), new ArrayList(1000), new ArrayList(0), new ArrayList(1), "agitar");
        ArrayList result = (ArrayList) callPrivateMethod("org.crap4j.CrapProject", "getClassesIn", new Class[] {String.class}, crapProject, new Object[] {"agitar"});
        assertEquals("result.size()", 0, result.size());
    }
    
    public void testGetCoverageDir() throws Throwable {
        CrapProject crapProject = new CrapProject("testCrapProjectProjectDir", new ArrayList(100), new ArrayList(1000), new ArrayList(0), new ArrayList(1), "agitar");
        String result = crapProject.getCoverageDir();
        assertEquals("result", new File("testCrapProjectProjectDir/agitar/.results").getAbsolutePath(), result);
    }
    
    public void testGetProjectName() throws Throwable {
        CrapProject crapProject = new CrapProject("testCrapProjectProjectDir", new ArrayList(100), new ArrayList(1000), new ArrayList(0), new ArrayList(1), "agitar");
        String result = crapProject.getProjectName();
        assertEquals("result", "testCrapProjectProjectDir", result);
    }
    
    public void testGetReportFile() throws Throwable {
        CrapProject crapProject = new CrapProject("testCrapProjectProjectDir", new ArrayList(100), new ArrayList(1000), new ArrayList(0), new ArrayList(1), "agitar");
        File result = crapProject.getReportFile();
        assertEquals("result.getName()", "report.xml", result.getName());
    }
    
    public void testGetReportHtmlFile() throws Throwable {
        CrapProject crapProject = new CrapProject("testCrapProjectProjectDir", new ArrayList(100), new ArrayList(1000), new ArrayList(0), new ArrayList(1), "agitar");
        File result = crapProject.getReportHtmlFile();
        assertEquals("result.getName()", "index.html", result.getName());
    }
    
    public void testItemToXml() throws Throwable {
        MyStringBuilder s = new MyStringBuilder();
        CrapProject.itemToXml(s, "testCrapProjectItemName", "testCrapProjectItem");
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testLibClasspaths() throws Throwable {
        CrapProject crapProject = new CrapProject("testCrapProjectProjectDir", new ArrayList(100), new ArrayList(1000), new ArrayList(0), new ArrayList(1), "agitar");
        ArrayList result = (ArrayList) crapProject.libClasspaths();
        assertEquals("result.size()", 0, result.size());
    }
    
    public void testMakeAbsolute() throws Throwable {
        CrapProject crapProject = new CrapProject("testCrapProjectProjectDir", new ArrayList(100), new ArrayList(1000), new ArrayList(0), new ArrayList(1), "agitar");
        ArrayList result = (ArrayList) callPrivateMethod("org.crap4j.CrapProject", "makeAbsolute", new Class[] {List.class}, crapProject, new Object[] {new ArrayList(10)});
        assertEquals("result.size()", 0, result.size());
    }
    
    public void testMakeAbsolute1() throws Throwable {
        CrapProject crapProject = new CrapProject("testCrapProjectProjectDir", new ArrayList(100), new ArrayList(1000), new ArrayList(0), new ArrayList(1), "agitar");
        List arrayList = new ArrayList(10);
        arrayList.add("testString");
        ArrayList result = (ArrayList) callPrivateMethod("org.crap4j.CrapProject", "makeAbsolute", new Class[] {List.class}, crapProject, new Object[] {arrayList});
        assertEquals("result.size()", 1, result.size());
        assertEquals("(ArrayList) result.get(0)", new File("testCrapProjectProjectDir/testString").getAbsolutePath(), ((List) result).get(0));
    }
    
    public void testMakeAbsolute2() throws Throwable {
        CrapProject crapProject = new CrapProject("testCrapProjectProjectDir", new ArrayList(100), new ArrayList(1000), new ArrayList(0), new ArrayList(1), "agitar");
        List arrayList = new ArrayList(10);
        arrayList.add("Illegal Cpacity: ");
        ArrayList result = (ArrayList) callPrivateMethod("org.crap4j.CrapProject", "makeAbsolute", new Class[] {List.class}, crapProject, new Object[] {arrayList});
        assertEquals("result.size()", 1, result.size());
        assertEquals("(ArrayList) result.get(0)", "Illegal Cpacity: ", ((List) result).get(0));
    }
    
    public void testMakeAbsolute3() throws Throwable {
        CrapProject crapProject = new CrapProject("testCrapProjectProjectDir", new ArrayList(100), new ArrayList(1000), new ArrayList(0), new ArrayList(1), "agitar");
        List arrayList = new ArrayList(10);
        arrayList.add(null);
        arrayList.add("testString");
        ArrayList result = (ArrayList) callPrivateMethod("org.crap4j.CrapProject", "makeAbsolute", new Class[] {List.class}, crapProject, new Object[] {arrayList});
        assertEquals("result.size()", 1, result.size());
        assertEquals("(ArrayList) result.get(0)", new File("testCrapProjectProjectDir/testString").getAbsolutePath(), ((List) result).get(0));
    }
    
    public void testMakeAbsolute4() throws Throwable {
        CrapProject crapProject = new CrapProject("testCrapProjectProjectDir", new ArrayList(100), new ArrayList(1000), new ArrayList(0), new ArrayList(1), "agitar");
        List arrayList = new ArrayList(10);
        arrayList.add(null);
        ArrayList result = (ArrayList) callPrivateMethod("org.crap4j.CrapProject", "makeAbsolute", new Class[] {List.class}, crapProject, new Object[] {arrayList});
        assertEquals("result.size()", 0, result.size());
    }
    
    public void testMakeFilePathAbsoluteWithProject() throws Throwable {
        CrapProject crapProject = new CrapProject("testCrapProjectProjectDir", new ArrayList(100), new ArrayList(1000), new ArrayList(0), new ArrayList(1), "agitar");
        String result = (String) callPrivateMethod("org.crap4j.CrapProject", "makeFilePathAbsoluteWithProject", new Class[] {String.class}, crapProject, new Object[] {"testCrapProjectPath"});
        assertEquals("result", new File("testCrapProjectProjectDir/testCrapProjectPath").getAbsolutePath(), result);
    }
    
    public void testOutputDir() throws Throwable {
        CrapProject crapProject = new CrapProject("testCrapProjectProjectDir", new ArrayList(100), new ArrayList(1000), new ArrayList(0), new ArrayList(1), "agitar");
        String result = crapProject.outputDir();
        assertEquals("result", new File("testCrapProjectProjectDir/agitar").getAbsolutePath(), result);
    }
    
    public void testProjectDir() throws Throwable {
        CrapProject crapProject = new CrapProject("testCrapProjectProjectDir", new ArrayList(100), new ArrayList(1000), new ArrayList(0), new ArrayList(1), "agitar");
        String result = crapProject.projectDir();
        assertEquals("result", "testCrapProjectProjectDir", result);
    }
    
    public void testSourceDirs() throws Throwable {
        CrapProject crapProject = new CrapProject("testCrapProjectProjectDir", new ArrayList(100), new ArrayList(1000), new ArrayList(0), new ArrayList(1), "agitar");
        ArrayList result = (ArrayList) crapProject.sourceDirs();
        assertEquals("result.size()", 0, result.size());
    }
    
    public void testTestClassDirs() throws Throwable {
        CrapProject crapProject = new CrapProject("testCrapProjectProjectDir", new ArrayList(100), new ArrayList(1000), new ArrayList(0), new ArrayList(1), "agitar");
        ArrayList result = (ArrayList) crapProject.testClassDirs();
        assertEquals("result.size()", 0, result.size());
    }
    
    public void testToXml() throws Throwable {
        CrapProject crapProject = new CrapProject("testCrapProjectProjectDir", new ArrayList(100), new ArrayList(1000), new ArrayList(0), new ArrayList(1), "agitar");
        crapProject.toXml(new MyStringBuilder());
        assertEquals("crapProject.testClassDirs().size()", 0, crapProject.testClassDirs().size());
        assertEquals("crapProject.libClasspaths().size()", 0, crapProject.libClasspaths().size());
        assertEquals("crapProject.sourceDirs().size()", 0, crapProject.sourceDirs().size());
        assertEquals("crapProject.classDirs().size()", 0, crapProject.classDirs().size());
        assertEquals("crapProject.projectDir()", "testCrapProjectProjectDir", crapProject.projectDir());
    }
    
    public void testConstructorThrowsNullPointerException() throws Throwable {
        List libClasspath = new ArrayList(100);
        libClasspath.add("testString");
        List projectClassDirs = new ArrayList(1000);
        List sourceDirs = new ArrayList(0);
        try {
            new CrapProject("testCrapProjectProjectDir", libClasspath, null, projectClassDirs, sourceDirs, "testCrapProjectOutputDir");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(CrapProject.class, ex);
            assertEquals("(ArrayList) sourceDirs.size()", 0, sourceDirs.size());
            assertEquals("(ArrayList) projectClassDirs.size()", 0, projectClassDirs.size());
            assertEquals("(ArrayList) libClasspath.size()", 1, libClasspath.size());
        }
    }
    
    public void testConstructorThrowsNullPointerException1() throws Throwable {
        List libClasspath = new ArrayList(100);
        List testClassDirs = new ArrayList(1000);
        testClassDirs.add(null);
        List projectClassDirs = new ArrayList(0);
        try {
            new CrapProject("testCrapProjectProjectDir", libClasspath, testClassDirs, projectClassDirs, null, "testCrapProjectOutputDir");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(CrapProject.class, ex);
            assertEquals("(ArrayList) testClassDirs.size()", 1, testClassDirs.size());
            assertEquals("(ArrayList) projectClassDirs.size()", 0, projectClassDirs.size());
            assertEquals("(ArrayList) libClasspath.size()", 0, libClasspath.size());
        }
    }
    
    public void testConstructorThrowsNullPointerException2() throws Throwable {
        List libClasspath = new ArrayList(100);
        List testClassDirs = new ArrayList(1000);
        List projectClassDirs = new ArrayList(0);
        try {
            new CrapProject("testCrapProjectProjectDir", libClasspath, testClassDirs, projectClassDirs, null, "testCrapProjectOutputDir");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(CrapProject.class, ex);
            assertEquals("(ArrayList) testClassDirs.size()", 0, testClassDirs.size());
            assertEquals("(ArrayList) projectClassDirs.size()", 0, projectClassDirs.size());
            assertEquals("(ArrayList) libClasspath.size()", 0, libClasspath.size());
        }
    }
    
    public void testConstructorThrowsNullPointerException3() throws Throwable {
        List testClassDirs = new ArrayList(100);
        List projectClassDirs = new ArrayList(1000);
        List sourceDirs = new ArrayList(0);
        try {
            new CrapProject("testCrapProjectProjectDir", null, testClassDirs, projectClassDirs, sourceDirs, "testCrapProjectOutputDir");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(CrapProject.class, ex);
            assertEquals("(ArrayList) testClassDirs.size()", 0, testClassDirs.size());
            assertEquals("(ArrayList) sourceDirs.size()", 0, sourceDirs.size());
            assertEquals("(ArrayList) projectClassDirs.size()", 0, projectClassDirs.size());
        }
    }
    
    public void testConstructorThrowsNullPointerException4() throws Throwable {
        List libClasspath = new ArrayList(100);
        List testClassDirs = new ArrayList(1000);
        List sourceDirs = new ArrayList(0);
        try {
            new CrapProject("testCrapProjectProjectDir", libClasspath, testClassDirs, null, sourceDirs, "testCrapProjectOutputDir");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(CrapProject.class, ex);
            assertEquals("(ArrayList) testClassDirs.size()", 0, testClassDirs.size());
            assertEquals("(ArrayList) sourceDirs.size()", 0, sourceDirs.size());
            assertEquals("(ArrayList) libClasspath.size()", 0, libClasspath.size());
        }
    }
    
    public void testConstructorThrowsNullPointerException5() throws Throwable {
        List libClasspath = new ArrayList(100);
        List projectClassDirs = new ArrayList(1000);
        List sourceDirs = new ArrayList(0);
        try {
            new CrapProject("testCrapProjectProjectDir", libClasspath, null, projectClassDirs, sourceDirs, "testCrapProjectOutputDir");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(CrapProject.class, ex);
            assertEquals("(ArrayList) sourceDirs.size()", 0, sourceDirs.size());
            assertEquals("(ArrayList) projectClassDirs.size()", 0, projectClassDirs.size());
            assertEquals("(ArrayList) libClasspath.size()", 0, libClasspath.size());
        }
    }
    
    public void testConstructorThrowsNullPointerException6() throws Throwable {
        List libClasspath = new ArrayList(100);
        libClasspath.add("");
        List testClassDirs = new ArrayList(1000);
        List projectClassDirs = new ArrayList(0);
        try {
            new CrapProject("testCrapProjectProjectDir", libClasspath, testClassDirs, projectClassDirs, null, "testCrapProjectOutputDir");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(CrapProject.class, ex);
            assertEquals("(ArrayList) testClassDirs.size()", 0, testClassDirs.size());
            assertEquals("(ArrayList) projectClassDirs.size()", 0, projectClassDirs.size());
            assertEquals("(ArrayList) libClasspath.size()", 1, libClasspath.size());
        }
    }
    
    public void testConstructorThrowsNullPointerException7() throws Throwable {
        List testClassDirs = new ArrayList(100);
        testClassDirs.add("testString");
        List libClasspath = new Vector();
        try {
            new CrapProject("testCrapProjectProjectDir", libClasspath, testClassDirs, null, null, "testCrapProjectOutputDir");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(CrapProject.class, ex);
            assertEquals("(ArrayList) testClassDirs.size()", 1, testClassDirs.size());
            assertEquals("(Vector) libClasspath.size()", 0, libClasspath.size());
        }
    }
    
    public void testCollectionToXmlThrowsNullPointerException() throws Throwable {
        List collection = new ArrayList(100);
        try {
            CrapProject.collectionToXml(null, "testCrapProjectCollectionName", "testCrapProjectItemName", collection);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(CrapProject.class, ex);
            assertEquals("(ArrayList) collection.size()", 0, collection.size());
        }
    }
    
    public void testCollectionToXmlThrowsNullPointerException1() throws Throwable {
        MyStringBuilder s = new MyStringBuilder();
        try {
            CrapProject.collectionToXml(s, "testCrapProjectCollectionName", "testCrapProjectItemName", null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertEquals("s.currentIndentation", 2, ((Number) getPrivateField(s, "currentIndentation")).intValue());
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(CrapProject.class, ex);
        }
    }
    
    public void testGetClassesInThrowsIllegalArgumentException() throws Throwable {
        CrapProject crapProject = new CrapProject("testCrapProjectProjectDir", new ArrayList(100), new ArrayList(1000), new ArrayList(0), new ArrayList(1), "agitar");
        try {
            callPrivateMethod("org.crap4j.CrapProject", "getClassesIn", new Class[] {String.class}, crapProject, new Object[] {"testCrapProjectDirName"});
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertEquals("ex.getMessage()", new File("testCrapProjectDirName").getAbsolutePath() + " is not a directory", ex.getMessage());
            assertThrownBy(FileUtil.class, ex);
        }
    }
    
    public void testGetClassesInThrowsNullPointerException() throws Throwable {
        CrapProject crapProject = new CrapProject("testCrapProjectProjectDir", new ArrayList(100), new ArrayList(1000), new ArrayList(0), new ArrayList(1), "agitar");
        try {
            callPrivateMethod("org.crap4j.CrapProject", "getClassesIn", new Class[] {String.class}, crapProject, new Object[] {null});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(File.class, ex);
        }
    }
    
    public void testItemToXmlThrowsNullPointerException() throws Throwable {
        try {
            CrapProject.itemToXml(null, "testCrapProjectItemName", "testCrapProjectItem");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(CrapProject.class, ex);
        }
    }
    
    public void testMakeAbsoluteThrowsNullPointerException() throws Throwable {
        CrapProject crapProject = new CrapProject("testCrapProjectProjectDir", new ArrayList(100), new ArrayList(1000), new ArrayList(0), new ArrayList(1), "agitar");
        try {
            callPrivateMethod("org.crap4j.CrapProject", "makeAbsolute", new Class[] {List.class}, crapProject, new Object[] {null});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(CrapProject.class, ex);
        }
    }
    
    public void testMakeFilePathAbsoluteWithProjectThrowsNullPointerException() throws Throwable {
        CrapProject crapProject = new CrapProject("testCrapProjectProjectDir", new ArrayList(100), new ArrayList(1000), new ArrayList(0), new ArrayList(1), "agitar");
        try {
            callPrivateMethod("org.crap4j.CrapProject", "makeFilePathAbsoluteWithProject", new Class[] {String.class}, crapProject, new Object[] {null});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(File.class, ex);
        }
    }
    
    public void testToXmlThrowsNullPointerException() throws Throwable {
        CrapProject crapProject = new CrapProject("testCrapProjectProjectDir", new ArrayList(100), new ArrayList(1000), new ArrayList(0), new ArrayList(1), "agitar");
        try {
            crapProject.toXml(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(CrapProject.class, ex);
        }
    }
}

