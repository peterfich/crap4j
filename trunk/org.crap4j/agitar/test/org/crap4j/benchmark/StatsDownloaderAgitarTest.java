/**
 * Generated by Agitar build: JUnitFactory Version 2.1.0.000576 (Build date: Oct 19, 2007) [2.1.0.000576]
 * JDK Version: 1.5.0_11
 *
 * Generated on Nov 6, 2007 1:39:54 PM
 * Time to generate: 00:17.185 seconds
 *
 */

package org.crap4j.benchmark;

import com.agitar.lib.junit.AgitarTestCase;
import com.agitar.lib.mockingbird.Mockingbird;
import java.net.URL;
import org.apache.commons.httpclient.HttpClient;
import org.apache.commons.httpclient.StatusLine;
import org.apache.commons.httpclient.methods.GetMethod;

public class StatsDownloaderAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return StatsDownloader.class;
    }
    
    public void testConstructor() throws Throwable {
        StatsDownloader statsDownloader = new StatsDownloader("testStatsDownloaderHost");
        assertEquals("statsDownloader.host", "testStatsDownloaderHost", statsDownloader.host);
    }
    
    public void testConstructor1() throws Throwable {
        StatsDownloader statsDownloader = new StatsDownloader();
        assertEquals("statsDownloader.host", "http://www.crap4j.org/benchmark/", statsDownloader.host);
    }
    
    public void testGetAverage() throws Throwable {
        GlobalStats result = new StatsDownloader().getAverage(true);
        assertEquals("result.getCrapAverage()", -1.0F, result.getCrapAverage(), 1.0E-6F);
    }
    
    public void testGetAverage1() throws Throwable {
        GlobalStats result = new StatsDownloader().getAverage(false);
        assertEquals("result.getCrapAverage()", -1.0F, result.getCrapAverage(), 1.0E-6F);
    }
    
    public void testGetAverage2() throws Throwable {
        GlobalStats result = new StatsDownloader("testStatsDownloaderHost").getAverage(true);
        assertEquals("result.getCrapAverage()", -1.0F, result.getCrapAverage(), 1.0E-6F);
    }
    
    public void testGetAverageWithAggressiveMocks() throws Throwable {
        storeStaticField(GlobalStats.class, "NULL_STATS");
        StatsDownloader statsDownloader = (StatsDownloader) Mockingbird.getProxyObject(StatsDownloader.class, true);
        StatusLine statusLine = (StatusLine) Mockingbird.getProxyObject(StatusLine.class);
        statsDownloader.host = "";
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        setPrivateField(statusLine, "statusCode", new Integer(0));
        setPrivateField(GlobalStats.class, "NULL_STATS", null);
        URL uRL = (URL) Mockingbird.getProxyObject(URL.class);
        Mockingbird.replaceObjectForRecording(URL.class, "<init>(java.lang.String)", uRL);
        HttpClient httpClient = (HttpClient) Mockingbird.getProxyObject(HttpClient.class);
        Mockingbird.replaceObjectForRecording(HttpClient.class, "<init>()", httpClient);
        httpClient.setConnectionTimeout(5000);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(false, uRL, "toString", "()java.lang.String", new Object[] {}, "", 1);
        GetMethod getMethod = (GetMethod) Mockingbird.getProxyObject(GetMethod.class);
        Mockingbird.replaceObjectForRecording(GetMethod.class, "<init>(java.lang.String)", getMethod);
        setPrivateField(getMethod, "statusLine", statusLine);
        getMethod.addRequestHeader("Accept", "text/xml");
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(httpClient.executeMethod(getMethod), 0);
        getMethod.releaseConnection();
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(StatsDownloader.class);
        GlobalStats result = statsDownloader.getAverage(true);
        assertNull("result", result);
    }
    
    public void testGetAverageWithAggressiveMocks1() throws Throwable {
        StatsDownloader statsDownloader = (StatsDownloader) Mockingbird.getProxyObject(StatsDownloader.class, true);
        StatusLine statusLine = (StatusLine) Mockingbird.getProxyObject(StatusLine.class);
        statsDownloader.host = "";
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        setPrivateField(statusLine, "statusCode", new Integer(200));
        URL uRL = (URL) Mockingbird.getProxyObject(URL.class);
        Mockingbird.replaceObjectForRecording(URL.class, "<init>(java.lang.String)", uRL);
        HttpClient httpClient = (HttpClient) Mockingbird.getProxyObject(HttpClient.class);
        Mockingbird.replaceObjectForRecording(HttpClient.class, "<init>()", httpClient);
        httpClient.setConnectionTimeout(5000);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(false, uRL, "toString", "()java.lang.String", new Object[] {}, "", 1);
        GetMethod getMethod = (GetMethod) Mockingbird.getProxyObject(GetMethod.class);
        Mockingbird.replaceObjectForRecording(GetMethod.class, "<init>(java.lang.String)", getMethod);
        setPrivateField(getMethod, "statusLine", statusLine);
        getMethod.addRequestHeader("Accept", "text/xml");
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(httpClient.executeMethod(getMethod), 0);
        Mockingbird.setReturnValue(getMethod.getResponseBodyAsString(), "");
        Mockingbird.setReturnValue(true, Float.class, "parseFloat", "(java.lang.String)float", new Object[] {""}, new Float(2.8E-45F), 1);
        Mockingbird.replaceObjectForRecording(GlobalStats.class, "<init>(float,float,float,float)", Mockingbird.getProxyObject(GlobalStats.class));
        getMethod.releaseConnection();
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(StatsDownloader.class);
        GlobalStats result = statsDownloader.getAverage(true);
        assertEquals("result.getCrapAverage()", 0.0F, result.getCrapAverage(), 1.0E-6F);
    }
    
    public void testMain() throws Throwable {
        String[] args = new String[1];
        StatsDownloader.main(args);
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testConstructorThrowsIllegalArgumentException() throws Throwable {
        try {
            new StatsDownloader(null);
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertEquals("ex.getMessage()", "Need valid host", ex.getMessage());
            assertThrownBy(StatsDownloader.class, ex);
        }
    }
}

