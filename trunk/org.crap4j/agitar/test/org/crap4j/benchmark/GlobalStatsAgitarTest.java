/**
 * Generated by Agitar build: JUnitFactory Version 2.1.1.000614 (Build date: Nov 19, 2007) [2.1.1.000614]
 * JDK Version: 1.5.0_11
 *
 * Generated on Nov 27, 2007 5:08:05 PM
 * Time to generate: 00:16.364 seconds
 *
 */

package org.crap4j.benchmark;

import com.agitar.lib.junit.AgitarTestCase;

public class GlobalStatsAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return GlobalStats.class;
    }
    
    public void testConstructor() throws Throwable {
        GlobalStats globalStats = new GlobalStats(100.0F, 1000.0F, 0.0F, -1.0F);
        assertEquals("globalStats.getCrapLoadAverage()", 1000.0F, globalStats.getCrapLoadAverage(), 1.0E-6F);
        assertEquals("globalStats.getCrapAverage()", 100.0F, globalStats.getCrapAverage(), 1.0E-6F);
        assertEquals("globalStats.getCrapMethodAverage()", 0.0F, globalStats.getCrapMethodAverage(), 1.0E-6F);
        assertEquals("globalStats.getTotalMethodAverage()", -1.0F, globalStats.getTotalMethodAverage(), 1.0E-6F);
    }
    
    public void testGetCrapAverageDiff() throws Throwable {
        float result = new GlobalStats(42.42F, 100.0F, 1000.0F, 0.0F).getCrapAverageDiff(42.42F);
        assertEquals("result", 0.0F, result, 1.0E-6F);
    }
    
    public void testGetCrapAverageDiff1() throws Throwable {
        float result = new GlobalStats(100.0F, 1000.0F, 0.0F, -1.0F).getCrapAverageDiff(1000.0F);
        assertEquals("result", 900.0F, result, 1.0E-6F);
    }
    
    public void testGetCrapLoadAverageDiff() throws Throwable {
        float result = new GlobalStats(100.0F, -2.0F, 1000.0F, 0.0F).getCrapLoadAverageDiff(-2);
        assertEquals("result", 0.0F, result, 1.0E-6F);
    }
    
    public void testGetCrapLoadAverageDiff1() throws Throwable {
        float result = new GlobalStats(100.0F, 1000.0F, 0.0F, -1.0F).getCrapLoadAverageDiff(100);
        assertEquals("result", -900.0F, result, 1.0E-6F);
    }
    
    public void testGetCrapMethodAverageDiff() throws Throwable {
        float result = new GlobalStats(100.0F, 1000.0F, 0.0F, -1.0F).getCrapMethodAverageDiff(100);
        assertEquals("result", 100.0F, result, 1.0E-6F);
    }
    
    public void testGetCrapMethodAverageDiff1() throws Throwable {
        float result = new GlobalStats(100.0F, 1000.0F, 0.0F, -1.0F).getCrapMethodAverageDiff(0);
        assertEquals("result", 0.0F, result, 1.0E-6F);
    }
    
    public void testGetTotalMethodAverageDiff() throws Throwable {
        float result = new GlobalStats(100.0F, 1000.0F, 0.0F, 0.0F).getTotalMethodAverageDiff(0);
        assertEquals("result", 0.0F, result, 1.0E-6F);
    }
    
    public void testGetTotalMethodAverageDiff1() throws Throwable {
        float result = new GlobalStats(100.0F, 1000.0F, 0.0F, -1.0F).getTotalMethodAverageDiff(100);
        assertEquals("result", 101.0F, result, 1.0E-6F);
    }
    
    public void testRetrieveStatsFromBenchmarkSite() throws Throwable {
        GlobalStats.retrieveStatsFromBenchmarkSite();
        assertTrue("Test call resulted in expected outcome", true);
        // dependencies on static and environment state led to removal of 1 assertion
    }
    
    public void testSetCrapAverage() throws Throwable {
        GlobalStats statsFromBenchmarkSite = GlobalStats.retrieveStatsFromBenchmarkSite();
        statsFromBenchmarkSite.setCrapAverage(100.0F);
        assertEquals("statsFromBenchmarkSite.getCrapAverage()", 100.0F, statsFromBenchmarkSite.getCrapAverage(), 1.0E-6F);
    }
    
    public void testSetCrapLoadAverage() throws Throwable {
        GlobalStats statsFromBenchmarkSite = GlobalStats.retrieveStatsFromBenchmarkSite();
        statsFromBenchmarkSite.setCrapLoadAverage(100.0F);
        assertEquals("statsFromBenchmarkSite.getCrapLoadAverage()", 100.0F, statsFromBenchmarkSite.getCrapLoadAverage(), 1.0E-6F);
    }
    
    public void testSetCrapMethodAverage() throws Throwable {
        GlobalStats globalStats = new GlobalStats(100.0F, 1000.0F, 0.0F, -1.0F);
        globalStats.setCrapMethodAverage(100.0F);
        assertEquals("globalStats.getCrapMethodAverage()", 100.0F, globalStats.getCrapMethodAverage(), 1.0E-6F);
    }
    
    public void testSetTotalMethodAverage() throws Throwable {
        GlobalStats statsFromBenchmarkSite = GlobalStats.retrieveStatsFromBenchmarkSite();
        statsFromBenchmarkSite.setTotalMethodAverage(100.0F);
        assertEquals("statsFromBenchmarkSite.getTotalMethodAverage()", 100.0F, statsFromBenchmarkSite.getTotalMethodAverage(), 1.0E-6F);
    }
}

