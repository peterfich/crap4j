/**
 * Generated by Agitar build: JUnitFactory Version 2.1.0.000576 (Build date: Oct 19, 2007) [2.1.0.000576]
 * JDK Version: 1.5.0_11
 *
 * Generated on Nov 6, 2007 1:41:10 PM
 * Time to generate: 00:42.959 seconds
 *
 */

package org.crap4j.util;

import com.agitar.lib.junit.AgitarTestCase;
import com.agitar.lib.mockingbird.Mockingbird;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.FilenameFilter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

public class FileUtilAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return FileUtil.class;
    }
    
    public void testConstructor() throws Throwable {
        new FileUtil();
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testDeleteDirectory() throws Throwable {
        File file = (File) Mockingbird.getProxyObject(File.class);
        String[] strings = new String[2];
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, file, "list", "()java.lang.String[]", new Object[] {}, strings, 1);
        strings[0] = "";
        strings[1] = "";
        File file2 = (File) Mockingbird.getProxyObject(File.class);
        Mockingbird.replaceObjectForRecording(File.class, "<init>(java.io.File,java.lang.String)", file2);
        Boolean boolean2 = Boolean.TRUE;
        Mockingbird.setReturnValue(false, file2, "isDirectory", "()boolean", new Object[] {}, boolean2, 1);
        Mockingbird.setReturnValue(true, FileUtil.class, "deleteDirectory", "(java.io.File)void", new Object[] {file2}, null, 1);
        File file3 = (File) Mockingbird.getProxyObject(File.class);
        Mockingbird.replaceObjectForRecording(File.class, "<init>(java.io.File,java.lang.String)", file3);
        Mockingbird.setReturnValue(false, file3, "isDirectory", "()boolean", new Object[] {}, boolean2, 1);
        Mockingbird.setReturnValue(true, FileUtil.class, "deleteDirectory", "(java.io.File)void", new Object[] {file3}, null, 1);
        Mockingbird.setReturnValue(false, file, "delete", "()boolean", new Object[] {}, Boolean.FALSE, 1);
        Mockingbird.enterTestMode(FileUtil.class);
        callPrivateMethod("org.crap4j.util.FileUtil", "deleteDirectory", new Class[] {File.class}, null, new Object[] {file});
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testEnsureCleanDirectory() throws Throwable {
        Mockingbird.enterRecordingMode();
        File file = (File) Mockingbird.getProxyObject(File.class);
        Mockingbird.replaceObjectForRecording(File.class, "<init>(java.lang.String)", file);
        Mockingbird.setReturnValue(false, file, "exists", "()boolean", new Object[] {}, Boolean.FALSE, 1);
        Mockingbird.setReturnValue(false, file, "mkdirs", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.enterTestMode(FileUtil.class);
        FileUtil.ensureCleanDirectory("testFileUtilOutputDir");
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testEnsureCleanDirectory1() throws Throwable {
        String[] strings = new String[2];
        Mockingbird.enterRecordingMode();
        File file = (File) Mockingbird.getProxyObject(File.class);
        Mockingbird.replaceObjectForRecording(File.class, "<init>(java.lang.String)", file);
        strings[0] = "";
        strings[1] = "";
        Mockingbird.setReturnValue(false, file, "exists", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, file, "list", "()java.lang.String[]", new Object[] {}, strings, 1);
        File file2 = (File) Mockingbird.getProxyObject(File.class);
        Mockingbird.replaceObjectForRecording(File.class, "<init>(java.io.File,java.lang.String)", file2);
        Boolean boolean2 = Boolean.FALSE;
        Mockingbird.setReturnValue(false, file2, "isDirectory", "()boolean", new Object[] {}, boolean2, 1);
        Mockingbird.setReturnValue(false, file2, "delete", "()boolean", new Object[] {}, boolean2, 1);
        File file3 = (File) Mockingbird.getProxyObject(File.class);
        Mockingbird.replaceObjectForRecording(File.class, "<init>(java.io.File,java.lang.String)", file3);
        Mockingbird.setReturnValue(false, file3, "isDirectory", "()boolean", new Object[] {}, boolean2, 1);
        Mockingbird.setReturnValue(false, file3, "delete", "()boolean", new Object[] {}, boolean2, 1);
        Mockingbird.setReturnValue(false, file, "delete", "()boolean", new Object[] {}, boolean2, 1);
        Mockingbird.setReturnValue(false, file, "mkdirs", "()boolean", new Object[] {}, boolean2, 1);
        Mockingbird.enterTestMode(FileUtil.class);
        FileUtil.ensureCleanDirectory("");
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testEnsureDirectory() throws Throwable {
        Mockingbird.enterRecordingMode();
        File file = (File) Mockingbird.getProxyObject(File.class);
        Mockingbird.replaceObjectForRecording(File.class, "<init>(java.lang.String)", file);
        Boolean boolean2 = Boolean.FALSE;
        Mockingbird.setReturnValue(false, file, "exists", "()boolean", new Object[] {}, boolean2, 1);
        Mockingbird.setReturnValue(false, file, "mkdirs", "()boolean", new Object[] {}, boolean2, 1);
        Mockingbird.enterTestMode(FileUtil.class);
        FileUtil.ensureDirectory("");
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testEnsureDirectory1() throws Throwable {
        Mockingbird.enterRecordingMode();
        File file = (File) Mockingbird.getProxyObject(File.class);
        Mockingbird.replaceObjectForRecording(File.class, "<init>(java.lang.String)", file);
        Mockingbird.setReturnValue(false, file, "exists", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.enterTestMode(FileUtil.class);
        FileUtil.ensureDirectory("");
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testEnsureNewFile() throws Throwable {
        File file = new File("testFileUtilParam1");
        callPrivateMethod("org.crap4j.util.FileUtil", "ensureNewFile", new Class[] {File.class}, null, new Object[] {file});
        assertEquals("file.getName()", "testFileUtilParam1", file.getName());
    }
    
    public void testEnsureNewFile1() throws Throwable {
        File file = (File) Mockingbird.getProxyObject(File.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(file.exists(), true);
        Mockingbird.setReturnValue(file.delete(), true);
        Mockingbird.enterTestMode(FileUtil.class);
        callPrivateMethod("org.crap4j.util.FileUtil", "ensureNewFile", new Class[] {File.class}, null, new Object[] {file});
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testEraseFile() throws Throwable {
        FileUtil.eraseFile("testFileUtilParam1");
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testGetAllFilesInDirMatchingPattern() throws Throwable {
        File[] files = new File[2];
        File file = (File) Mockingbird.getProxyObject(File.class);
        File file2 = (File) Mockingbird.getProxyObject(File.class);
        Mockingbird.enterRecordingMode();
        File file3 = (File) Mockingbird.getProxyObject(File.class);
        Mockingbird.replaceObjectForRecording(File.class, "<init>(java.lang.String)", file3);
        files[0] = file;
        files[1] = file2;
        Boolean boolean2 = Boolean.TRUE;
        Mockingbird.setReturnValue(false, file3, "isDirectory", "()boolean", new Object[] {}, boolean2, 1);
        Mockingbird.replaceObjectForRecording(Class.forName("org.crap4j.util.FileUtil$1"), "<init>(boolean,java.lang.String)", Mockingbird.getProxyObject(Class.forName("org.crap4j.util.FileUtil$1")));
        Mockingbird.setReturnValue(true, FileUtil.class, "checkDirectory", "(java.io.File)void", new Object[] {file3}, null, 1);
        ArrayList arrayList = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList);
        Mockingbird.setReturnValue(false, file3, "listFiles", "()java.io.File[]", new Object[] {}, files, 1);
        Mockingbird.setReturnValue(true, FileUtil.class, "passesFilter", "(java.io.File,java.io.FilenameFilter,java.io.File)boolean", boolean2, 1);
        Boolean boolean3 = Boolean.FALSE;
        Mockingbird.setReturnValue(false, arrayList, "add", "(java.lang.Object)boolean", boolean3, 1);
        Mockingbird.setReturnValue(false, file, "isDirectory", "()boolean", boolean3, 1);
        Mockingbird.setReturnValue(true, FileUtil.class, "passesFilter", "(java.io.File,java.io.FilenameFilter,java.io.File)boolean", boolean2, 1);
        Mockingbird.setReturnValue(false, arrayList, "add", "(java.lang.Object)boolean", boolean3, 1);
        Mockingbird.setReturnValue(false, file2, "isDirectory", "()boolean", boolean3, 1);
        Mockingbird.enterTestMode(FileUtil.class);
        List result = FileUtil.getAllFilesInDirMatchingPattern("", "", false);
        assertNotNull("result", result);
    }
    
    public void testGetFileNameWithoutExtension() throws Throwable {
        String result = (String) callPrivateMethod("org.crap4j.util.FileUtil", "getFileNameWithoutExtension", new Class[] {File.class}, null, new Object[] {new File("testFileUtilParam1")});
        assertEquals("result", "testFileUtilParam1", result);
    }
    
    public void testGetFileNameWithoutExtension1() throws Throwable {
        File file = new File("/home/agitar/work/sexy-dolphin-06-agitar-0/tmp/agitar-agitar/Agitator43884.dir/Agitator9.tmp");
        String result = (String) callPrivateMethod("org.crap4j.util.FileUtil", "getFileNameWithoutExtension", new Class[] {File.class}, null, new Object[] {file});
        assertEquals("result", "Agitator9", result);
    }
    
    public void testGetSubTmpDir() throws Throwable {
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(true, System.class, "getProperty", "(java.lang.String,java.lang.String)java.lang.String", new Object[] {"java.io.tmpDir", "/tmp"}, "", 1);
        File file = (File) Mockingbird.getProxyObject(File.class);
        Mockingbird.replaceObjectForRecording(File.class, "<init>(java.lang.String)", file);
        Mockingbird.setReturnValue(false, file, "exists", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        File file2 = (File) Mockingbird.getProxyObject(File.class);
        Mockingbird.replaceObjectForRecording(File.class, "<init>(java.lang.String,java.lang.String)", file2);
        Mockingbird.setReturnValue(false, file2, "mkdir", "()boolean", new Object[] {}, Boolean.FALSE, 1);
        Mockingbird.setReturnValue(false, file2, "getCanonicalPath", "()java.lang.String", new Object[] {}, "", 1);
        Mockingbird.enterTestMode(FileUtil.class);
        String result = FileUtil.getSubTmpDir("");
        assertEquals("result", "", result);
    }
    
    public void testGetTmpFile() throws Throwable {
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(true, System.class, "getProperty", "(java.lang.String,java.lang.String)java.lang.String", new Object[] {"java.io.tmpDir", "/tmp"}, "", 1);
        File file = (File) Mockingbird.getProxyObject(File.class);
        Mockingbird.replaceObjectForRecording(File.class, "<init>(java.lang.String)", file);
        Boolean boolean2 = Boolean.FALSE;
        Mockingbird.setReturnValue(false, file, "exists", "()boolean", new Object[] {}, boolean2, 1);
        Mockingbird.setReturnValue(false, file, "mkdir", "()boolean", new Object[] {}, boolean2, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.enterTestMode(FileUtil.class);
        String result = FileUtil.getTmpFile("");
        assertEquals("result", "", result);
    }
    
    public void testHasTestClassFiles() throws Throwable {
        List arrayList = new ArrayList(100);
        arrayList.add(new File(".tp"));
        boolean result = FileUtil.hasTestClassFiles(arrayList);
        assertFalse("result", result);
    }
    
    public void testHasTestClassFiles1() throws Throwable {
        List arrayList = new ArrayList(100);
        File file = new File("/home/agitar/work/sexy-dolphin-06-agitar-0/tmp/agitar-agitar/Agitator43884.dir/Agitator9.tmp");
        arrayList.add(file);
        arrayList.add(new File("testFileUtilParam11"));
        boolean result = FileUtil.hasTestClassFiles(arrayList);
        assertFalse("result", result);
    }
    
    public void testHasTestClassFiles2() throws Throwable {
        List arrayList = new ArrayList(100);
        arrayList.add(new File("testFileUtilParam1"));
        boolean result = FileUtil.hasTestClassFiles(arrayList);
        assertFalse("result", result);
    }
    
    public void testHasTestClassFiles3() throws Throwable {
        boolean result = FileUtil.hasTestClassFiles(new ArrayList(100));
        assertFalse("result", result);
    }
    
    public void testHasTestClassFiles4() throws Throwable {
        List list = (List) Mockingbird.getProxyObject(List.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        File file = (File) Mockingbird.getProxyObject(File.class);
        File file2 = (File) Mockingbird.getProxyObject(File.class);
        File file3 = (File) Mockingbird.getProxyObject(File.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(list.iterator(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), file);
        Mockingbird.setReturnValue(false, file, "getName", "()java.lang.String", new Object[] {}, "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "lastIndexOf", "(int)int", new Integer(0), 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "substring", "(int,int)java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "indexOf", "(java.lang.String)int", new Integer(-1), 1);
        Boolean boolean2 = Boolean.FALSE;
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "endsWith", "(java.lang.String)boolean", boolean2, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "startsWith", "(java.lang.String)boolean", boolean2, 1);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), file2);
        Mockingbird.setReturnValue(false, file2, "getName", "()java.lang.String", new Object[] {}, "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "lastIndexOf", "(int)int", new Integer(0), 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "substring", "(int,int)java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "indexOf", "(java.lang.String)int", new Integer(-1), 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "endsWith", "(java.lang.String)boolean", boolean2, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "startsWith", "(java.lang.String)boolean", boolean2, 1);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), file3);
        Mockingbird.setReturnValue(false, file3, "getName", "()java.lang.String", new Object[] {}, "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "lastIndexOf", "(int)int", new Integer(-1), 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "indexOf", "(java.lang.String)int", new Integer(0), 1);
        Mockingbird.enterTestMode(FileUtil.class);
        boolean result = FileUtil.hasTestClassFiles(list);
        assertTrue("result", result);
    }
    
    public void testIsAbsolute() throws Throwable {
        boolean result = FileUtil.isAbsolute("testFileUtilParam1");
        assertFalse("result", result);
    }
    
    public void testIsAbsolute1() throws Throwable {
        boolean result = FileUtil.isAbsolute(":5w@=g4");
        assertTrue("result", result);
    }
    
    public void testIsAbsolute2() throws Throwable {
        boolean result = FileUtil.isAbsolute(null);
        assertFalse("result", result);
    }
    
    public void testIsAbsolute3() throws Throwable {
        boolean result = FileUtil.isAbsolute("/6");
        assertTrue("result", result);
    }
    
    public void testIsTestFile() throws Throwable {
        boolean result = ((Boolean) callPrivateMethod("org.crap4j.util.FileUtil", "isTestFile", new Class[] {String.class}, null, new Object[] {"Test 51{zs{[x"})).booleanValue();
        assertTrue("result", result);
    }
    
    public void testIsTestFile1() throws Throwable {
        boolean result = ((Boolean) callPrivateMethod("org.crap4j.util.FileUtil", "isTestFile", new Class[] {String.class}, null, new Object[] {"testFileUtilFileName"})).booleanValue();
        assertFalse("result", result);
    }
    
    public void testIsTestFile2() throws Throwable {
        boolean result = ((Boolean) callPrivateMethod("org.crap4j.util.FileUtil", "isTestFile", new Class[] {String.class}, null, new Object[] {"Test"})).booleanValue();
        assertTrue("result", result);
    }
    
    public void testIsTestFile3() throws Throwable {
        boolean result = ((Boolean) callPrivateMethod("org.crap4j.util.FileUtil", "isTestFile", new Class[] {String.class}, null, new Object[] {"KeYAgitarTestPR7Ey]6.!`{"})).booleanValue();
        assertTrue("result", result);
    }
    
    public void testJoinPath() throws Throwable {
        String result = FileUtil.joinPath("testFileUtilParam1", "testFileUtilParam2");
        assertEquals("result", new File("testFileUtilParam1/testFileUtilParam2").getAbsolutePath(), result);
    }
    
    public void testListFiles() throws Throwable {
        File file = (File) Mockingbird.getProxyObject(File.class);
        FilenameFilter filenameFilter = (FilenameFilter) Mockingbird.getProxyObject(FilenameFilter.class);
        File[] files = new File[2];
        File file2 = (File) Mockingbird.getProxyObject(File.class);
        File file3 = (File) Mockingbird.getProxyObject(File.class);
        files[0] = file2;
        files[1] = file3;
        Mockingbird.enterRecordingMode();
        Boolean boolean2 = Boolean.TRUE;
        Mockingbird.setReturnValue(false, file, "isDirectory", "()boolean", new Object[] {}, boolean2, 1);
        ArrayList arrayList = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList);
        Mockingbird.setReturnValue(false, file, "listFiles", "()java.io.File[]", new Object[] {}, files, 1);
        Mockingbird.setReturnValue(false, file2, "getName", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, filenameFilter, "accept", "(java.io.File,java.lang.String)boolean", boolean2, 1);
        Boolean boolean3 = Boolean.FALSE;
        Mockingbird.setReturnValue(false, arrayList, "add", "(java.lang.Object)boolean", boolean3, 1);
        Mockingbird.setReturnValue(false, file2, "isDirectory", "()boolean", boolean3, 1);
        Mockingbird.setReturnValue(false, file3, "getName", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, filenameFilter, "accept", "(java.io.File,java.lang.String)boolean", boolean3, 1);
        Mockingbird.setReturnValue(false, file3, "isDirectory", "()boolean", boolean3, 1);
        Mockingbird.enterTestMode(FileUtil.class);
        List result = (List) callPrivateMethod("org.crap4j.util.FileUtil", "listFiles", new Class[] {File.class, FilenameFilter.class}, null, new Object[] {file, filenameFilter});
        assertNotNull("result", result);
    }
    
    public void testListFiles1() throws Throwable {
        File file = (File) Mockingbird.getProxyObject(File.class);
        File[] files = new File[2];
        File file2 = (File) Mockingbird.getProxyObject(File.class);
        File file3 = (File) Mockingbird.getProxyObject(File.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(true, FileUtil.class, "checkDirectory", "(java.io.File)void", new Object[] {file}, null, 1);
        files[0] = file2;
        files[1] = file3;
        ArrayList arrayList = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList);
        Mockingbird.setReturnValue(false, file, "listFiles", "()java.io.File[]", new Object[] {}, files, 1);
        Boolean boolean2 = Boolean.TRUE;
        Mockingbird.setReturnValue(true, FileUtil.class, "passesFilter", "(java.io.File,java.io.FilenameFilter,java.io.File)boolean", boolean2, 1);
        Boolean boolean3 = Boolean.FALSE;
        Mockingbird.setReturnValue(false, arrayList, "add", "(java.lang.Object)boolean", boolean3, 1);
        Mockingbird.setReturnValue(false, file2, "isDirectory", "()boolean", boolean2, 1);
        Mockingbird.setReturnValue(true, FileUtil.class, "listFiles", "(java.io.File,java.io.FilenameFilter)java.util.List", null, 1);
        Mockingbird.setReturnValue(arrayList.addAll(null), false);
        Mockingbird.setReturnValue(true, FileUtil.class, "passesFilter", "(java.io.File,java.io.FilenameFilter,java.io.File)boolean", boolean2, 1);
        Mockingbird.setReturnValue(false, arrayList, "add", "(java.lang.Object)boolean", boolean3, 1);
        Mockingbird.setReturnValue(false, file3, "isDirectory", "()boolean", boolean2, 1);
        Mockingbird.setReturnValue(true, FileUtil.class, "listFiles", "(java.io.File,java.io.FilenameFilter)java.util.List", null, 1);
        Mockingbird.setReturnValue(arrayList.addAll(null), false);
        Mockingbird.enterTestMode(FileUtil.class);
        List result = (List) callPrivateMethod("org.crap4j.util.FileUtil", "listFiles", new Class[] {File.class, FilenameFilter.class}, null, new Object[] {file, null});
        assertNotNull("result", result);
    }
    
    public void testMakeRelativePaths() throws Throwable {
        ArrayList result = (ArrayList) FileUtil.makeRelativePaths("testFileUtilParam1", new ArrayList(100));
        assertEquals("result.size()", 0, result.size());
    }
    
    public void testMakeRelativePaths1() throws Throwable {
        List arrayList = new ArrayList(100);
        arrayList.add(new File("testFileUtilParam1"));
        ArrayList result = (ArrayList) FileUtil.makeRelativePaths("", arrayList);
        assertEquals("result.size()", 1, result.size());
        assertEquals("(ArrayList) result.get(0)", "estFileUtilParam1", result.get(0));
    }
    
    public void testPassesFilter() throws Throwable {
        boolean result = ((Boolean) callPrivateMethod("org.crap4j.util.FileUtil", "passesFilter", new Class[] {File.class, FilenameFilter.class, File.class}, null, new Object[] {new File("testFileUtilParam1"), null, new File("testFileUtilParam11")})).booleanValue();
        assertTrue("result", result);
    }
    
    public void testPassesFilter1() throws Throwable {
        FilenameFilter filenameFilter = (FilenameFilter) Mockingbird.getProxyObject(FilenameFilter.class);
        File file = (File) Mockingbird.getProxyObject(File.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, file, "getName", "()java.lang.String", new Object[] {}, "", 1);
        Mockingbird.setReturnValue(false, filenameFilter, "accept", "(java.io.File,java.lang.String)boolean", Boolean.FALSE, 1);
        Mockingbird.enterTestMode(FileUtil.class);
        boolean result = ((Boolean) callPrivateMethod("org.crap4j.util.FileUtil", "passesFilter", new Class[] {File.class, FilenameFilter.class, File.class}, null, new Object[] {null, filenameFilter, file})).booleanValue();
        assertFalse("result", result);
    }
    
    public void testPassesFilter2() throws Throwable {
        FilenameFilter filenameFilter = (FilenameFilter) Mockingbird.getProxyObject(FilenameFilter.class);
        File file = (File) Mockingbird.getProxyObject(File.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, file, "getName", "()java.lang.String", new Object[] {}, "", 1);
        Mockingbird.setReturnValue(false, filenameFilter, "accept", "(java.io.File,java.lang.String)boolean", Boolean.TRUE, 1);
        Mockingbird.enterTestMode(FileUtil.class);
        boolean result = ((Boolean) callPrivateMethod("org.crap4j.util.FileUtil", "passesFilter", new Class[] {File.class, FilenameFilter.class, File.class}, null, new Object[] {null, filenameFilter, file})).booleanValue();
        assertTrue("result", result);
    }
    
    public void testReadFile() throws Throwable {
        Mockingbird.enterRecordingMode();
        Mockingbird.replaceObjectForRecording(FileReader.class, "<init>(java.lang.String)", Mockingbird.getProxyObject(FileReader.class));
        BufferedReader bufferedReader = (BufferedReader) Mockingbird.getProxyObject(BufferedReader.class);
        Mockingbird.replaceObjectForRecording(BufferedReader.class, "<init>(java.io.Reader)", bufferedReader);
        Mockingbird.setReturnValue(false, bufferedReader, "readLine", "()java.lang.String", new Object[] {}, "", 1);
        Mockingbird.setReturnValue(false, bufferedReader, "readLine", "()java.lang.String", new Object[] {}, "", 1);
        Mockingbird.setReturnValue(false, bufferedReader, "readLine", "()java.lang.String", new Object[] {}, null, 1);
        Mockingbird.setException(false, bufferedReader, "close", "()void", new Object[] {}, (Throwable) Mockingbird.getProxyObject(IOException.class), 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.enterTestMode(FileUtil.class);
        String result = FileUtil.readFile("");
        assertEquals("result", "", result);
    }
    
    public void testReadFile1() throws Throwable {
        Mockingbird.enterRecordingMode();
        Mockingbird.replaceObjectForRecording(FileReader.class, "<init>(java.lang.String)", Mockingbird.getProxyObject(FileReader.class));
        IOException iOException = (IOException) Mockingbird.getProxyObject(IOException.class);
        BufferedReader bufferedReader = (BufferedReader) Mockingbird.getProxyObject(BufferedReader.class);
        Mockingbird.replaceObjectForRecording(BufferedReader.class, "<init>(java.io.Reader)", bufferedReader);
        Mockingbird.setReturnValue(false, bufferedReader, "readLine", "()java.lang.String", new Object[] {}, "", 1);
        Mockingbird.setReturnValue(false, bufferedReader, "readLine", "()java.lang.String", new Object[] {}, "", 1);
        Mockingbird.setException(false, bufferedReader, "readLine", "()java.lang.String", new Object[] {}, iOException, 1);
        Mockingbird.setReturnValue(false, iOException, "printStackTrace", "()void", new Object[] {}, null, 1);
        Mockingbird.setException(false, bufferedReader, "close", "()void", new Object[] {}, (Throwable) Mockingbird.getProxyObject(IOException.class), 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.enterTestMode(FileUtil.class);
        String result = FileUtil.readFile("");
        assertEquals("result", "", result);
    }
    
    public void testReadFile2() throws Throwable {
        Mockingbird.enterRecordingMode();
        Mockingbird.replaceObjectForRecording(FileReader.class, "<init>(java.lang.String)", Mockingbird.getProxyObject(FileReader.class));
        IOException iOException = (IOException) Mockingbird.getProxyObject(IOException.class);
        BufferedReader bufferedReader = (BufferedReader) Mockingbird.getProxyObject(BufferedReader.class);
        Mockingbird.replaceObjectForRecording(BufferedReader.class, "<init>(java.io.Reader)", bufferedReader);
        Mockingbird.setReturnValue(false, bufferedReader, "readLine", "()java.lang.String", new Object[] {}, "", 1);
        Mockingbird.setReturnValue(false, bufferedReader, "readLine", "()java.lang.String", new Object[] {}, "", 1);
        Mockingbird.setException(false, bufferedReader, "readLine", "()java.lang.String", new Object[] {}, iOException, 1);
        Mockingbird.setReturnValue(false, iOException, "printStackTrace", "()void", new Object[] {}, null, 1);
        Mockingbird.setReturnValue(false, bufferedReader, "close", "()void", new Object[] {}, null, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.enterTestMode(FileUtil.class);
        String result = FileUtil.readFile("");
        assertEquals("result", "", result);
    }
    
    public void testReadFile3() throws Throwable {
        Mockingbird.enterRecordingMode();
        Mockingbird.replaceObjectForRecording(FileReader.class, "<init>(java.lang.String)", Mockingbird.getProxyObject(FileReader.class));
        BufferedReader bufferedReader = (BufferedReader) Mockingbird.getProxyObject(BufferedReader.class);
        Mockingbird.replaceObjectForRecording(BufferedReader.class, "<init>(java.io.Reader)", bufferedReader);
        Mockingbird.setReturnValue(false, bufferedReader, "readLine", "()java.lang.String", new Object[] {}, "", 1);
        Mockingbird.setReturnValue(false, bufferedReader, "readLine", "()java.lang.String", new Object[] {}, "", 1);
        Mockingbird.setReturnValue(false, bufferedReader, "readLine", "()java.lang.String", new Object[] {}, null, 1);
        Mockingbird.setReturnValue(false, bufferedReader, "close", "()void", new Object[] {}, null, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.enterTestMode(FileUtil.class);
        String result = FileUtil.readFile("");
        assertEquals("result", "", result);
    }
    
    public void testRemoveTestClassFiles() throws Throwable {
        List arrayList = new ArrayList(100);
        File file = new File("testFileUtilParam1");
        arrayList.add(file);
        ArrayList result = (ArrayList) FileUtil.removeTestClassFiles(arrayList);
        assertEquals("result.size()", 1, result.size());
        assertSame("(ArrayList) result.get(0)", file, result.get(0));
    }
    
    public void testRemoveTestClassFiles1() throws Throwable {
        List arrayList = new ArrayList(100);
        File file = new File("/home/agitar/work/sexy-dolphin-06-agitar-0/tmp/agitar-agitar/Agitator43884.dir/Agitator9.tmp");
        arrayList.add(file);
        ArrayList result = (ArrayList) FileUtil.removeTestClassFiles(arrayList);
        assertEquals("result.size()", 1, result.size());
        assertSame("(ArrayList) result.get(0)", file, result.get(0));
    }
    
    public void testRemoveTestClassFiles2() throws Throwable {
        List arrayList = new ArrayList(100);
        File file = new File("testFileUtilParam1");
        File file2 = new File("/home/agitar/work/sexy-dolphin-06-agitar-0/tmp/agitar-agitar/Agitator43884.dir/Agitator9.tmp");
        arrayList.add(file);
        arrayList.add(file2);
        ArrayList result = (ArrayList) FileUtil.removeTestClassFiles(arrayList);
        assertEquals("result.size()", 2, result.size());
        assertSame("(ArrayList) result.get(0)", file, result.get(0));
    }
    
    public void testRemoveTestClassFiles3() throws Throwable {
        ArrayList result = (ArrayList) FileUtil.removeTestClassFiles(new ArrayList(100));
        assertEquals("result.size()", 0, result.size());
    }
    
    public void testRemoveTestClassFiles4() throws Throwable {
        List list = (List) Mockingbird.getProxyObject(List.class);
        Mockingbird.enterRecordingMode();
        ArrayList arrayList = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        File file = (File) Mockingbird.getProxyObject(File.class);
        File file2 = (File) Mockingbird.getProxyObject(File.class);
        File file3 = (File) Mockingbird.getProxyObject(File.class);
        File file4 = (File) Mockingbird.getProxyObject(File.class);
        Mockingbird.setReturnValue(list.iterator(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), file);
        Mockingbird.setReturnValue(false, file, "getName", "()java.lang.String", new Object[] {}, "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "lastIndexOf", "(int)int", new Integer(0), 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "substring", "(int,int)java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "indexOf", "(java.lang.String)int", new Integer(0), 1);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), file2);
        Mockingbird.setReturnValue(false, file2, "getName", "()java.lang.String", new Object[] {}, "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "lastIndexOf", "(int)int", new Integer(0), 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "substring", "(int,int)java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "indexOf", "(java.lang.String)int", new Integer(0), 1);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), file3);
        Mockingbird.setReturnValue(false, file3, "getName", "()java.lang.String", new Object[] {}, "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "lastIndexOf", "(int)int", new Integer(0), 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "substring", "(int,int)java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "indexOf", "(java.lang.String)int", new Integer(-1), 1);
        Boolean boolean2 = Boolean.FALSE;
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "endsWith", "(java.lang.String)boolean", boolean2, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "startsWith", "(java.lang.String)boolean", boolean2, 1);
        Mockingbird.setReturnValue(arrayList.add(file3), false);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), file4);
        Mockingbird.setReturnValue(false, file4, "getName", "()java.lang.String", new Object[] {}, "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "lastIndexOf", "(int)int", new Integer(0), 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "substring", "(int,int)java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "indexOf", "(java.lang.String)int", new Integer(-1), 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "endsWith", "(java.lang.String)boolean", boolean2, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "startsWith", "(java.lang.String)boolean", boolean2, 1);
        Mockingbird.setReturnValue(arrayList.add(file4), false);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.enterTestMode(FileUtil.class);
        List result = FileUtil.removeTestClassFiles(list);
        assertNotNull("result", result);
    }
    
    public void testWriteFile() throws Throwable {
        File file = new File((File) Mockingbird.getProxyObject(File.class), "testFileUtilParam2");
        Mockingbird.enterRecordingMode();
        Mockingbird.setConstructorForException(FileWriter.class, "<init>(java.io.File)", (Throwable) Mockingbird.getProxyObject(FileNotFoundException.class));
        Mockingbird.enterTestMode(FileUtil.class);
        FileUtil.writeFile(file, "testFileUtilString");
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testWriteFile1() throws Throwable {
        File file = (File) Mockingbird.getProxyObject(File.class);
        Mockingbird.enterRecordingMode();
        callPrivateMethod("org.crap4j.util.FileUtil", "ensureNewFile", new Class[] {File.class}, null, new Object[] {file});
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.replaceObjectForRecording(FileWriter.class, "<init>(java.io.File)", Mockingbird.getProxyObject(FileWriter.class));
        BufferedWriter bufferedWriter = (BufferedWriter) Mockingbird.getProxyObject(BufferedWriter.class);
        Mockingbird.replaceObjectForRecording(BufferedWriter.class, "<init>(java.io.Writer)", bufferedWriter);
        Mockingbird.setReturnValue(false, bufferedWriter, "write", "(java.lang.String)void", new Object[] {"a$[(\\HSxh=g\ty\"\"9xc9K1U'go-~g\neY*Jz&9/M0K"}, null, 1);
        Mockingbird.setReturnValue(false, bufferedWriter, "close", "()void", new Object[] {}, null, 1);
        Mockingbird.enterTestMode(FileUtil.class);
        FileUtil.writeFile(file, "testFileUtilString");
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testWriteFile2() throws Throwable {
        File file = (File) Mockingbird.getProxyObject(File.class);
        Mockingbird.enterRecordingMode();
        callPrivateMethod("org.crap4j.util.FileUtil", "ensureNewFile", new Class[] {File.class}, null, new Object[] {file});
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.replaceObjectForRecording(FileWriter.class, "<init>(java.io.File)", Mockingbird.getProxyObject(FileWriter.class));
        BufferedWriter bufferedWriter = (BufferedWriter) Mockingbird.getProxyObject(BufferedWriter.class);
        Mockingbird.replaceObjectForRecording(BufferedWriter.class, "<init>(java.io.Writer)", bufferedWriter);
        Mockingbird.setReturnValue(false, bufferedWriter, "write", "(java.lang.String)void", new Object[] {""}, null, 1);
        Mockingbird.setReturnValue(false, bufferedWriter, "close", "()void", new Object[] {}, null, 1);
        Mockingbird.enterTestMode(FileUtil.class);
        FileUtil.writeFile(file, "testFileUtilString");
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testWriteFile3() throws Throwable {
        File file = (File) Mockingbird.getProxyObject(File.class);
        Mockingbird.enterRecordingMode();
        callPrivateMethod("org.crap4j.util.FileUtil", "ensureNewFile", new Class[] {File.class}, null, new Object[] {file});
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.replaceObjectForRecording(FileWriter.class, "<init>(java.io.File)", Mockingbird.getProxyObject(FileWriter.class));
        BufferedWriter bufferedWriter = (BufferedWriter) Mockingbird.getProxyObject(BufferedWriter.class);
        Mockingbird.replaceObjectForRecording(BufferedWriter.class, "<init>(java.io.Writer)", bufferedWriter);
        Mockingbird.setReturnValue(false, bufferedWriter, "write", "(java.lang.String)void", new Object[] {""}, null, 1);
        Mockingbird.setReturnValue(false, bufferedWriter, "close", "()void", new Object[] {}, null, 1);
        Mockingbird.enterTestMode(FileUtil.class);
        FileUtil.writeFile(file, "testFileUtilString");
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testWriteFile4() throws Throwable {
        IOException iOException = (IOException) Mockingbird.getProxyObject(IOException.class);
        Mockingbird.enterRecordingMode();
        File file = (File) Mockingbird.getProxyObject(File.class);
        Mockingbird.replaceObjectForRecording(File.class, "<init>(java.lang.String)", file);
        Mockingbird.setReturnValue(true, FileUtil.class, "ensureNewFile", "(java.io.File)void", new Object[] {file}, null, 1);
        Mockingbird.replaceObjectForRecording(FileWriter.class, "<init>(java.io.File)", Mockingbird.getProxyObject(FileWriter.class));
        BufferedWriter bufferedWriter = (BufferedWriter) Mockingbird.getProxyObject(BufferedWriter.class);
        Mockingbird.replaceObjectForRecording(BufferedWriter.class, "<init>(java.io.Writer)", bufferedWriter);
        Mockingbird.setReturnValue(false, bufferedWriter, "write", "(java.lang.String)void", null, 1);
        Mockingbird.setException(false, bufferedWriter, "close", "()void", new Object[] {}, iOException, 1);
        Mockingbird.enterTestMode(FileUtil.class);
        FileUtil.writeFile("", "");
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testWriteFile5() throws Throwable {
        File file = (File) Mockingbird.getProxyObject(File.class);
        IOException iOException = (IOException) Mockingbird.getProxyObject(IOException.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, file, "exists", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, file, "delete", "()boolean", new Object[] {}, Boolean.FALSE, 1);
        Mockingbird.replaceObjectForRecording(FileWriter.class, "<init>(java.io.File)", Mockingbird.getProxyObject(FileWriter.class));
        BufferedWriter bufferedWriter = (BufferedWriter) Mockingbird.getProxyObject(BufferedWriter.class);
        Mockingbird.replaceObjectForRecording(BufferedWriter.class, "<init>(java.io.Writer)", bufferedWriter);
        Mockingbird.setException(false, bufferedWriter, "write", "(java.lang.String)void", new Object[] {""}, iOException, 1);
        Mockingbird.setReturnValue(false, iOException, "printStackTrace", "()void", new Object[] {}, null, 1);
        Mockingbird.enterTestMode(FileUtil.class);
        FileUtil.writeFile(file, "");
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testCheckDirectoryThrowsIllegalArgumentException() throws Throwable {
        File file = new File("testFileUtilParam1");
        try {
            callPrivateMethod("org.crap4j.util.FileUtil", "checkDirectory", new Class[] {File.class}, null, new Object[] {file});
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertEquals("ex.getMessage()", new File("testFileUtilParam1").getAbsolutePath() + " is not a directory", ex.getMessage());
            assertThrownBy(FileUtil.class, ex);
            assertEquals("file.getName()", "testFileUtilParam1", file.getName());
        }
    }
    
    public void testCheckDirectoryThrowsNullPointerException() throws Throwable {
        try {
            callPrivateMethod("org.crap4j.util.FileUtil", "checkDirectory", new Class[] {File.class}, null, new Object[] {null});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(FileUtil.class, ex);
        }
    }
    
    public void testDeleteDirectoryThrowsNullPointerException() throws Throwable {
        File file = new File("testFileUtilParam1");
        try {
            callPrivateMethod("org.crap4j.util.FileUtil", "deleteDirectory", new Class[] {File.class}, null, new Object[] {file});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(FileUtil.class, ex);
            assertEquals("file.getName()", "testFileUtilParam1", file.getName());
        }
    }
    
    public void testEnsureCleanDirectoryThrowsNullPointerException() throws Throwable {
        try {
            FileUtil.ensureCleanDirectory(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(File.class, ex);
        }
    }
    
    public void testEnsureDirectoryThrowsNullPointerException() throws Throwable {
        try {
            FileUtil.ensureDirectory(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(File.class, ex);
        }
    }
    
    public void testEnsureNewFileThrowsNullPointerException() throws Throwable {
        try {
            callPrivateMethod("org.crap4j.util.FileUtil", "ensureNewFile", new Class[] {File.class}, null, new Object[] {null});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(FileUtil.class, ex);
        }
    }
    
    public void testEraseFileThrowsNullPointerException() throws Throwable {
        try {
            FileUtil.eraseFile(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(File.class, ex);
        }
    }
    
    public void testGetAllFilesInDirMatchingPatternThrowsIllegalArgumentException() throws Throwable {
        try {
            FileUtil.getAllFilesInDirMatchingPattern("testFileUtilParam1", "testFileUtilParam2", true);
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertEquals("ex.getMessage()", new File("testFileUtilParam1").getAbsolutePath() + " is not a directory", ex.getMessage());
            assertThrownBy(FileUtil.class, ex);
        }
    }
    
    public void testGetAllFilesInDirMatchingPatternThrowsNullPointerException() throws Throwable {
        try {
            FileUtil.getAllFilesInDirMatchingPattern(null, "testFileUtilParam2", true);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(File.class, ex);
        }
    }
    
    public void testGetAllFilesInDirMatchingPatternThrowsRuntimeException() throws Throwable {
        Mockingbird.enterRecordingMode();
        File file = (File) Mockingbird.getProxyObject(File.class);
        Mockingbird.replaceObjectForRecording(File.class, "<init>(java.lang.String)", file);
        Mockingbird.setReturnValue(false, file, "isDirectory", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.replaceObjectForRecording(Class.forName("org.crap4j.util.FileUtil$1"), "<init>(boolean,java.lang.String)", Mockingbird.getProxyObject(Class.forName("org.crap4j.util.FileUtil$1")));
        Mockingbird.setReturnValue(true, FileUtil.class, "checkDirectory", "(java.io.File)void", new Object[] {file}, null, 1);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", Mockingbird.getProxyObject(ArrayList.class));
        Mockingbird.setReturnValue(false, file, "listFiles", "()java.io.File[]", new Object[] {}, null, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.replaceObjectForRecording(RuntimeException.class, "<init>(java.lang.String,java.lang.Throwable)", Mockingbird.getProxyObject(RuntimeException.class));
        Mockingbird.enterTestMode(FileUtil.class);
        try {
            FileUtil.getAllFilesInDirMatchingPattern("", "", false);
            fail("Expected RuntimeException to be thrown");
        } catch (RuntimeException ex) {
            assertTrue("Test call resulted in expected outcome", true);
        }
    }
    
    public void testGetFileNameWithoutExtensionThrowsNullPointerException() throws Throwable {
        try {
            callPrivateMethod("org.crap4j.util.FileUtil", "getFileNameWithoutExtension", new Class[] {File.class}, null, new Object[] {null});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(FileUtil.class, ex);
        }
    }
    
    public void testHasTestClassFilesThrowsNullPointerException() throws Throwable {
        List files = new ArrayList(100);
        File file = new File("/home/agitar/work/sexy-dolphin-06-agitar-0/tmp/agitar-agitar/Agitator43884.dir/Agitator9.tmp");
        files.add(new File("testFileUtilParam1"));
        files.add(file);
        files.add(null);
        try {
            FileUtil.hasTestClassFiles(files);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(FileUtil.class, ex);
            assertEquals("(ArrayList) files.size()", 3, files.size());
        }
    }
    
    public void testHasTestClassFilesThrowsNullPointerException1() throws Throwable {
        List arrayList = new ArrayList(100);
        arrayList.add(new File("testFileUtilParam1"));
        arrayList.add(null);
        try {
            FileUtil.hasTestClassFiles(arrayList);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(FileUtil.class, ex);
        }
    }
    
    public void testHasTestClassFilesThrowsNullPointerException2() throws Throwable {
        List arrayList = new ArrayList(100);
        arrayList.add(new File(new File("testFileUtilParam1"), "Agitator37.tmp"));
        arrayList.add(null);
        try {
            FileUtil.hasTestClassFiles(arrayList);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(FileUtil.class, ex);
        }
    }
    
    public void testHasTestClassFilesThrowsNullPointerException3() throws Throwable {
        try {
            FileUtil.hasTestClassFiles(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(FileUtil.class, ex);
        }
    }
    
    public void testHasTestClassFilesThrowsNullPointerException4() throws Throwable {
        List files = new ArrayList(100);
        files.add(null);
        Mockingbird.enterRecordingMode();
        Object fileNameWithoutExtension = callPrivateMethod("org.crap4j.util.FileUtil", "getFileNameWithoutExtension", new Class[] {File.class}, null, new Object[] {null});
        Mockingbird.setException(fileNameWithoutExtension, (Throwable) Mockingbird.getProxyObject(NullPointerException.class));
        Mockingbird.enterTestMode(FileUtil.class);
        try {
            FileUtil.hasTestClassFiles(files);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertEquals("(ArrayList) files.size()", 1, files.size());
        }
    }
    
    public void testHasTestClassFilesThrowsNullPointerException5() throws Throwable {
        ArrayList files = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.enterRecordingMode();
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.setReturnValue(false, files, "iterator", "()java.util.Iterator", new Object[] {}, iterator, 1);
        Mockingbird.setReturnValue(false, iterator, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator, "next", "()java.lang.Object", new Object[] {}, null, 1);
        Mockingbird.enterTestMode(FileUtil.class);
        try {
            FileUtil.hasTestClassFiles(files);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(FileUtil.class, ex);
            assertEquals("files.size()", 0, files.size());
        }
    }
    
    public void testIsTestFileThrowsNullPointerException() throws Throwable {
        try {
            callPrivateMethod("org.crap4j.util.FileUtil", "isTestFile", new Class[] {String.class}, null, new Object[] {null});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(FileUtil.class, ex);
        }
    }
    
    public void testJoinPathThrowsNullPointerException() throws Throwable {
        try {
            FileUtil.joinPath("testFileUtilParam1", null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(File.class, ex);
        }
    }
    
    public void testListFilesThrowsIllegalArgumentException() throws Throwable {
        File file = new File("testFileUtilParam1");
        Mockingbird.enterRecordingMode();
        callPrivateMethod("org.crap4j.util.FileUtil", "checkDirectory", new Class[] {File.class}, null, new Object[] {file});
        Mockingbird.setExceptionForVoid((Throwable) Mockingbird.getProxyObject(IllegalArgumentException.class));
        Mockingbird.enterTestMode(FileUtil.class);
        try {
            callPrivateMethod("org.crap4j.util.FileUtil", "listFiles", new Class[] {File.class, FilenameFilter.class}, null, new Object[] {file, null});
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertEquals("file.getName()", "testFileUtilParam1", file.getName());
        }
    }
    
    public void testListFilesThrowsIllegalArgumentException1() throws Throwable {
        File file = (File) Mockingbird.getProxyObject(File.class);
        Mockingbird.enterRecordingMode();
        callPrivateMethod("org.crap4j.util.FileUtil", "checkDirectory", new Class[] {File.class}, null, new Object[] {file});
        Mockingbird.setExceptionForVoid((Throwable) Mockingbird.getProxyObject(IllegalArgumentException.class));
        Mockingbird.enterTestMode(FileUtil.class);
        try {
            callPrivateMethod("org.crap4j.util.FileUtil", "listFiles", new Class[] {File.class, FilenameFilter.class}, null, new Object[] {file, null});
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertEquals("file.getPath()", "", file.getPath());
        }
    }
    
    public void testMakeRelativePathsThrowsNullPointerException() throws Throwable {
        List arrayList = new ArrayList(100);
        arrayList.add(null);
        try {
            FileUtil.makeRelativePaths("testFileUtilParam1", arrayList);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(FileUtil.class, ex);
        }
    }
    
    public void testMakeRelativePathsThrowsNullPointerException1() throws Throwable {
        List arrayList = new ArrayList(100);
        arrayList.add(new File("testFileUtilParam1"));
        try {
            FileUtil.makeRelativePaths(null, arrayList);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(FileUtil.class, ex);
        }
    }
    
    public void testMakeRelativePathsThrowsNullPointerException2() throws Throwable {
        try {
            FileUtil.makeRelativePaths("testFileUtilParam1", null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(FileUtil.class, ex);
        }
    }
    
    public void testMakeRelativePathsThrowsStringIndexOutOfBoundsException() throws Throwable {
        List arrayList = new ArrayList(100);
        arrayList.add(new File(""));
        try {
            FileUtil.makeRelativePaths("testFileUtilParam1", arrayList);
            fail("Expected StringIndexOutOfBoundsException to be thrown");
        } catch (StringIndexOutOfBoundsException ex) {
            assertEquals("ex.getMessage()", "String index out of range: -19", ex.getMessage());
            assertThrownBy(String.class, ex);
        }
    }
    
    public void testReadFileThrowsNullPointerException() throws Throwable {
        try {
            FileUtil.readFile("testFileUtilParam1");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(FileUtil.class, ex);
        }
    }
    
    public void testRemoveTestClassFilesThrowsNullPointerException() throws Throwable {
        List arrayList = new ArrayList(100);
        arrayList.add(new File("testFileUtilParam1"));
        arrayList.add(null);
        try {
            FileUtil.removeTestClassFiles(arrayList);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(FileUtil.class, ex);
        }
    }
    
    public void testRemoveTestClassFilesThrowsNullPointerException1() throws Throwable {
        List arrayList = new ArrayList(100);
        File file = new File("/home/agitar/work/sexy-dolphin-06-agitar-0/tmp/agitar-agitar/Agitator43884.dir/Agitator9.tmp");
        arrayList.add(new File("testFileUtilParam1"));
        arrayList.add(file);
        arrayList.add(null);
        try {
            FileUtil.removeTestClassFiles(arrayList);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(FileUtil.class, ex);
        }
    }
    
    public void testRemoveTestClassFilesThrowsNullPointerException2() throws Throwable {
        List arrayList = new ArrayList(100);
        File file = new File("/home/agitar/work/sexy-dolphin-06-agitar-0/tmp/agitar-agitar/Agitator43884.dir/Agitator9.tmp");
        arrayList.add(file);
        arrayList.add(null);
        try {
            FileUtil.removeTestClassFiles(arrayList);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(FileUtil.class, ex);
        }
    }
    
    public void testRemoveTestClassFilesThrowsNullPointerException3() throws Throwable {
        List files = new ArrayList(100);
        files.add(null);
        Mockingbird.enterRecordingMode();
        Object fileNameWithoutExtension = callPrivateMethod("org.crap4j.util.FileUtil", "getFileNameWithoutExtension", new Class[] {File.class}, null, new Object[] {null});
        Mockingbird.setException(fileNameWithoutExtension, (Throwable) Mockingbird.getProxyObject(NullPointerException.class));
        Mockingbird.enterTestMode(FileUtil.class);
        try {
            FileUtil.removeTestClassFiles(files);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertEquals("(ArrayList) files.size()", 1, files.size());
        }
    }
    
    public void testRemoveTestClassFilesThrowsNullPointerException4() throws Throwable {
        try {
            FileUtil.removeTestClassFiles(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(FileUtil.class, ex);
        }
    }
    
    public void testRemoveTestClassFilesThrowsNullPointerException5() throws Throwable {
        ArrayList files = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.enterRecordingMode();
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.setReturnValue(false, files, "iterator", "()java.util.Iterator", new Object[] {}, iterator, 1);
        Mockingbird.setReturnValue(false, iterator, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator, "next", "()java.lang.Object", new Object[] {}, null, 1);
        Mockingbird.enterTestMode(FileUtil.class);
        try {
            FileUtil.removeTestClassFiles(files);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(FileUtil.class, ex);
            assertEquals("files.size()", 0, files.size());
        }
    }
    
    public void testWriteFileThrowsNullPointerException() throws Throwable {
        File file = (File) Mockingbird.getProxyObject(File.class);
        Mockingbird.enterRecordingMode();
        callPrivateMethod("org.crap4j.util.FileUtil", "ensureNewFile", new Class[] {File.class}, null, new Object[] {file});
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.replaceObjectForRecording(FileWriter.class, "<init>(java.io.File)", Mockingbird.getProxyObject(FileWriter.class));
        BufferedWriter bufferedWriter = (BufferedWriter) Mockingbird.getProxyObject(BufferedWriter.class);
        Mockingbird.replaceObjectForRecording(BufferedWriter.class, "<init>(java.io.Writer)", bufferedWriter);
        Mockingbird.setException(false, bufferedWriter, "write", "(java.lang.String)void", new Object[] {null}, (Throwable) Mockingbird.getProxyObject(NullPointerException.class), 1);
        Mockingbird.setReturnValue(false, bufferedWriter, "close", "()void", new Object[] {}, null, 1);
        Mockingbird.enterTestMode(FileUtil.class);
        try {
            FileUtil.writeFile(file, "");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertTrue("Test call resulted in expected outcome", true);
        }
    }
    
    public void testWriteFileThrowsNullPointerException1() throws Throwable {
        try {
            FileUtil.writeFile((File) null, "testFileUtilParam2");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(FileUtil.class, ex);
        }
    }
    
    public void testWriteFileThrowsNullPointerException2() throws Throwable {
        File file = (File) Mockingbird.getProxyObject(File.class);
        Mockingbird.enterRecordingMode();
        callPrivateMethod("org.crap4j.util.FileUtil", "ensureNewFile", new Class[] {File.class}, null, new Object[] {file});
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.replaceObjectForRecording(FileWriter.class, "<init>(java.io.File)", Mockingbird.getProxyObject(FileWriter.class));
        BufferedWriter bufferedWriter = (BufferedWriter) Mockingbird.getProxyObject(BufferedWriter.class);
        Mockingbird.replaceObjectForRecording(BufferedWriter.class, "<init>(java.io.Writer)", bufferedWriter);
        Mockingbird.setException(false, bufferedWriter, "write", "(java.lang.String)void", new Object[] {null}, (Throwable) Mockingbird.getProxyObject(NullPointerException.class), 1);
        Mockingbird.setReturnValue(false, bufferedWriter, "close", "()void", new Object[] {}, null, 1);
        Mockingbird.enterTestMode(FileUtil.class);
        try {
            FileUtil.writeFile(file, "");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertTrue("Test call resulted in expected outcome", true);
        }
    }
    
    public void testWriteFileThrowsNullPointerException3() throws Throwable {
        try {
            FileUtil.writeFile((String) null, "testFileUtilParam2");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(File.class, ex);
        }
    }
}

