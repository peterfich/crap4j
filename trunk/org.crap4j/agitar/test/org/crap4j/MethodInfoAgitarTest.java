/**
 * Generated by Agitar build: JUnitFactory Version 2.1.0.000576 (Build date: Oct 19, 2007) [2.1.0.000576]
 * JDK Version: 1.5.0_11
 *
 * Generated on Oct 26, 2007 3:59:40 PM
 * Time to generate: 00:14.892 seconds
 *
 */

package org.crap4j;

import com.agitar.lib.junit.AgitarTestCase;

public class MethodInfoAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return MethodInfo.class;
    }
    
    public void testCompareTo() throws Throwable {
        MethodInfo o = new MethodComplexity("testMethodInfoMethodSignature", "testMethodInfoPkgclassName", "testMethodInfoMethodName", "testMethodInfoMethodDescriptor", "testMethodInfoJava5Signature", 100, "testMethodInfoPrettyMethodSignature");
        int result = o.compareTo(o);
        assertEquals("result", 0, result);
    }
    
    public void testCompareTo1() throws Throwable {
        MethodComplexity o = new MethodComplexity("testMethodInfoMethodSignature", "testMethodInfoPkgclassName", "testMethodInfoMethodName", "testMethodInfoMethodDescriptor", "testMethodInfoJava5Signature", 100, "testMethodInfoPrettyMethodSignature");
        MethodInfo methodComplexity = new MethodComplexity("testMethodInfoMethodSignature1", "testMethodInfoPkgclassName1", "testMethodInfoMethodName1", "testMethodInfoMethodDescriptor1", "testMethodInfoJava5Signature1", 1000, "testMethodInfoPrettyMethodSignature1");
        int result = methodComplexity.compareTo(o);
        assertEquals("result", 3, result);
    }
    
    public void testGetMatchingMethodSignature() throws Throwable {
        MethodComplexity complexity2 = new MethodComplexity("testMethodInfoMethodSignature", "testMethodInfoPkgclassName", "testMethodInfoMethodName", "testMethodInfoMethodDescriptor", "testMethodInfoJava5Signature", 100, "testMethodInfoPrettyMethodSignature");
        String result = new MethodCrap(null, 0.0F, complexity2).getMatchingMethodSignature();
        assertNull("result", result);
    }
    
    public void testGetMatchingMethodSignature1() throws Throwable {
        String result = new MethodCoverage("testMethodInfoMethodSignature", 100.0F).getMatchingMethodSignature();
        assertEquals("result", "testMethodInfoMethodSignature", result);
    }
    
    public void testCompareToThrowsClassCastException() throws Throwable {
        MethodComplexity complexity2 = new MethodComplexity("testMethodInfoMethodSignature", "testMethodInfoPkgclassName", "testMethodInfoMethodName", "testMethodInfoMethodDescriptor", "testMethodInfoJava5Signature", 100, "testMethodInfoPrettyMethodSignature");
        try {
            new MethodCrap("testMethodInfoMethodSignature", 0.0F, complexity2).compareTo(new Float(0.0F));
            fail("Expected ClassCastException to be thrown");
        } catch (ClassCastException ex) {
            assertEquals("ex.getClass()", ClassCastException.class, ex.getClass());
            assertThrownBy(MethodInfo.class, ex);
        }
    }
    
    public void testCompareToThrowsNullPointerException() throws Throwable {
        MethodComplexity complexity2 = new MethodComplexity("testMethodInfoMethodSignature", "testMethodInfoPkgclassName", "testMethodInfoMethodName", "testMethodInfoMethodDescriptor", "testMethodInfoJava5Signature", 100, "testMethodInfoPrettyMethodSignature");
        try {
            new MethodCrap("testMethodInfoMethodSignature", 0.0F, complexity2).compareTo(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(MethodInfo.class, ex);
        }
    }
}

