/**
 * Generated by Agitar build: JUnitFactory Version 2.1.0.000576 (Build date: Oct 19, 2007) [2.1.0.000576]
 * JDK Version: 1.5.0_11
 *
 * Generated on Nov 1, 2007 12:02:29 AM
 * Time to generate: 00:27.815 seconds
 *
 */

package org.crap4j;

import com.agitar.lib.junit.AgitarTestCase;
import com.agitar.lib.mockingbird.Mockingbird;
import com.agitar.lib.mockingbird.MockingbirdSystem;
import java.io.IOException;
import java.io.PrintStream;
import java.net.URL;
import org.kohsuke.args4j.CmdLineException;
import org.kohsuke.args4j.CmdLineParser;

public class MainAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return Main.class;
    }
    
    public void testConstructor() throws Throwable {
        Main main = (Main) callPrivateMethod("org.crap4j.Main", "<init>", new Class[] {String.class, String.class, String.class, String.class, String.class}, null, new Object[] {"testMainCrap4jHome", "testMainAgitatorEclipseApiPlugin", "testMainAgitatorEclipseCoveragePluginDir", "testMainJunitLib", "testMainAntHome"});
        assertEquals("main.antHome", "testMainAntHome", main.antHome);
        assertEquals("main.agitatorEclipseCoveragePluginDir", "testMainAgitatorEclipseCoveragePluginDir", main.agitatorEclipseCoveragePluginDir);
        assertEquals("main.agitatorEclipseApiPluginDir", "testMainAgitatorEclipseApiPlugin", main.agitatorEclipseApiPluginDir);
        assertEquals("main.junitLib", "testMainJunitLib", main.junitLib);
        assertEquals("main.crap4jHome", "testMainCrap4jHome", main.crap4jHome);
    }
    
    public void testCreateMain() throws Throwable {
        Main result = Main.createMain();
        assertNotNull("result", result);
    }
    
    public void testCreateMain1() throws Throwable {
        Main result = Main.createMain("testMainParam1", "testMainParam2", "testMainParam3", "testMainParam4", "testMainParam5");
        assertNotNull("result", result);
    }
    
    public void testCreateMain2() throws Throwable {
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(true, System.class, "getProperty", "(java.lang.String)java.lang.String", new Object[] {"CRAP4J_HOME"}, "", 1);
        Boolean boolean2 = Boolean.TRUE;
        Mockingbird.setReturnValue(true, Main.class, "isBlank", "(java.lang.String)boolean", boolean2, 1);
        Mockingbird.setReturnValue(true, Main.class, "getCrap4jHomeFromClass", "()java.lang.String", new Object[] {}, "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "replace", "(char,char)java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "replace", "(java.lang.CharSequence,java.lang.CharSequence)java.lang.String", "", 1);
        Mockingbird.setReturnValue(true, Main.class, "isAbsoluteWindowsPath", "(java.lang.String)boolean", boolean2, 1);
        Mockingbird.setReturnValue(true, Main.class, "removeDriveLetter", "(java.lang.String)java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(true, System.class, "getProperty", "(java.lang.String,java.lang.String)java.lang.String", "", 1);
        Mockingbird.replaceObjectForRecording(Main.class, "<init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)", Mockingbird.getProxyObject(Main.class, true));
        Mockingbird.enterTestMode(Main.class);
        Main result = Main.createMain();
        assertNotNull("result", result);
    }
    
    public void testGetAgitatorEclipseApiPlugin() throws Throwable {
        String result = Main.getAgitatorEclipseApiPlugin("testMainParam1");
        assertEquals("result", "testMainParam1/lib/com.agitar.eclipse.api_4.2.0.401405", result);
    }
    
    public void testGetAgitatorEclipseCoveragePluginDir() throws Throwable {
        String result = Main.getAgitatorEclipseCoveragePluginDir("testMainParam1");
        assertEquals("result", "testMainParam1/lib/com.agitar.eclipse.coverage_4.2.0.401405", result);
    }
    
    public void testGetAntHome() throws Throwable {
        String result = Main.getAntHome(null);
        assertNull("result", result);
    }
    
    public void testGetAntHome1() throws Throwable {
        String result = Main.getAntHome("testMainParam1");
        assertEquals("result", "testMainParam1", result);
    }
    
    public void testGetCrap4jHome() throws Throwable {
        String result = Main.getCrap4jHome();
        assertEquals("result", System.getProperty("user.dir"), result);
    }
    
    public void testGetCrap4jHome1() throws Throwable {
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(true, System.class, "getProperty", "(java.lang.String)java.lang.String", new Object[] {"CRAP4J_HOME"}, null, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(URL.class), "getPath", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "lastIndexOf", "(java.lang.String)int", new Integer(0), 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "substring", "(int,int)java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "replace", "(char,char)java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "replace", "(java.lang.CharSequence,java.lang.CharSequence)java.lang.String", ":", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "startsWith", "(java.lang.String)boolean", Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(String.class), "substring", "(int)java.lang.String", "", 1);
        Mockingbird.enterTestMode(Main.class);
        String result = Main.getCrap4jHome();
        assertEquals("result", "", result);
    }
    
    public void testGetCrap4jHome2() throws Throwable {
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(true, System.class, "getProperty", "(java.lang.String)java.lang.String", new Object[] {"CRAP4J_HOME"}, "X", 1);
        Mockingbird.enterTestMode(Main.class);
        String result = Main.getCrap4jHome();
        assertEquals("result", "X", result);
    }
    
    public void testGetCrap4jHomeFromClass() throws Throwable {
        String result = (String) callPrivateMethod("org.crap4j.Main", "getCrap4jHomeFromClass", new Class[] {}, null, new Object[] {});
        assertEquals("result", System.getProperty("user.dir"), result);
    }
    
    public void testGetJunitLib() throws Throwable {
        String result = Main.getJunitLib("testMainParam1");
        assertEquals("result", "testMainParam1/lib/junit.jar", result);
    }
    
    public void testIsAbsoluteWindowsPath() throws Throwable {
        boolean result = ((Boolean) callPrivateMethod("org.crap4j.Main", "isAbsoluteWindowsPath", new Class[] {String.class}, null, new Object[] {":"})).booleanValue();
        assertFalse("result", result);
    }
    
    public void testIsAbsoluteWindowsPath1() throws Throwable {
        boolean result = ((Boolean) callPrivateMethod("org.crap4j.Main", "isAbsoluteWindowsPath", new Class[] {String.class}, null, new Object[] {"testMainCrap4jHome"})).booleanValue();
        assertFalse("result", result);
    }
    
    public void testIsAbsoluteWindowsPath2() throws Throwable {
        boolean result = ((Boolean) callPrivateMethod("org.crap4j.Main", "isAbsoluteWindowsPath", new Class[] {String.class}, null, new Object[] {"\\:\u8E21"})).booleanValue();
        assertTrue("result", result);
    }
    
    public void testIsBlank() throws Throwable {
        boolean result = ((Boolean) callPrivateMethod("org.crap4j.Main", "isBlank", new Class[] {String.class}, null, new Object[] {"testMainCrap4jHome"})).booleanValue();
        assertFalse("result", result);
    }
    
    public void testIsBlank1() throws Throwable {
        boolean result = ((Boolean) callPrivateMethod("org.crap4j.Main", "isBlank", new Class[] {String.class}, null, new Object[] {""})).booleanValue();
        assertTrue("result", result);
    }
    
    public void testIsBlank2() throws Throwable {
        boolean result = ((Boolean) callPrivateMethod("org.crap4j.Main", "isBlank", new Class[] {String.class}, null, new Object[] {null})).booleanValue();
        assertTrue("result", result);
    }
    
    public void testMainWithAggressiveMocks() throws Throwable {
        String[] strings = new String[0];
        Mockingbird.enterRecordingMode();
        Options options = new Options();
        Mockingbird.replaceObjectForRecording(Options.class, "<init>()", options);
        CmdLineException cmdLineException = (CmdLineException) Mockingbird.getProxyObject(CmdLineException.class);
        Main main = (Main) Mockingbird.getProxyObject(Main.class, true);
        IOException iOException = (IOException) Mockingbird.getProxyObject(IOException.class);
        PrintStream printStream = (PrintStream) Mockingbird.getProxyObject(PrintStream.class);
        MockingbirdSystem.err = printStream;
        Mockingbird.enterNormalMode();
        options.setProjectDir("");
        options.setOutputDir("");
        options.setDebug(false);
        options.setDontTest(false);
        Mockingbird.enterRecordingMode();
        CmdLineParser cmdLineParser = (CmdLineParser) Mockingbird.getProxyObject(CmdLineParser.class);
        Mockingbird.replaceObjectForRecording(CmdLineParser.class, "<init>(java.lang.Object)", cmdLineParser);
        cmdLineParser.parseArgument(strings);
        Mockingbird.setExceptionForVoid(cmdLineException);
        Mockingbird.setReturnValue(cmdLineException.getMessage(), "");
        Mockingbird.setReturnValue(false, printStream, "println", "(java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(true, Main.class, "printUsage", "(org.kohsuke.args4j.CmdLineParser)void", new Object[] {cmdLineParser}, null, 1);
        Mockingbird.setReturnValue(options.valid(), true);
        Mockingbird.setReturnValue(options.valid(), true);
        Mockingbird.setReturnValue(options.getLibClasspaths(), null);
        Mockingbird.setReturnValue(options.getTestClassDirs(), null);
        Mockingbird.setReturnValue(options.getClassDirs(), null);
        Mockingbird.setReturnValue(options.getSourceDirs(), null);
        CrapProject crapProject = (CrapProject) Mockingbird.getProxyObject(CrapProject.class);
        Mockingbird.replaceObjectForRecording(CrapProject.class, "<init>(java.lang.String,java.util.List,java.util.List,java.util.List,java.util.List,java.lang.String)", crapProject);
        Mockingbird.setReturnValue(Main.getCrap4jHome(), "");
        Mockingbird.setReturnValue(true, Main.class, "getAgitatorEclipseApiPlugin", "(java.lang.String)java.lang.String", "", 1);
        Mockingbird.setReturnValue(true, Main.class, "getAgitatorEclipseCoveragePluginDir", "(java.lang.String)java.lang.String", "", 1);
        Mockingbird.setReturnValue(true, Main.class, "getJunitLib", "(java.lang.String)java.lang.String", "", 1);
        Mockingbird.setReturnValue(true, Main.class, "getAntHome", "(java.lang.String)java.lang.String", "", 1);
        Mockingbird.setReturnValue(true, Main.class, "createMain", "(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)org.crap4j.Main", main, 1);
        main.run(crapProject, false, false);
        Mockingbird.setExceptionForVoid(iOException);
        Mockingbird.setReturnValue(false, iOException, "printStackTrace", "()void", new Object[] {}, null, 1);
        Mockingbird.enterTestMode(Main.class);
        Main.main(strings);
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testMainWithAggressiveMocks1() throws Throwable {
        String[] strings = new String[0];
        Mockingbird.enterRecordingMode();
        Options options = new Options();
        Mockingbird.replaceObjectForRecording(Options.class, "<init>()", options);
        Main main = (Main) Mockingbird.getProxyObject(Main.class, true);
        IOException iOException = (IOException) Mockingbird.getProxyObject(IOException.class);
        Mockingbird.enterNormalMode();
        options.setProjectDir("");
        options.setOutputDir("");
        options.setDebug(false);
        options.setDontTest(false);
        Mockingbird.enterRecordingMode();
        CmdLineParser cmdLineParser = (CmdLineParser) Mockingbird.getProxyObject(CmdLineParser.class);
        Mockingbird.replaceObjectForRecording(CmdLineParser.class, "<init>(java.lang.Object)", cmdLineParser);
        cmdLineParser.parseArgument(strings);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(options.valid(), false);
        Mockingbird.setReturnValue(true, Main.class, "printUsage", "(org.kohsuke.args4j.CmdLineParser)void", new Object[] {cmdLineParser}, null, 1);
        Mockingbird.setReturnValue(options.valid(), false);
        Mockingbird.setReturnValue(true, System.class, "exit", "(int)void", new Object[] {new Integer(1)}, null, 1);
        Mockingbird.setReturnValue(options.getLibClasspaths(), null);
        Mockingbird.setReturnValue(options.getTestClassDirs(), null);
        Mockingbird.setReturnValue(options.getClassDirs(), null);
        Mockingbird.setReturnValue(options.getSourceDirs(), null);
        CrapProject crapProject = (CrapProject) Mockingbird.getProxyObject(CrapProject.class);
        Mockingbird.replaceObjectForRecording(CrapProject.class, "<init>(java.lang.String,java.util.List,java.util.List,java.util.List,java.util.List,java.lang.String)", crapProject);
        Mockingbird.setReturnValue(Main.getCrap4jHome(), "");
        Mockingbird.setReturnValue(true, Main.class, "getAgitatorEclipseApiPlugin", "(java.lang.String)java.lang.String", "", 1);
        Mockingbird.setReturnValue(true, Main.class, "getAgitatorEclipseCoveragePluginDir", "(java.lang.String)java.lang.String", "", 1);
        Mockingbird.setReturnValue(true, Main.class, "getJunitLib", "(java.lang.String)java.lang.String", "", 1);
        Mockingbird.setReturnValue(true, Main.class, "getAntHome", "(java.lang.String)java.lang.String", "", 1);
        Mockingbird.setReturnValue(true, Main.class, "createMain", "(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)org.crap4j.Main", main, 1);
        main.run(crapProject, false, false);
        Mockingbird.setExceptionForVoid(iOException);
        Mockingbird.setReturnValue(false, iOException, "printStackTrace", "()void", new Object[] {}, null, 1);
        Mockingbird.enterTestMode(Main.class);
        Main.main(strings);
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testMainWithAggressiveMocks2() throws Throwable {
        String[] strings = new String[0];
        Mockingbird.enterRecordingMode();
        Options options = new Options();
        Mockingbird.replaceObjectForRecording(Options.class, "<init>()", options);
        CmdLineException cmdLineException = (CmdLineException) Mockingbird.getProxyObject(CmdLineException.class);
        Main main = (Main) Mockingbird.getProxyObject(Main.class, true);
        PrintStream printStream = (PrintStream) Mockingbird.getProxyObject(PrintStream.class);
        MockingbirdSystem.err = printStream;
        Mockingbird.enterNormalMode();
        options.setProjectDir("");
        options.setOutputDir("");
        options.setDebug(false);
        options.setDontTest(false);
        Mockingbird.enterRecordingMode();
        CmdLineParser cmdLineParser = (CmdLineParser) Mockingbird.getProxyObject(CmdLineParser.class);
        Mockingbird.replaceObjectForRecording(CmdLineParser.class, "<init>(java.lang.Object)", cmdLineParser);
        cmdLineParser.parseArgument(strings);
        Mockingbird.setExceptionForVoid(cmdLineException);
        Mockingbird.setReturnValue(cmdLineException.getMessage(), "");
        Mockingbird.setReturnValue(false, printStream, "println", "(java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(true, Main.class, "printUsage", "(org.kohsuke.args4j.CmdLineParser)void", new Object[] {cmdLineParser}, null, 1);
        Mockingbird.setReturnValue(options.valid(), false);
        Mockingbird.setReturnValue(true, Main.class, "printUsage", "(org.kohsuke.args4j.CmdLineParser)void", new Object[] {cmdLineParser}, null, 1);
        Mockingbird.setReturnValue(options.valid(), false);
        Mockingbird.setReturnValue(true, System.class, "exit", "(int)void", new Object[] {new Integer(1)}, null, 1);
        Mockingbird.setReturnValue(options.getLibClasspaths(), null);
        Mockingbird.setReturnValue(options.getTestClassDirs(), null);
        Mockingbird.setReturnValue(options.getClassDirs(), null);
        Mockingbird.setReturnValue(options.getSourceDirs(), null);
        CrapProject crapProject = (CrapProject) Mockingbird.getProxyObject(CrapProject.class);
        Mockingbird.replaceObjectForRecording(CrapProject.class, "<init>(java.lang.String,java.util.List,java.util.List,java.util.List,java.util.List,java.lang.String)", crapProject);
        Mockingbird.setReturnValue(Main.getCrap4jHome(), "");
        Mockingbird.setReturnValue(true, Main.class, "getAgitatorEclipseApiPlugin", "(java.lang.String)java.lang.String", "", 1);
        Mockingbird.setReturnValue(true, Main.class, "getAgitatorEclipseCoveragePluginDir", "(java.lang.String)java.lang.String", "", 1);
        Mockingbird.setReturnValue(true, Main.class, "getJunitLib", "(java.lang.String)java.lang.String", "", 1);
        Mockingbird.setReturnValue(true, Main.class, "getAntHome", "(java.lang.String)java.lang.String", "", 1);
        Mockingbird.setReturnValue(true, Main.class, "createMain", "(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)org.crap4j.Main", main, 1);
        main.run(crapProject, false, false);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(Main.class);
        Main.main(strings);
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testParseArgs() throws Throwable {
        String[] strings = new String[2];
        strings[0] = "testString";
        Options result = Main.parseArgs(strings);
        assertFalse("result.valid()", result.valid());
    }
    
    public void testParseArgs1() throws Throwable {
        String[] strings = new String[0];
        Options result = Main.parseArgs(strings);
        assertFalse("result.valid()", result.valid());
    }
    
    public void testPrintUsage() throws Throwable {
        CmdLineParser cmdLineParser = new CmdLineParser("");
        callPrivateMethod("org.crap4j.Main", "printUsage", new Class[] {CmdLineParser.class}, null, new Object[] {cmdLineParser});
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testRemoveDriveLetter() throws Throwable {
        String result = (String) callPrivateMethod("org.crap4j.Main", "removeDriveLetter", new Class[] {String.class}, null, new Object[] {"testMainCrap4jHome"});
        assertEquals("result", "estMainCrap4jHome", result);
    }
    
    public void testRun() throws Throwable {
        Main main = Main.createMain("testMainParam1", "testMainParam2", "testMainParam3", "testMainParam4", "testMainParam5");
        main.run(null, true, true);
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testIsAbsoluteWindowsPathThrowsNullPointerException() throws Throwable {
        try {
            callPrivateMethod("org.crap4j.Main", "isAbsoluteWindowsPath", new Class[] {String.class}, null, new Object[] {null});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(Main.class, ex);
        }
    }
    
    public void testMainThrowsNullPointerException() throws Throwable {
        String[] args = new String[3];
        try {
            Main.main(args);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(CmdLineParser.class, ex);
        }
    }
    
    public void testParseArgsThrowsNullPointerException() throws Throwable {
        String[] strings = new String[1];
        try {
            Main.parseArgs(strings);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(CmdLineParser.class, ex);
        }
    }
    
    public void testPrintUsageThrowsNullPointerException() throws Throwable {
        try {
            callPrivateMethod("org.crap4j.Main", "printUsage", new Class[] {CmdLineParser.class}, null, new Object[] {null});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(Main.class, ex);
        }
    }
    
    public void testRemoveDriveLetterThrowsNullPointerException() throws Throwable {
        try {
            callPrivateMethod("org.crap4j.Main", "removeDriveLetter", new Class[] {String.class}, null, new Object[] {null});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(Main.class, ex);
        }
    }
    
    public void testRemoveDriveLetterThrowsStringIndexOutOfBoundsException() throws Throwable {
        try {
            callPrivateMethod("org.crap4j.Main", "removeDriveLetter", new Class[] {String.class}, null, new Object[] {""});
            fail("Expected StringIndexOutOfBoundsException to be thrown");
        } catch (StringIndexOutOfBoundsException ex) {
            assertEquals("ex.getMessage()", "String index out of range: -1", ex.getMessage());
            assertThrownBy(String.class, ex);
        }
    }
    
    public void testRunThrowsNullPointerException() throws Throwable {
        Main main = Main.createMain("testMainParam1", "testMainParam2", "testMainParam3", "testMainParam4", "testMainParam5");
        try {
            main.run(null, true, false);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(AntSuperrunnerCoverageStrategy.class, ex);
        }
    }
}

