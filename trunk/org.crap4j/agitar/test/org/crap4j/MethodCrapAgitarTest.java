/**
 * Generated by Agitar build: JUnitFactory Version 2.1.0.000576 (Build date: Oct 19, 2007) [2.1.0.000576]
 * JDK Version: 1.5.0_11
 *
 * Generated on Nov 6, 2007 1:39:31 PM
 * Time to generate: 01:39.724 seconds
 *
 */

package org.crap4j;

import com.agitar.lib.junit.AgitarTestCase;
import com.agitar.lib.mockingbird.Mockingbird;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Iterator;
import java.util.List;
import org.crap4j.util.MyStringBuilder;

public class MethodCrapAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return MethodCrap.class;
    }
    
    public void testConstructor() throws Throwable {
        MethodComplexity complexity2 = new MethodComplexity("testMethodCrapMethodSignature", "testMethodCrapPkgclassName", "testMethodCrapMethodName", "testMethodCrapMethodDescriptor", "testMethodCrapJava5Signature", 1, "testMethodCrapPrettyMethodSignature");
        MethodCrap methodCrap = new MethodCrap("testMethodCrapMethodSignature", 1.0F, complexity2);
        assertSame("methodCrap.complexity", complexity2, getPrivateField(methodCrap, "complexity"));
        assertEquals("methodCrap.getCoverage()", 1.0F, methodCrap.getCoverage(), 1.0E-6F);
        assertEquals("methodCrap.matchingMethodSignature", "testMethodCrapMethodSignature", methodCrap.matchingMethodSignature);
        assertEquals("methodCrap.getCrap()", 1.0F, methodCrap.getCrap(), 1.0E-6F);
    }
    
    public void testConstructor1() throws Throwable {
        MethodComplexity complexity2 = new MethodComplexity("testMethodCrapMethodSignature", "testMethodCrapPkgclassName", "testMethodCrapMethodName", "testMethodCrapMethodDescriptor", "testMethodCrapJava5Signature", 1, "testMethodCrapPrettyMethodSignature");
        MethodCrap methodCrap = new MethodCrap("testMethodCrapMethodSignature", 0.999F, complexity2);
        assertSame("methodCrap.complexity", complexity2, getPrivateField(methodCrap, "complexity"));
        assertEquals("methodCrap.getCoverage()", 0.999F, methodCrap.getCoverage(), 1.0E-6F);
        assertEquals("methodCrap.matchingMethodSignature", "testMethodCrapMethodSignature", methodCrap.matchingMethodSignature);
        assertEquals("methodCrap.getCrap()", 1.0F, methodCrap.getCrap(), 1.0E-6F);
    }
    
    public void testConstructor2() throws Throwable {
        MethodComplexity methodComplexity = new MethodComplexity("testMethodCrapParam1", "testMethodCrapParam2", "testMethodCrapParam3", "testMethodCrapParam4", "testMethodCrapParam5", 0, "testMethodCrapParam7");
        MethodCrap methodCrap = new MethodCrap("testMethodCrapParam1", 0.999F, methodComplexity);
        assertSame("methodCrap.complexity", methodComplexity, getPrivateField(methodCrap, "complexity"));
        assertEquals("methodCrap.getCoverage()", 0.999F, methodCrap.getCoverage(), 1.0E-6F);
        assertEquals("methodCrap.matchingMethodSignature", "testMethodCrapParam1", methodCrap.matchingMethodSignature);
        assertEquals("methodCrap.getCrap()", 0.0F, methodCrap.getCrap(), 1.0E-6F);
    }
    
    public void testConstructor3() throws Throwable {
        MethodComplexity complexity2 = new MethodComplexity("testMethodCrapMethodSignature", "testMethodCrapPkgclassName", "testMethodCrapMethodName", "testMethodCrapMethodDescriptor", "testMethodCrapJava5Signature", 100, "testMethodCrapPrettyMethodSignature");
        MethodCrap methodCrap = new MethodCrap("testMethodCrapMethodSignature", 0.0010F, complexity2);
        assertSame("methodCrap.complexity", complexity2, getPrivateField(methodCrap, "complexity"));
        assertEquals("methodCrap.getCoverage()", 0.0010F, methodCrap.getCoverage(), 1.0E-6F);
        assertEquals("methodCrap.matchingMethodSignature", "testMethodCrapMethodSignature", methodCrap.matchingMethodSignature);
        assertEquals("methodCrap.getCrap()", 10070.03F, methodCrap.getCrap(), 1.0E-6F);
    }
    
    public void testConstructor4() throws Throwable {
        MethodComplexity methodComplexity = new MethodComplexity("testMethodCrapParam1", "testMethodCrapParam2", "testMethodCrapParam3", "testMethodCrapParam4", "testMethodCrapParam5", 1, "testMethodCrapParam7");
        MethodCrap methodCrap = new MethodCrap("testMethodCrapParam1", 0.0F, methodComplexity);
        assertSame("methodCrap.complexity", methodComplexity, getPrivateField(methodCrap, "complexity"));
        assertEquals("methodCrap.getCoverage()", 0.0F, methodCrap.getCoverage(), 1.0E-6F);
        assertEquals("methodCrap.matchingMethodSignature", "testMethodCrapParam1", methodCrap.matchingMethodSignature);
        assertEquals("methodCrap.getCrap()", 2.0F, methodCrap.getCrap(), 1.0E-6F);
    }
    
    public void testCombine() throws Throwable {
        List arrayList = new ArrayList(100);
        MethodComplexity methodComplexity = new MethodComplexity("testMethodCrapParam1", "testMethodCrapParam2", "testMethodCrapParam3", "testMethodCrapParam4", "testMethodCrapParam5", 0, "testMethodCrapParam7");
        arrayList.add(methodComplexity);
        ArrayList result = (ArrayList) MethodCrap.combine(new ArrayList(1000), arrayList);
        assertEquals("result.size()", 1, result.size());
    }
    
    public void testCombine1() throws Throwable {
        List arrayList = new ArrayList(100);
        MethodComplexity methodComplexity = new MethodComplexity("testMethodCrapParam1", "testMethodCrapParam2", "testMethodCrapParam3", "testMethodCrapParam4", "testMethodCrapParam5", 1, "testMethodCrapParam7");
        arrayList.add(methodComplexity);
        ArrayList result = (ArrayList) MethodCrap.combine(new ArrayList(1000), arrayList);
        assertEquals("result.size()", 1, result.size());
    }
    
    public void testCombine2() throws Throwable {
        ArrayList result = (ArrayList) MethodCrap.combine(new ArrayList(100), new ArrayList(1000));
        assertEquals("result.size()", 0, result.size());
    }
    
    public void testCombine3() throws Throwable {
        List list = (List) Mockingbird.getProxyObject(List.class);
        List list2 = (List) Mockingbird.getProxyObject(List.class);
        Mockingbird.enterRecordingMode();
        ArrayList arrayList = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        MethodComplexity methodComplexity = (MethodComplexity) Mockingbird.getProxyObject(MethodComplexity.class);
        Iterator iterator2 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        MethodComplexity methodComplexity2 = (MethodComplexity) Mockingbird.getProxyObject(MethodComplexity.class);
        Iterator iterator3 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        MethodInfo methodInfo = (MethodInfo) Mockingbird.getProxyObject(MethodInfo.class);
        MethodInfo methodInfo2 = (MethodInfo) Mockingbird.getProxyObject(MethodInfo.class);
        MethodInfo methodInfo3 = (MethodInfo) Mockingbird.getProxyObject(MethodInfo.class);
        MethodCoverage methodCoverage = (MethodCoverage) Mockingbird.getProxyObject(MethodCoverage.class);
        Mockingbird.setReturnValue(true, Collections.class, "sort", "(java.util.List)void", new Object[] {list}, null, 1);
        methodComplexity.matchingMethodSignature = "";
        methodComplexity2.matchingMethodSignature = "X";
        methodInfo.matchingMethodSignature = "";
        methodInfo2.matchingMethodSignature = "";
        methodInfo3.matchingMethodSignature = "X";
        methodCoverage.matchingMethodSignature = "X";
        setPrivateField(methodCoverage, "coverage", new Float(2.8E-45F));
        Mockingbird.setReturnValue(true, Collections.class, "sort", "(java.util.List)void", new Object[] {list2}, null, 1);
        Mockingbird.setReturnValue(list2.iterator(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), methodComplexity);
        Mockingbird.setReturnValue(list.iterator(), iterator2);
        Mockingbird.setReturnValue(iterator2.hasNext(), false);
        MethodCrap methodCrap = (MethodCrap) Mockingbird.getProxyObject(MethodCrap.class, true);
        Mockingbird.replaceObjectForRecording(MethodCrap.class, "<init>(java.lang.String,float,org.crap4j.MethodComplexity)", methodCrap);
        Mockingbird.setReturnValue(arrayList.add(methodCrap), false);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), methodComplexity2);
        Mockingbird.setReturnValue(list.iterator(), iterator3);
        Mockingbird.setReturnValue(iterator3.hasNext(), true);
        Mockingbird.setReturnValue(iterator3.next(), methodInfo);
        Mockingbird.setReturnValue(iterator3.hasNext(), true);
        Mockingbird.setReturnValue(iterator3.next(), methodInfo2);
        Mockingbird.setReturnValue(iterator3.hasNext(), true);
        Mockingbird.setReturnValue(iterator3.next(), methodInfo3);
        Mockingbird.setReturnValue(iterator3.hasNext(), true);
        Mockingbird.setReturnValue(iterator3.next(), methodCoverage);
        Mockingbird.setReturnValue(iterator3.hasNext(), false);
        Mockingbird.setReturnValue(list.remove(methodCoverage), false);
        MethodCrap methodCrap2 = (MethodCrap) Mockingbird.getProxyObject(MethodCrap.class, true);
        Mockingbird.replaceObjectForRecording(MethodCrap.class, "<init>(java.lang.String,float,org.crap4j.MethodComplexity)", methodCrap2);
        Mockingbird.setReturnValue(arrayList.add(methodCrap2), false);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.enterTestMode(MethodCrap.class);
        List result = MethodCrap.combine(list, list2);
        assertNotNull("result", result);
    }
    
    public void testComputeCrap() throws Throwable {
        MethodComplexity methodComplexity = new MethodComplexity("testMethodCrapParam1", "testMethodCrapParam2", "testMethodCrapParam3", "testMethodCrapParam4", "testMethodCrapParam5", 100, "testMethodCrapParam7");
        MethodCrap methodCrap = new MethodCrap("testMethodCrapParam1", 0.0F, methodComplexity);
        float result = methodCrap.computeCrap();
        assertEquals("result", 10100.0F, result, 1.0E-6F);
    }
    
    public void testComputeCrap1() throws Throwable {
        MethodComplexity methodComplexity = new MethodComplexity("testMethodCrapParam1", "testMethodCrapParam2", "testMethodCrapParam3", "testMethodCrapParam4", "testMethodCrapParam5", 0, "testMethodCrapParam7");
        MethodCrap methodCrap = new MethodCrap("testMethodCrapParam1", 0.0F, methodComplexity);
        float result = methodCrap.computeCrap();
        assertEquals("result", 0.0F, result, 1.0E-6F);
    }
    
    public void testEscapeXml() throws Throwable {
        MethodComplexity complexity2 = new MethodComplexity("testMethodCrapMethodSignature", "testMethodCrapPkgclassName", "testMethodCrapMethodName", "testMethodCrapMethodDescriptor", "testMethodCrapJava5Signature", 100, "testMethodCrapPrettyMethodSignature");
        MethodCrap methodCrap = new MethodCrap("testMethodCrapMethodSignature", 0.0F, complexity2);
        String result = (String) callPrivateMethod("org.crap4j.MethodCrap", "escapeXml", new Class[] {String.class}, methodCrap, new Object[] {"testMethodCrapPrettyMethodSignature"});
        assertEquals("result", "testMethodCrapPrettyMethodSignature", result);
    }
    
    public void testFindSameMethod() throws Throwable {
        Object result = callPrivateMethod("org.crap4j.MethodCrap", "findSameMethod", new Class[] {List.class, MethodInfo.class}, null, new Object[] {new ArrayList(100), new MethodCoverage("testMethodCrapMethodSignature", 100.0F)});
        assertNull("result", result);
    }
    
    public void testFindSameMethod1() throws Throwable {
        MethodComplexity complexity2 = new MethodComplexity("testMethodCrapMethodSignature", "testMethodCrapPkgclassName", "testMethodCrapMethodName", "testMethodCrapMethodDescriptor", "testMethodCrapJava5Signature", 100, "testMethodCrapPrettyMethodSignature");
        MethodCrap methodCrap = new MethodCrap("testString", 0.0F, complexity2);
        List arrayList = new ArrayList(100);
        arrayList.add(methodCrap);
        MethodCrap result = (MethodCrap) callPrivateMethod("org.crap4j.MethodCrap", "findSameMethod", new Class[] {List.class, MethodInfo.class}, null, new Object[] {arrayList, new MethodCoverage("testString", 100.0F)});
        assertEquals("(ArrayList) arrayList.size()", 0, arrayList.size());
        assertFalse("(ArrayList) arrayList.contains(methodCrap)", arrayList.contains(methodCrap));
        assertSame("result", methodCrap, result);
    }
    
    public void testFindSameMethod2() throws Throwable {
        List arrayList = new ArrayList(100);
        arrayList.add(new MethodCoverage("testMethodCrapParam1", 100.0F));
        Object result = callPrivateMethod("org.crap4j.MethodCrap", "findSameMethod", new Class[] {List.class, MethodInfo.class}, null, new Object[] {arrayList, new MethodCoverage("testMethodCrapParam11", 1000.0F)});
        assertNull("result", result);
    }
    
    public void testGetComplexity() throws Throwable {
        MethodComplexity methodComplexity = new MethodComplexity("testMethodCrapParam1", "testMethodCrapParam2", "testMethodCrapParam3", "testMethodCrapParam4", "testMethodCrapParam5", 100, "testMethodCrapParam7");
        int result = new MethodCrap("testMethodCrapParam1", 0.0F, methodComplexity).getComplexity();
        assertEquals("result", 100, result);
    }
    
    public void testGetComplexity1() throws Throwable {
        MethodComplexity methodComplexity = new MethodComplexity("testMethodCrapParam1", "testMethodCrapParam2", "testMethodCrapParam3", "testMethodCrapParam4", "testMethodCrapParam5", 0, "testMethodCrapParam7");
        int result = new MethodCrap("testMethodCrapParam1", 0.0F, methodComplexity).getComplexity();
        assertEquals("result", 0, result);
    }
    
    public void testGetCoverage() throws Throwable {
        MethodComplexity methodComplexity = new MethodComplexity("testMethodCrapParam1", "testMethodCrapParam2", "testMethodCrapParam3", "testMethodCrapParam4", "testMethodCrapParam5", 100, "testMethodCrapParam7");
        float result = new MethodCrap("testMethodCrapParam1", 1.0F, methodComplexity).getCoverage();
        assertEquals("result", 1.0F, result, 1.0E-6F);
    }
    
    public void testGetCoverage1() throws Throwable {
        MethodComplexity methodComplexity = new MethodComplexity("testMethodCrapParam1", "testMethodCrapParam2", "testMethodCrapParam3", "testMethodCrapParam4", "testMethodCrapParam5", 100, "testMethodCrapParam7");
        float result = new MethodCrap("testMethodCrapParam1", 0.0F, methodComplexity).getCoverage();
        assertEquals("result", 0.0F, result, 1.0E-6F);
    }
    
    public void testGetCrap() throws Throwable {
        MethodComplexity methodComplexity = new MethodComplexity("testMethodCrapParam1", "testMethodCrapParam2", "testMethodCrapParam3", "testMethodCrapParam4", "testMethodCrapParam5", 0, "testMethodCrapParam7");
        float result = new MethodCrap("testMethodCrapParam1", 0.0F, methodComplexity).getCrap();
        assertEquals("result", 0.0F, result, 1.0E-6F);
    }
    
    public void testGetCrap1() throws Throwable {
        MethodComplexity methodComplexity = new MethodComplexity("testMethodCrapParam1", "testMethodCrapParam2", "testMethodCrapParam3", "testMethodCrapParam4", "testMethodCrapParam5", 100, "testMethodCrapParam7");
        float result = new MethodCrap("testMethodCrapParam1", 0.0F, methodComplexity).getCrap();
        assertEquals("result", 10100.0F, result, 1.0E-6F);
    }
    
    public void testGetCrapLoad() throws Throwable {
        MethodComplexity methodComplexity = new MethodComplexity("testMethodCrapParam1", "testMethodCrapParam2", "testMethodCrapParam3", "testMethodCrapParam4", "testMethodCrapParam5", 0, "testMethodCrapParam7");
        int result = new MethodCrap("testMethodCrapParam1", 0.0F, methodComplexity).getCrapLoad(0.0F);
        assertEquals("result", 0, result);
    }
    
    public void testGetCrapLoad1() throws Throwable {
        MethodComplexity methodComplexity = new MethodComplexity("testMethodCrapParam1", "testMethodCrapParam2", "testMethodCrapParam3", "testMethodCrapParam4", "testMethodCrapParam5", 100, "testMethodCrapParam7");
        int result = new MethodCrap("testMethodCrapParam1", 0.0F, methodComplexity).getCrapLoad(100.0F);
        assertEquals("result", 101, result);
    }
    
    public void testGetCrapLoad2() throws Throwable {
        MethodComplexity methodComplexity = new MethodComplexity("testMethodCrapParam1", "testMethodCrapParam2", "testMethodCrapParam3", "testMethodCrapParam4", "testMethodCrapParam5", 0, "testMethodCrapParam7");
        int result = new MethodCrap("testMethodCrapParam1", 0.0F, methodComplexity).getCrapLoad(100.0F);
        assertEquals("result", 0, result);
    }
    
    public void testPrettyMethodSignature() throws Throwable {
        MethodComplexity methodComplexity = new MethodComplexity("testMethodCrapParam1", "testMethodCrapParam2", "testMethodCrapParam3", "testMethodCrapParam4", "testMethodCrapParam5", 100, "testMethodCrapParam7");
        String result = new MethodCrap("testMethodCrapParam1", 0.0F, methodComplexity).prettyMethodSignature();
        assertEquals("result", "testMethodCrapParam7", result);
    }
    
    public void testPrettyMethodSignature1() throws Throwable {
        MethodComplexity methodComplexity = new MethodComplexity("testMethodCrapParam1", "testMethodCrapParam2", "testMethodCrapParam3", "testMethodCrapParam4", "testMethodCrapParam5", 100, null);
        String result = new MethodCrap("testMethodCrapParam1", 0.0F, methodComplexity).prettyMethodSignature();
        assertNull("result", result);
    }
    
    public void testSetCrapLoadThreshold() throws Throwable {
        MethodCrap.setCrapLoadThreshold(100.0F);
        assertEquals("MethodCrap.crapThreshold", 100.0F, ((Number) getPrivateField(MethodCrap.class, "crapThreshold")).floatValue(), 1.0E-6F);
    }
    
    public void testToString() throws Throwable {
        MethodComplexity methodComplexity = new MethodComplexity("testMethodCrapParam1", "testMethodCrapParam2", "testMethodCrapParam3", "testMethodCrapParam4", "testMethodCrapParam5", 100, "testMethodCrapParam7");
        String result = new MethodCrap("testMethodCrapParam1", 0.0F, methodComplexity).toString();
        assertEquals("result", "testMethodCrapParam7 : 10100.00 : 100.00 : 0.00", result);
    }
    
    public void testToXml() throws Throwable {
        MethodComplexity methodComplexity = new MethodComplexity("testMethodCrapParam1", "testMethodCrapParam2", "testMethodCrapParam3", "testMethodCrapParam4", "testMethodCrapParam5", 100, "testMethodCrapParam7");
        MethodCrap methodCrap = new MethodCrap("testMethodCrapParam1", 0.0F, methodComplexity);
        methodCrap.toXml(new MyStringBuilder());
        assertSame("methodCrap.complexity", methodComplexity, getPrivateField(methodCrap, "complexity"));
    }
    
    public void testValidateParams() throws Throwable {
        MethodComplexity methodComplexity = new MethodComplexity("testMethodCrapMethodSignature", "testMethodCrapPkgclassName", "testMethodCrapMethodName", "testMethodCrapMethodDescriptor", "testMethodCrapJava5Signature", 0, "testMethodCrapPrettyMethodSignature");
        MethodComplexity complexity2 = new MethodComplexity("testMethodCrapMethodSignature1", "testMethodCrapPkgclassName1", "testMethodCrapMethodName1", "testMethodCrapMethodDescriptor1", "testMethodCrapJava5Signature1", 1, "testMethodCrapPrettyMethodSignature1");
        MethodCrap methodCrap = new MethodCrap("testMethodCrapMethodSignature", 0.0F, complexity2);
        callPrivateMethod("org.crap4j.MethodCrap", "validateParams", new Class[] {float.class, MethodComplexity.class}, methodCrap, new Object[] {new Float(0.0F), methodComplexity});
        assertEquals("methodComplexity.getSigOrDescriptor()", "testMethodCrapJava5Signature", methodComplexity.getSigOrDescriptor());
    }
    
    public void testValidateParams1() throws Throwable {
        MethodComplexity methodComplexity = new MethodComplexity("testMethodCrapMethodSignature", "testMethodCrapPkgclassName", "testMethodCrapMethodName", "testMethodCrapMethodDescriptor", "testMethodCrapJava5Signature", 0, "testMethodCrapPrettyMethodSignature");
        MethodComplexity complexity2 = new MethodComplexity("testMethodCrapMethodSignature1", "testMethodCrapPkgclassName1", "testMethodCrapMethodName1", "testMethodCrapMethodDescriptor1", "testMethodCrapJava5Signature1", 1, "testMethodCrapPrettyMethodSignature1");
        MethodCrap methodCrap = new MethodCrap("testMethodCrapMethodSignature", 0.0F, complexity2);
        callPrivateMethod("org.crap4j.MethodCrap", "validateParams", new Class[] {float.class, MethodComplexity.class}, methodCrap, new Object[] {new Float(1.0F), methodComplexity});
        assertEquals("methodComplexity.getSigOrDescriptor()", "testMethodCrapJava5Signature", methodComplexity.getSigOrDescriptor());
    }
    
    public void testValidateParams2() throws Throwable {
        MethodComplexity complexity2 = new MethodComplexity("testMethodCrapMethodSignature", "testMethodCrapPkgclassName", "testMethodCrapMethodName", "testMethodCrapMethodDescriptor", "testMethodCrapJava5Signature", 100, "testMethodCrapPrettyMethodSignature");
        MethodCrap methodCrap = new MethodCrap("testMethodCrapMethodSignature", 0.0F, complexity2);
        MethodComplexity methodComplexity = new MethodComplexity("testMethodCrapMethodSignature1", "testMethodCrapPkgclassName1", "testMethodCrapMethodName1", "testMethodCrapMethodDescriptor1", "testMethodCrapJava5Signature1", 1, "testMethodCrapPrettyMethodSignature1");
        callPrivateMethod("org.crap4j.MethodCrap", "validateParams", new Class[] {float.class, MethodComplexity.class}, methodCrap, new Object[] {new Float(0.0F), methodComplexity});
        assertEquals("methodComplexity.getSigOrDescriptor()", "testMethodCrapJava5Signature1", methodComplexity.getSigOrDescriptor());
    }
    
    public void testValidateParams3() throws Throwable {
        MethodComplexity methodComplexity = new MethodComplexity("testMethodCrapMethodSignature", "testMethodCrapPkgclassName", "testMethodCrapMethodName", "testMethodCrapMethodDescriptor", "testMethodCrapJava5Signature", 100, "testMethodCrapPrettyMethodSignature");
        MethodComplexity complexity2 = new MethodComplexity("testMethodCrapMethodSignature1", "testMethodCrapPkgclassName1", "testMethodCrapMethodName1", "testMethodCrapMethodDescriptor1", "testMethodCrapJava5Signature1", 1000, "testMethodCrapPrettyMethodSignature1");
        MethodCrap methodCrap = new MethodCrap("testMethodCrapMethodSignature", 0.0F, complexity2);
        callPrivateMethod("org.crap4j.MethodCrap", "validateParams", new Class[] {float.class, MethodComplexity.class}, methodCrap, new Object[] {new Float(0.999F), methodComplexity});
        assertEquals("methodComplexity.getSigOrDescriptor()", "testMethodCrapJava5Signature", methodComplexity.getSigOrDescriptor());
    }
    
    public void testConstructorThrowsIllegalArgumentException() throws Throwable {
        MethodComplexity complexity2 = new MethodComplexity("testMethodCrapParam1", "testMethodCrapParam2", "testMethodCrapParam3", "testMethodCrapParam4", "testMethodCrapParam5", -1, "testMethodCrapParam7");
        try {
            new MethodCrap("testMethodCrapMethodSignature", 0.0F, complexity2);
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertEquals("ex.getMessage()", "coverage is 0 or greater and complexity is 0 (really 1) or greater", ex.getMessage());
            assertThrownBy(MethodCrap.class, ex);
            assertEquals("complexity2.getSigOrDescriptor()", "testMethodCrapParam5", complexity2.getSigOrDescriptor());
        }
    }
    
    public void testConstructorThrowsIllegalArgumentException1() throws Throwable {
        MethodComplexity methodComplexity = new MethodComplexity("testMethodCrapParam1", "testMethodCrapParam2", "testMethodCrapParam3", "testMethodCrapParam4", "testMethodCrapParam5", 100, "testMethodCrapParam7");
        try {
            new MethodCrap("testMethodCrapParam1", 1.0010101F, methodComplexity);
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertEquals("ex.getMessage()", "coverage is 0 or greater and complexity is 0 (really 1) or greater", ex.getMessage());
            assertThrownBy(MethodCrap.class, ex);
        }
    }
    
    public void testConstructorThrowsIllegalArgumentException2() throws Throwable {
        MethodComplexity methodComplexity = new MethodComplexity("testMethodCrapParam1", "testMethodCrapParam2", "testMethodCrapParam3", "testMethodCrapParam4", "testMethodCrapParam5", 100, "testMethodCrapParam7");
        try {
            new MethodCrap("testMethodCrapParam1", -0.00101F, methodComplexity);
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertEquals("ex.getMessage()", "coverage is 0 or greater and complexity is 0 (really 1) or greater", ex.getMessage());
            assertThrownBy(MethodCrap.class, ex);
        }
    }
    
    public void testConstructorThrowsIllegalArgumentException3() throws Throwable {
        try {
            new MethodCrap("testMethodCrapMethodSignature", 1.0F, null);
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertEquals("ex.getMessage()", "coverage is 0 or greater and complexity is 0 (really 1) or greater", ex.getMessage());
            assertThrownBy(MethodCrap.class, ex);
        }
    }
    
    public void testCombineThrowsIllegalArgumentException() throws Throwable {
        MethodComplexity methodComplexity = new MethodComplexity("testMethodCrapParam1", "testMethodCrapParam2", "testMethodCrapParam3", "testMethodCrapParam4", "testMethodCrapParam5", 0, "testMethodCrapParam7");
        List complexities = new ArrayList(1000);
        MethodComplexity methodComplexity2 = new MethodComplexity("testMethodCrapParam11", "testMethodCrapParam21", "testMethodCrapParam31", "testMethodCrapParam41", "testMethodCrapParam51", -1, "testMethodCrapParam71");
        complexities.add(methodComplexity);
        complexities.add(methodComplexity2);
        try {
            MethodCrap.combine(new ArrayList(100), complexities);
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertEquals("ex.getMessage()", "coverage is 0 or greater and complexity is 0 (really 1) or greater", ex.getMessage());
            assertThrownBy(MethodCrap.class, ex);
            assertEquals("(ArrayList) complexities.size()", 2, complexities.size());
        }
    }
    
    public void testCombineThrowsIllegalArgumentException1() throws Throwable {
        MethodComplexity methodComplexity = new MethodComplexity("testMethodCrapParam1", "testMethodCrapParam2", "testMethodCrapParam3", "testMethodCrapParam4", "testMethodCrapParam5", -1, "testMethodCrapParam7");
        List arrayList = new ArrayList(100);
        arrayList.add(new MethodCoverage("testMethodCrapParam1", 100.0F));
        List arrayList2 = new ArrayList(1000);
        arrayList2.add(methodComplexity);
        try {
            MethodCrap.combine(arrayList, arrayList2);
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertEquals("ex.getMessage()", "coverage is 0 or greater and complexity is 0 (really 1) or greater", ex.getMessage());
            assertThrownBy(MethodCrap.class, ex);
        }
    }
    
    public void testCombineThrowsIllegalArgumentException2() throws Throwable {
        ArrayList covs = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        ArrayList complexities = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(true, Collections.class, "sort", "(java.util.List)void", new Object[] {covs}, null, 1);
        Mockingbird.setReturnValue(true, Collections.class, "sort", "(java.util.List)void", new Object[] {complexities}, null, 1);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.setReturnValue(false, complexities, "iterator", "()java.util.Iterator", new Object[] {}, iterator, 1);
        Mockingbird.setReturnValue(false, iterator, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        MethodComplexity methodComplexity = (MethodComplexity) Mockingbird.getProxyObject(MethodComplexity.class);
        Mockingbird.setReturnValue(false, iterator, "next", "()java.lang.Object", new Object[] {}, methodComplexity, 1);
        Object sameMethod = callPrivateMethod("org.crap4j.MethodCrap", "findSameMethod", new Class[] {List.class, MethodInfo.class}, null, new Object[] {covs, methodComplexity});
        Mockingbird.setReturnValue(sameMethod, null);
        Mockingbird.setReturnValue(methodComplexity.getMatchingMethodSignature(), "testMethodCrapPkgclassName.testMethodCrapMethodNametestMethodCrapMethodDescriptor");
        Mockingbird.replaceObjectForRecording(MethodCrap.class, "<init>(java.lang.String,float,org.crap4j.MethodComplexity)", Mockingbird.getProxyObject(MethodCrap.class));
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(ArrayList.class), "add", "(java.lang.Object)boolean", Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        MethodComplexity methodComplexity2 = (MethodComplexity) Mockingbird.getProxyObject(MethodComplexity.class);
        Mockingbird.setReturnValue(false, iterator, "next", "()java.lang.Object", new Object[] {}, methodComplexity2, 1);
        Object sameMethod2 = callPrivateMethod("org.crap4j.MethodCrap", "findSameMethod", new Class[] {List.class, MethodInfo.class}, null, new Object[] {covs, methodComplexity2});
        Mockingbird.setReturnValue(sameMethod2, null);
        Mockingbird.setReturnValue(methodComplexity2.getMatchingMethodSignature(), "testString.CR\\testString");
        Mockingbird.setConstructorForException(MethodCrap.class, "<init>(java.lang.String,float,org.crap4j.MethodComplexity)", (Throwable) Mockingbird.getProxyObject(IllegalArgumentException.class));
        Mockingbird.enterTestMode(MethodCrap.class);
        try {
            MethodCrap.combine(covs, complexities);
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertEquals("complexities.size()", 0, complexities.size());
        }
    }
    
    public void testCombineThrowsIllegalArgumentException3() throws Throwable {
        List covs = new ArrayList(100);
        List complexities = new ArrayList(1000);
        MethodComplexity methodComplexity = new MethodComplexity("testMethodCrapMethodSignature", "testMethodCrapPkgclassName", "testMethodCrapMethodName", "testMethodCrapMethodDescriptor", "testMethodCrapJava5Signature", 100, "testMethodCrapPrettyMethodSignature");
        complexities.add(methodComplexity);
        Mockingbird.enterRecordingMode();
        Mockingbird.setConstructorForException(MethodCrap.class, "<init>(java.lang.String,float,org.crap4j.MethodComplexity)", (Throwable) Mockingbird.getProxyObject(IllegalArgumentException.class));
        Mockingbird.enterTestMode(MethodCrap.class);
        try {
            MethodCrap.combine(covs, complexities);
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertEquals("(ArrayList) complexities.size()", 1, complexities.size());
        }
    }
    
    public void testCombineThrowsIllegalArgumentException4() throws Throwable {
        MethodCoverage methodCoverage = new MethodCoverage("testMethodCrapParam1", 1000.0F);
        MethodComplexity methodComplexity = new MethodComplexity("testMethodCrapParam1", "testMethodCrapParam2", "testMethodCrapParam3", "testMethodCrapParam4", "testMethodCrapParam5", 100, "testMethodCrapParam7");
        List arrayList = new ArrayList(100);
        arrayList.add(methodCoverage);
        callPrivateMethod("org.crap4j.MethodCrap", "findSameMethod", new Class[] {List.class, MethodInfo.class}, null, new Object[] {arrayList, new MethodCoverage("testMethodCrapParam1", 100.0F)});
        List covs = new ArrayList(1000);
        covs.add(methodCoverage);
        List complexities = new ArrayList(0);
        complexities.add(methodComplexity);
        Mockingbird.enterRecordingMode();
        Mockingbird.setConstructorForException(MethodCrap.class, "<init>(java.lang.String,float,org.crap4j.MethodComplexity)", (Throwable) Mockingbird.getProxyObject(IllegalArgumentException.class));
        Mockingbird.enterTestMode(MethodCrap.class);
        try {
            MethodCrap.combine(covs, complexities);
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertEquals("(ArrayList) complexities.size()", 1, complexities.size());
        }
    }
    
    public void testCombineThrowsIllegalArgumentException5() throws Throwable {
        ArrayList complexities = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        ArrayList covs = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(true, Collections.class, "sort", "(java.util.List)void", new Object[] {covs}, null, 1);
        Mockingbird.setReturnValue(true, Collections.class, "sort", "(java.util.List)void", new Object[] {complexities}, null, 1);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.setReturnValue(false, complexities, "iterator", "()java.util.Iterator", new Object[] {}, iterator, 1);
        Mockingbird.setReturnValue(false, iterator, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        MethodComplexity methodComplexity = (MethodComplexity) Mockingbird.getProxyObject(MethodComplexity.class);
        Mockingbird.setReturnValue(false, iterator, "next", "()java.lang.Object", new Object[] {}, methodComplexity, 1);
        Object sameMethod = callPrivateMethod("org.crap4j.MethodCrap", "findSameMethod", new Class[] {List.class, MethodInfo.class}, null, new Object[] {covs, methodComplexity});
        Mockingbird.setReturnValue(sameMethod, null);
        Mockingbird.setReturnValue(methodComplexity.getMatchingMethodSignature(), "E: .testStringtestString");
        Mockingbird.setConstructorForException(MethodCrap.class, "<init>(java.lang.String,float,org.crap4j.MethodComplexity)", (Throwable) Mockingbird.getProxyObject(IllegalArgumentException.class));
        Mockingbird.enterTestMode(MethodCrap.class);
        try {
            MethodCrap.combine(covs, complexities);
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertEquals("complexities.size()", 0, complexities.size());
        }
    }
    
    public void testCombineThrowsNullPointerException() throws Throwable {
        List arrayList = new ArrayList(100);
        List arrayList2 = new ArrayList(1000);
        arrayList2.add(null);
        MethodComplexity methodComplexity = new MethodComplexity("testMethodCrapParam1", "testMethodCrapParam2", "testMethodCrapParam3", "testMethodCrapParam4", "testMethodCrapParam5", 100, "testMethodCrapParam7");
        arrayList2.add(methodComplexity);
        try {
            MethodCrap.combine(arrayList, arrayList2);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(Arrays.class, ex);
        }
    }
    
    public void testCombineThrowsNullPointerException1() throws Throwable {
        List arrayList = new ArrayList(100);
        arrayList.add(null);
        try {
            MethodCrap.combine(new ArrayList(1000), arrayList);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(MethodCrap.class, ex);
        }
    }
    
    public void testCombineThrowsNullPointerException2() throws Throwable {
        List complexities = new ArrayList(100);
        List covs = new ArrayList(1000);
        Mockingbird.enterRecordingMode();
        Mockingbird.setException(true, Collections.class, "sort", "(java.util.List)void", new Object[] {covs}, (Throwable) Mockingbird.getProxyObject(NullPointerException.class), 1);
        Mockingbird.enterTestMode(MethodCrap.class);
        try {
            MethodCrap.combine(covs, complexities);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertEquals("(ArrayList) complexities.size()", 0, complexities.size());
        }
    }
    
    public void testEscapeXmlThrowsNullPointerException() throws Throwable {
        MethodComplexity complexity2 = new MethodComplexity("testMethodCrapMethodSignature", "testMethodCrapPkgclassName", "testMethodCrapMethodName", "testMethodCrapMethodDescriptor", "testMethodCrapJava5Signature", 100, "testMethodCrapPrettyMethodSignature");
        MethodCrap methodCrap = new MethodCrap("testMethodCrapMethodSignature", 0.0F, complexity2);
        try {
            callPrivateMethod("org.crap4j.MethodCrap", "escapeXml", new Class[] {String.class}, methodCrap, new Object[] {null});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(MethodCrap.class, ex);
        }
    }
    
    public void testFindSameMethodThrowsNullPointerException() throws Throwable {
        List arrayList = new ArrayList(100);
        try {
            callPrivateMethod("org.crap4j.MethodCrap", "findSameMethod", new Class[] {List.class, MethodInfo.class}, null, new Object[] {arrayList, null});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(MethodCrap.class, ex);
            assertEquals("(ArrayList) arrayList.size()", 0, arrayList.size());
        }
    }
    
    public void testFindSameMethodThrowsNullPointerException1() throws Throwable {
        MethodInfo methodComplexity = new MethodComplexity("testMethodCrapMethodSignature", "testMethodCrapPkgclassName", "testMethodCrapMethodName", "testMethodCrapMethodDescriptor", "testMethodCrapJava5Signature", 100, "testMethodCrapPrettyMethodSignature");
        List arrayList = new ArrayList(100);
        arrayList.add(null);
        try {
            callPrivateMethod("org.crap4j.MethodCrap", "findSameMethod", new Class[] {List.class, MethodInfo.class}, null, new Object[] {arrayList, methodComplexity});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(MethodCrap.class, ex);
            assertEquals("(ArrayList) arrayList.size()", 1, arrayList.size());
        }
    }
    
    public void testFindSameMethodThrowsNullPointerException2() throws Throwable {
        try {
            callPrivateMethod("org.crap4j.MethodCrap", "findSameMethod", new Class[] {List.class, MethodInfo.class}, null, new Object[] {null, new MethodCoverage("testMethodCrapMethodSignature", 100.0F)});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(MethodCrap.class, ex);
        }
    }
    
    public void testToXmlThrowsNullPointerException() throws Throwable {
        MyStringBuilder myStringBuilder = new MyStringBuilder();
        MethodComplexity methodComplexity = new MethodComplexity("testMethodCrapParam1", "testMethodCrapParam2", "testMethodCrapParam3", null, "", 100, "testMethodCrapParam7");
        MethodCrap methodCrap = new MethodCrap("testMethodCrapParam1", 0.0F, methodComplexity);
        try {
            methodCrap.toXml(myStringBuilder);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertEquals("myStringBuilder.currentIndentation", 2, ((Number) getPrivateField(myStringBuilder, "currentIndentation")).intValue());
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(MethodCrap.class, ex);
            assertSame("methodCrap.complexity", methodComplexity, getPrivateField(methodCrap, "complexity"));
        }
    }
    
    public void testToXmlThrowsNullPointerException1() throws Throwable {
        MethodComplexity methodComplexity = new MethodComplexity("testMethodCrapParam1", "testMethodCrapParam2", "testMethodCrapParam3", "testMethodCrapParam4", "testMethodCrapParam5", 100, "testMethodCrapParam7");
        MethodCrap methodCrap = new MethodCrap("testMethodCrapParam1", 0.0F, methodComplexity);
        try {
            methodCrap.toXml(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(MethodCrap.class, ex);
            assertSame("methodCrap.complexity", methodComplexity, getPrivateField(methodCrap, "complexity"));
        }
    }
    
    public void testToXmlThrowsNullPointerException2() throws Throwable {
        MethodComplexity methodComplexity = new MethodComplexity("testMethodCrapParam1", "testMethodCrapParam2", "testMethodCrapParam3", "testMethodCrapParam4", "testMethodCrapParam5", 100, null);
        MethodCrap methodCrap = new MethodCrap("testMethodCrapParam1", 0.0F, methodComplexity);
        MyStringBuilder myStringBuilder = new MyStringBuilder();
        try {
            methodCrap.toXml(myStringBuilder);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertEquals("myStringBuilder.currentIndentation", 2, ((Number) getPrivateField(myStringBuilder, "currentIndentation")).intValue());
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(MethodCrap.class, ex);
            assertSame("methodCrap.complexity", methodComplexity, getPrivateField(methodCrap, "complexity"));
        }
    }
    
    public void testToXmlThrowsNullPointerException3() throws Throwable {
        MyStringBuilder myStringBuilder = new MyStringBuilder();
        MethodComplexity methodComplexity = new MethodComplexity("testMethodCrapParam1", "testMethodCrapParam2", null, "testMethodCrapParam4", "testMethodCrapParam5", 100, "testMethodCrapParam7");
        MethodCrap methodCrap = new MethodCrap("testMethodCrapParam1", 0.0F, methodComplexity);
        try {
            methodCrap.toXml(myStringBuilder);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertEquals("myStringBuilder.currentIndentation", 2, ((Number) getPrivateField(myStringBuilder, "currentIndentation")).intValue());
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(MethodCrap.class, ex);
            assertSame("methodCrap.complexity", methodComplexity, getPrivateField(methodCrap, "complexity"));
        }
    }
    
    public void testValidateParamsThrowsIllegalArgumentException() throws Throwable {
        MethodComplexity complexity2 = new MethodComplexity("testMethodCrapMethodSignature", "testMethodCrapPkgclassName", "testMethodCrapMethodName", "testMethodCrapMethodDescriptor", "testMethodCrapJava5Signature", 100, "testMethodCrapPrettyMethodSignature");
        MethodCrap methodCrap = new MethodCrap("testMethodCrapMethodSignature", 0.0F, complexity2);
        MethodComplexity methodComplexity = new MethodComplexity("testMethodCrapMethodSignature1", "testMethodCrapPkgclassName1", "testMethodCrapMethodName1", "testMethodCrapMethodDescriptor1", "testMethodCrapJava5Signature1", -1, "testMethodCrapPrettyMethodSignature1");
        try {
            callPrivateMethod("org.crap4j.MethodCrap", "validateParams", new Class[] {float.class, MethodComplexity.class}, methodCrap, new Object[] {new Float(0.0010F), methodComplexity});
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertEquals("ex.getMessage()", "coverage is 0 or greater and complexity is 0 (really 1) or greater", ex.getMessage());
            assertThrownBy(MethodCrap.class, ex);
            assertEquals("methodComplexity.getSigOrDescriptor()", "testMethodCrapJava5Signature1", methodComplexity.getSigOrDescriptor());
        }
    }
    
    public void testValidateParamsThrowsIllegalArgumentException1() throws Throwable {
        MethodComplexity complexity2 = new MethodComplexity("testMethodCrapMethodSignature", "testMethodCrapPkgclassName", "testMethodCrapMethodName", "testMethodCrapMethodDescriptor", "testMethodCrapJava5Signature", 100, "testMethodCrapPrettyMethodSignature");
        MethodCrap methodCrap = new MethodCrap("testMethodCrapMethodSignature", 0.0F, complexity2);
        try {
            callPrivateMethod("org.crap4j.MethodCrap", "validateParams", new Class[] {float.class, MethodComplexity.class}, methodCrap, new Object[] {new Float(1.0F), null});
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertEquals("ex.getMessage()", "coverage is 0 or greater and complexity is 0 (really 1) or greater", ex.getMessage());
            assertThrownBy(MethodCrap.class, ex);
        }
    }
    
    public void testValidateParamsThrowsIllegalArgumentException2() throws Throwable {
        MethodComplexity methodComplexity = new MethodComplexity("testMethodCrapParam1", "testMethodCrapParam2", "testMethodCrapParam3", "testMethodCrapParam4", "testMethodCrapParam5", 100, "testMethodCrapParam7");
        MethodComplexity complexity2 = new MethodComplexity("testMethodCrapParam11", "testMethodCrapParam21", "testMethodCrapParam31", "testMethodCrapParam41", "testMethodCrapParam51", 1000, "testMethodCrapParam71");
        MethodCrap methodCrap = new MethodCrap("testMethodCrapMethodSignature", 0.0F, complexity2);
        try {
            callPrivateMethod("org.crap4j.MethodCrap", "validateParams", new Class[] {float.class, MethodComplexity.class}, methodCrap, new Object[] {new Float(1.0010101F), methodComplexity});
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertEquals("ex.getMessage()", "coverage is 0 or greater and complexity is 0 (really 1) or greater", ex.getMessage());
            assertThrownBy(MethodCrap.class, ex);
            assertEquals("methodComplexity.getSigOrDescriptor()", "testMethodCrapParam5", methodComplexity.getSigOrDescriptor());
        }
    }
    
    public void testValidateParamsThrowsIllegalArgumentException3() throws Throwable {
        MethodComplexity complexity2 = new MethodComplexity("testMethodCrapMethodSignature", "testMethodCrapPkgclassName", "testMethodCrapMethodName", "testMethodCrapMethodDescriptor", "testMethodCrapJava5Signature", 100, "testMethodCrapPrettyMethodSignature");
        MethodCrap methodCrap = new MethodCrap("testMethodCrapMethodSignature", 0.0F, complexity2);
        MethodComplexity methodComplexity = new MethodComplexity("testMethodCrapMethodSignature1", "testMethodCrapPkgclassName1", "testMethodCrapMethodName1", "testMethodCrapMethodDescriptor1", "testMethodCrapJava5Signature1", 1000, "testMethodCrapPrettyMethodSignature1");
        try {
            callPrivateMethod("org.crap4j.MethodCrap", "validateParams", new Class[] {float.class, MethodComplexity.class}, methodCrap, new Object[] {new Float(-1.0F), methodComplexity});
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertEquals("ex.getMessage()", "coverage is 0 or greater and complexity is 0 (really 1) or greater", ex.getMessage());
            assertThrownBy(MethodCrap.class, ex);
            assertEquals("methodComplexity.getSigOrDescriptor()", "testMethodCrapJava5Signature1", methodComplexity.getSigOrDescriptor());
        }
    }
}

