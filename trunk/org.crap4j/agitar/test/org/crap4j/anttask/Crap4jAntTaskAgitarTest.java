/**
 * Generated by Agitar build: JUnitFactory Version 2.1.0.000576 (Build date: Oct 19, 2007) [2.1.0.000576]
 * JDK Version: 1.5.0_11
 *
 * Generated on Oct 26, 2007 4:00:24 PM
 * Time to generate: 03:02.822 seconds
 *
 */

package org.crap4j.anttask;

import com.agitar.lib.junit.AgitarTestCase;
import com.agitar.lib.mockingbird.Mockingbird;
import com.agitar.lib.mockingbird.MockingbirdSystem;
import java.io.File;
import java.io.IOException;
import java.io.PrintStream;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import org.apache.tools.ant.BuildException;
import org.apache.tools.ant.Project;
import org.apache.tools.ant.types.Path;
import org.crap4j.CrapProject;
import org.crap4j.Main;

public class Crap4jAntTaskAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return Crap4jAntTask.class;
    }
    
    public void testConstructor() throws Throwable {
        Crap4jAntTask crap4jAntTask = new Crap4jAntTask();
        assertNull("crap4jAntTask.getLocation().getFileName()", crap4jAntTask.getLocation().getFileName());
    }
    
    public void testCrapjAntTask() throws Throwable {
        Project p = new Project();
        Crap4jAntTask crap4jAntTask = new Crap4jAntTask();
        crap4jAntTask.CrapjAntTask(p);
        assertSame("crap4jAntTask.antProject", p, getPrivateField(crap4jAntTask, "antProject"));
    }
    
    public void testCreateClassDirs() throws Throwable {
        Crap4jAntTask crap4jAntTask = new Crap4jAntTask();
        Path classDirs = crap4jAntTask.createClassDirs();
        Path result = crap4jAntTask.createClassDirs();
        assertEquals("crap4jAntTask.getClassDirs().elements.size()", 2, ((Collection) getPrivateField(crap4jAntTask.getClassDirs(), "elements")).size());
        assertSame("crap4jAntTask.getClassDirs().elements.get(0)", classDirs, ((List) getPrivateField(crap4jAntTask.getClassDirs(), "elements")).get(0));
        assertNotNull("result", result);
        assertNotNull("crap4jAntTask.getClassDirs()", crap4jAntTask.getClassDirs());
    }
    
    public void testCreateClassDirs1() throws Throwable {
        Crap4jAntTask crap4jAntTask = new Crap4jAntTask();
        Path result = crap4jAntTask.createClassDirs();
        assertNotNull("crap4jAntTask.getClassDirs()", crap4jAntTask.getClassDirs());
        assertNotNull("result", result);
    }
    
    public void testCreateLibClasspath() throws Throwable {
        Crap4jAntTask crap4jAntTask = new Crap4jAntTask();
        Path libClasspath = crap4jAntTask.createLibClasspath();
        Path result = crap4jAntTask.createLibClasspath();
        int actual = ((Collection) getPrivateField(crap4jAntTask.getLibClasspath(), "elements")).size();
        assertEquals("crap4jAntTask.getLibClasspath().elements.size()", 2, actual);
        assertSame("crap4jAntTask.getLibClasspath().elements.get(0)", libClasspath, ((List) getPrivateField(crap4jAntTask.getLibClasspath(), "elements")).get(0));
        assertNotNull("result", result);
        assertNotNull("crap4jAntTask.getLibClasspath()", crap4jAntTask.getLibClasspath());
    }
    
    public void testCreateLibClasspath1() throws Throwable {
        Crap4jAntTask crap4jAntTask = new Crap4jAntTask();
        Path result = crap4jAntTask.createLibClasspath();
        assertNotNull("crap4jAntTask.getLibClasspath()", crap4jAntTask.getLibClasspath());
        assertNotNull("result", result);
    }
    
    public void testCreateSrcDirs() throws Throwable {
        Crap4jAntTask crap4jAntTask = new Crap4jAntTask();
        Path srcDirs = crap4jAntTask.createSrcDirs();
        Path result = crap4jAntTask.createSrcDirs();
        assertEquals("crap4jAntTask.getSrcDirs().elements.size()", 2, ((Collection) getPrivateField(crap4jAntTask.getSrcDirs(), "elements")).size());
        assertSame("crap4jAntTask.getSrcDirs().elements.get(0)", srcDirs, ((List) getPrivateField(crap4jAntTask.getSrcDirs(), "elements")).get(0));
        assertNotNull("result", result);
        assertNotNull("crap4jAntTask.getSrcDirs()", crap4jAntTask.getSrcDirs());
    }
    
    public void testCreateSrcDirs1() throws Throwable {
        Crap4jAntTask crap4jAntTask = new Crap4jAntTask();
        Path result = crap4jAntTask.createSrcDirs();
        assertNotNull("crap4jAntTask.getSrcDirs()", crap4jAntTask.getSrcDirs());
        assertNotNull("result", result);
    }
    
    public void testCreateTestClassDirs() throws Throwable {
        Crap4jAntTask crap4jAntTask = new Crap4jAntTask();
        Path result = crap4jAntTask.createTestClassDirs();
        assertNotNull("crap4jAntTask.getTestClassDirs()", crap4jAntTask.getTestClassDirs());
        assertNotNull("result", result);
    }
    
    public void testCreateTestClassDirs1() throws Throwable {
        Crap4jAntTask crap4jAntTask = new Crap4jAntTask();
        Path testClassDirs = crap4jAntTask.createTestClassDirs();
        Path result = crap4jAntTask.createTestClassDirs();
        int actual = ((Collection) getPrivateField(crap4jAntTask.getTestClassDirs(), "elements")).size();
        assertEquals("crap4jAntTask.getTestClassDirs().elements.size()", 2, actual);
        assertSame("crap4jAntTask.getTestClassDirs().elements.get(0)", testClassDirs, ((List) getPrivateField(crap4jAntTask.getTestClassDirs(), "elements")).get(0));
        assertNotNull("result", result);
        assertNotNull("crap4jAntTask.getTestClassDirs()", crap4jAntTask.getTestClassDirs());
    }
    
    public void testExecuteWithAggressiveMocks() throws Throwable {
        Crap4jAntTask crap4jAntTask = (Crap4jAntTask) Mockingbird.getProxyObject(Crap4jAntTask.class, true);
        File file = (File) Mockingbird.getProxyObject(File.class);
        Path path = (Path) Mockingbird.getProxyObject(Path.class);
        Path path2 = (Path) Mockingbird.getProxyObject(Path.class);
        Path path3 = (Path) Mockingbird.getProxyObject(Path.class);
        String[] strings = new String[0];
        String[] strings2 = new String[0];
        String[] strings3 = new String[2];
        Main main = (Main) Mockingbird.getProxyObject(Main.class);
        IOException iOException = (IOException) Mockingbird.getProxyObject(IOException.class);
        crap4jAntTask.setProjectDir(file);
        crap4jAntTask.setLibClasspath(path);
        crap4jAntTask.setTestClassDirs(path2);
        crap4jAntTask.setClassDirs(path3);
        crap4jAntTask.setSrcDirs(null);
        crap4jAntTask.setOutputDir(null);
        crap4jAntTask.setDebug(true);
        crap4jAntTask.setDontTest(false);
        PrintStream printStream = (PrintStream) Mockingbird.getProxyObject(PrintStream.class);
        MockingbirdSystem.out = printStream;
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        strings3[0] = "";
        strings3[1] = "";
        Mockingbird.setReturnValue(false, printStream, "println", "(java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, printStream, "println", "(java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, printStream, "println", "(java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(path3.list(), strings);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, printStream, "println", "(java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(path2.list(), strings2);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, printStream, "println", "(java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(path.list(), strings3);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, printStream, "println", "(java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(false, file, "getAbsolutePath", "()java.lang.String", new Object[] {}, "", 1);
        Mockingbird.setReturnValue(false, crap4jAntTask, "makeListFrom", "(org.apache.tools.ant.types.Path)java.util.List", new Object[] {path}, null, 1);
        Mockingbird.setReturnValue(false, crap4jAntTask, "makeListFrom", "(org.apache.tools.ant.types.Path)java.util.List", new Object[] {path2}, null, 1);
        Mockingbird.setReturnValue(false, crap4jAntTask, "makeListFrom", "(org.apache.tools.ant.types.Path)java.util.List", new Object[] {path3}, null, 1);
        Mockingbird.setReturnValue(false, crap4jAntTask, "makeListFrom", "(org.apache.tools.ant.types.Path)java.util.List", new Object[] {null}, null, 1);
        Mockingbird.replaceObjectForRecording(CrapProject.class, "<init>(java.lang.String,java.util.List,java.util.List,java.util.List,java.util.List,java.lang.String)", Mockingbird.getProxyObject(CrapProject.class));
        Mockingbird.setReturnValue(Main.createMain(), main);
        Mockingbird.setException(false, main, "run", "(org.crap4j.CrapProject,boolean,boolean)void", iOException, 1);
        Mockingbird.setReturnValue(false, iOException, "printStackTrace", "()void", new Object[] {}, null, 1);
        Mockingbird.enterTestMode(Crap4jAntTask.class);
        crap4jAntTask.execute();
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testExecuteWithAggressiveMocks1() throws Throwable {
        Crap4jAntTask crap4jAntTask = (Crap4jAntTask) Mockingbird.getProxyObject(Crap4jAntTask.class, true);
        File file = (File) Mockingbird.getProxyObject(File.class);
        Path path = (Path) Mockingbird.getProxyObject(Path.class);
        Path path2 = (Path) Mockingbird.getProxyObject(Path.class);
        Path path3 = (Path) Mockingbird.getProxyObject(Path.class);
        File file2 = (File) Mockingbird.getProxyObject(File.class);
        String[] strings = new String[0];
        String[] strings2 = new String[0];
        String[] strings3 = new String[2];
        Main main = (Main) Mockingbird.getProxyObject(Main.class);
        crap4jAntTask.setProjectDir(file);
        crap4jAntTask.setLibClasspath(path);
        crap4jAntTask.setTestClassDirs(path2);
        crap4jAntTask.setClassDirs(path3);
        crap4jAntTask.setSrcDirs(null);
        crap4jAntTask.setOutputDir(file2);
        crap4jAntTask.setDebug(true);
        crap4jAntTask.setDontTest(false);
        PrintStream printStream = (PrintStream) Mockingbird.getProxyObject(PrintStream.class);
        MockingbirdSystem.out = printStream;
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        strings3[0] = "";
        strings3[1] = "";
        Mockingbird.setReturnValue(false, printStream, "println", "(java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, printStream, "println", "(java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, printStream, "println", "(java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(path3.list(), strings);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, printStream, "println", "(java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(path2.list(), strings2);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, printStream, "println", "(java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(path.list(), strings3);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, printStream, "println", "(java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(false, file, "getAbsolutePath", "()java.lang.String", new Object[] {}, "", 1);
        Mockingbird.setReturnValue(false, crap4jAntTask, "makeListFrom", "(org.apache.tools.ant.types.Path)java.util.List", new Object[] {path}, null, 1);
        Mockingbird.setReturnValue(false, crap4jAntTask, "makeListFrom", "(org.apache.tools.ant.types.Path)java.util.List", new Object[] {path2}, null, 1);
        Mockingbird.setReturnValue(false, crap4jAntTask, "makeListFrom", "(org.apache.tools.ant.types.Path)java.util.List", new Object[] {path3}, null, 1);
        Mockingbird.setReturnValue(false, crap4jAntTask, "makeListFrom", "(org.apache.tools.ant.types.Path)java.util.List", new Object[] {null}, null, 1);
        Mockingbird.setReturnValue(false, file2, "getAbsolutePath", "()java.lang.String", new Object[] {}, "", 1);
        Mockingbird.replaceObjectForRecording(CrapProject.class, "<init>(java.lang.String,java.util.List,java.util.List,java.util.List,java.util.List,java.lang.String)", Mockingbird.getProxyObject(CrapProject.class));
        Mockingbird.setReturnValue(Main.createMain(), main);
        Mockingbird.setReturnValue(false, main, "run", "(org.crap4j.CrapProject,boolean,boolean)void", null, 1);
        Mockingbird.enterTestMode(Crap4jAntTask.class);
        crap4jAntTask.execute();
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testMakeListFrom() throws Throwable {
        Crap4jAntTask crap4jAntTask = new Crap4jAntTask();
        ArrayList result = (ArrayList) callPrivateMethod("org.crap4j.anttask.Crap4jAntTask", "makeListFrom", new Class[] {Path.class}, crap4jAntTask, new Object[] {new Path(new Project())});
        assertEquals("result.size()", 0, result.size());
    }
    
    public void testSetClassDirs() throws Throwable {
        Path path = Path.systemClasspath;
        Crap4jAntTask crap4jAntTask = new Crap4jAntTask();
        crap4jAntTask.setClassDirs(path);
        assertSame("crap4jAntTask.getClassDirs()", path, crap4jAntTask.getClassDirs());
    }
    
    public void testSetCrap4jHome() throws Throwable {
        Crap4jAntTask crap4jAntTask = new Crap4jAntTask();
        crap4jAntTask.setCrap4jHome("testCrap4jAntTaskCrap4jHome");
        assertEquals("crap4jAntTask.getCrap4jHome()", "testCrap4jAntTaskCrap4jHome", crap4jAntTask.getCrap4jHome());
    }
    
    public void testSetDebug() throws Throwable {
        Crap4jAntTask crap4jAntTask = new Crap4jAntTask();
        crap4jAntTask.setDebug(true);
        assertTrue("crap4jAntTask.isDebug()", crap4jAntTask.isDebug());
    }
    
    public void testSetDontTest() throws Throwable {
        Crap4jAntTask crap4jAntTask = new Crap4jAntTask();
        crap4jAntTask.setDontTest(true);
        assertTrue("crap4jAntTask.isDontTest()", crap4jAntTask.isDontTest());
    }
    
    public void testSetLibClasspath() throws Throwable {
        Path path = new Crap4jAntTask().createLibClasspath();
        Crap4jAntTask crap4jAntTask = new Crap4jAntTask();
        crap4jAntTask.setLibClasspath(path);
        assertSame("crap4jAntTask.getLibClasspath()", path, crap4jAntTask.getLibClasspath());
    }
    
    public void testSetOutputDir() throws Throwable {
        File outputDir = new File("testCrap4jAntTaskParam1");
        Crap4jAntTask crap4jAntTask = new Crap4jAntTask();
        crap4jAntTask.setOutputDir(outputDir);
        assertSame("crap4jAntTask.getOutputDir()", outputDir, crap4jAntTask.getOutputDir());
    }
    
    public void testSetProjectDir() throws Throwable {
        File projectDir = new File("testCrap4jAntTaskParam1");
        Crap4jAntTask crap4jAntTask = new Crap4jAntTask();
        crap4jAntTask.setProjectDir(projectDir);
        assertSame("crap4jAntTask.getProjectDir()", projectDir, crap4jAntTask.getProjectDir());
    }
    
    public void testSetSrcDirs() throws Throwable {
        Path path = new Crap4jAntTask().createSrcDirs();
        Crap4jAntTask crap4jAntTask = new Crap4jAntTask();
        crap4jAntTask.setSrcDirs(path);
        assertSame("crap4jAntTask.getSrcDirs()", path, crap4jAntTask.getSrcDirs());
    }
    
    public void testSetTestClassDirs() throws Throwable {
        Path path = Path.systemClasspath;
        Crap4jAntTask crap4jAntTask = new Crap4jAntTask();
        crap4jAntTask.setTestClassDirs(path);
        assertSame("crap4jAntTask.getTestClassDirs()", path, crap4jAntTask.getTestClassDirs());
    }
    
    public void testStringOf() throws Throwable {
        Crap4jAntTask crap4jAntTask = new Crap4jAntTask();
        String result = (String) callPrivateMethod("org.crap4j.anttask.Crap4jAntTask", "stringOf", new Class[] {Path.class}, crap4jAntTask, new Object[] {new Crap4jAntTask().createClassDirs()});
        assertEquals("result", "", result);
    }
    
    public void testCreateCrapProjectThrowsBuildException() throws Throwable {
        Crap4jAntTask crap4jAntTask = new Crap4jAntTask();
        File projectDir = (File) Mockingbird.getProxyObject(File.class);
        crap4jAntTask.setProjectDir(projectDir);
        Path path = (Path) Mockingbird.getProxyObject(Path.class);
        crap4jAntTask.setLibClasspath(path);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, projectDir, "getAbsolutePath", "()java.lang.String", new Object[] {}, "/home/agitar/work/sexy-dolphin-02-agitar-1/4e34f6c69ba9c5a4ca4a7a80ddfe6c85/org.crap4j/testString/testString", 1);
        Mockingbird.setException(path.list(), (Throwable) Mockingbird.getProxyObject(BuildException.class));
        Mockingbird.enterTestMode(Crap4jAntTask.class);
        try {
            callPrivateMethod("org.crap4j.anttask.Crap4jAntTask", "createCrapProject", new Class[] {}, crap4jAntTask, new Object[] {});
            fail("Expected BuildException to be thrown");
        } catch (BuildException ex) {
            assertNull("crap4jAntTask.getClassDirs()", crap4jAntTask.getClassDirs());
            assertNull("crap4jAntTask.getOutputDir()", crap4jAntTask.getOutputDir());
            assertNull("crap4jAntTask.getTestClassDirs()", crap4jAntTask.getTestClassDirs());
            assertNull("crap4jAntTask.getSrcDirs()", crap4jAntTask.getSrcDirs());
            assertSame("crap4jAntTask.getLibClasspath()", path, crap4jAntTask.getLibClasspath());
            assertSame("crap4jAntTask.getProjectDir()", projectDir, crap4jAntTask.getProjectDir());
        }
    }
    
    public void testCreateCrapProjectThrowsNullPointerException() throws Throwable {
        Crap4jAntTask crap4jAntTask = new Crap4jAntTask();
        try {
            callPrivateMethod("org.crap4j.anttask.Crap4jAntTask", "createCrapProject", new Class[] {}, crap4jAntTask, new Object[] {});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(Crap4jAntTask.class, ex);
        }
    }
    
    public void testCreateCrapProjectThrowsNullPointerException1() throws Throwable {
        Crap4jAntTask crap4jAntTask = new Crap4jAntTask();
        crap4jAntTask.setProjectDir(new File("testCrap4jAntTaskParam1"));
        try {
            callPrivateMethod("org.crap4j.anttask.Crap4jAntTask", "createCrapProject", new Class[] {}, crap4jAntTask, new Object[] {});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(Crap4jAntTask.class, ex);
        }
    }
    
    public void testCreateCrapProjectThrowsNullPointerException2() throws Throwable {
        Crap4jAntTask crap4jAntTask = new Crap4jAntTask();
        File projectDir = (File) Mockingbird.getProxyObject(File.class);
        crap4jAntTask.setProjectDir(projectDir);
        Path path = (Path) Mockingbird.getProxyObject(Path.class);
        crap4jAntTask.setLibClasspath(path);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, projectDir, "getAbsolutePath", "()java.lang.String", new Object[] {}, "/home/agitar/work/sexy-dolphin-02-agitar-1/tmp/agitar-agitar/Agitator48933Tdir/Agitator34885.tmp", 1);
        String[] strings = new String[1];
        strings[0] = "/home/agitar/work/sexy-dolphin-02-agitar-1/4e34f6c69ba9c5a4ca4a7a80ddfe6c85/org.crap4j/testString";
        Mockingbird.setReturnValue(path.list(), strings);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(ArrayList.class), "add", "(java.lang.Object)boolean", Boolean.TRUE, 1);
        Mockingbird.enterTestMode(Crap4jAntTask.class);
        try {
            callPrivateMethod("org.crap4j.anttask.Crap4jAntTask", "createCrapProject", new Class[] {}, crap4jAntTask, new Object[] {});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(Crap4jAntTask.class, ex);
        }
    }
    
    public void testExecuteThrowsBuildException() throws Throwable {
        Crap4jAntTask crap4jAntTask = new Crap4jAntTask();
        File projectDir = (File) Mockingbird.getProxyObject(File.class);
        crap4jAntTask.setProjectDir(projectDir);
        Path path = (Path) Mockingbird.getProxyObject(Path.class);
        crap4jAntTask.setLibClasspath(path);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, projectDir, "getAbsolutePath", "()java.lang.String", new Object[] {}, "/home/agitar/work/sexy-dolphin-02-agitar-1/4e34f6c69ba9c5a4ca4a7a80ddfe6c85/org.crap4j/testString/testString", 1);
        Mockingbird.setException(path.list(), (Throwable) Mockingbird.getProxyObject(BuildException.class));
        Mockingbird.enterTestMode(Crap4jAntTask.class);
        try {
            crap4jAntTask.execute();
            fail("Expected BuildException to be thrown");
        } catch (BuildException ex) {
            assertFalse("crap4jAntTask.isDontTest()", crap4jAntTask.isDontTest());
            assertNull("crap4jAntTask.getClassDirs()", crap4jAntTask.getClassDirs());
            assertNull("crap4jAntTask.getTestClassDirs()", crap4jAntTask.getTestClassDirs());
            assertNull("crap4jAntTask.getOutputDir()", crap4jAntTask.getOutputDir());
            assertNull("crap4jAntTask.getSrcDirs()", crap4jAntTask.getSrcDirs());
            assertSame("crap4jAntTask.getLibClasspath()", path, crap4jAntTask.getLibClasspath());
            assertFalse("crap4jAntTask.isDebug()", crap4jAntTask.isDebug());
            assertSame("crap4jAntTask.getProjectDir()", projectDir, crap4jAntTask.getProjectDir());
        }
    }
    
    public void testExecuteThrowsBuildException1() throws Throwable {
        Crap4jAntTask crap4jAntTask = new Crap4jAntTask();
        Path path = (Path) Mockingbird.getProxyObject(Path.class);
        crap4jAntTask.setTestClassDirs(path);
        File projectDir = (File) Mockingbird.getProxyObject(File.class);
        crap4jAntTask.setProjectDir(projectDir);
        Path path2 = (Path) Mockingbird.getProxyObject(Path.class);
        crap4jAntTask.setLibClasspath(path2);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, projectDir, "getAbsolutePath", "()java.lang.String", new Object[] {}, "/home/agitar/work/sexy-dolphin-02-agitar-1/tmp/agitar-agitar/Agitator48933Ldir/Agitator84.tmp", 1);
        String[] strings = new String[1];
        strings[0] = "/home/agitar/work/sexy-dolphin-02-agitar-1/4e34f6c69ba9c5a4ca4a7a80ddfe6c85/org.crap4j/testString";
        Mockingbird.setReturnValue(path2.list(), strings);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(ArrayList.class), "add", "(java.lang.Object)boolean", Boolean.TRUE, 1);
        Mockingbird.setException(path.list(), (Throwable) Mockingbird.getProxyObject(BuildException.class));
        Mockingbird.enterTestMode(Crap4jAntTask.class);
        try {
            crap4jAntTask.execute();
            fail("Expected BuildException to be thrown");
        } catch (BuildException ex) {
            assertFalse("crap4jAntTask.isDontTest()", crap4jAntTask.isDontTest());
            assertNull("crap4jAntTask.getClassDirs()", crap4jAntTask.getClassDirs());
            assertSame("crap4jAntTask.getTestClassDirs()", path, crap4jAntTask.getTestClassDirs());
            assertNull("crap4jAntTask.getOutputDir()", crap4jAntTask.getOutputDir());
            assertNull("crap4jAntTask.getSrcDirs()", crap4jAntTask.getSrcDirs());
            assertSame("crap4jAntTask.getLibClasspath()", path2, crap4jAntTask.getLibClasspath());
            assertFalse("crap4jAntTask.isDebug()", crap4jAntTask.isDebug());
            assertSame("crap4jAntTask.getProjectDir()", projectDir, crap4jAntTask.getProjectDir());
        }
    }
    
    public void testExecuteThrowsBuildException2() throws Throwable {
        Crap4jAntTask crap4jAntTask = new Crap4jAntTask();
        Path path = (Path) Mockingbird.getProxyObject(Path.class);
        crap4jAntTask.setTestClassDirs(path);
        crap4jAntTask.setDebug(true);
        Path path2 = (Path) Mockingbird.getProxyObject(Path.class);
        crap4jAntTask.setClassDirs(path2);
        Mockingbird.enterRecordingMode();
        String[] strings = new String[1];
        strings[0] = "/home/agitar/work/sexy-dolphin-02-agitar-1/4e34f6c69ba9c5a4ca4a7a80ddfe6c85/org.crap4j/GNUv libgcj";
        Mockingbird.setReturnValue(path2.list(), strings);
        Mockingbird.setException(path.list(), (Throwable) Mockingbird.getProxyObject(BuildException.class));
        Mockingbird.enterTestMode(Crap4jAntTask.class);
        try {
            crap4jAntTask.execute();
            fail("Expected BuildException to be thrown");
        } catch (BuildException ex) {
            assertFalse("crap4jAntTask.isDontTest()", crap4jAntTask.isDontTest());
            assertSame("crap4jAntTask.getClassDirs()", path2, crap4jAntTask.getClassDirs());
            assertSame("crap4jAntTask.getTestClassDirs()", path, crap4jAntTask.getTestClassDirs());
            assertNull("crap4jAntTask.getOutputDir()", crap4jAntTask.getOutputDir());
            assertNull("crap4jAntTask.getSrcDirs()", crap4jAntTask.getSrcDirs());
            assertNull("crap4jAntTask.getLibClasspath()", crap4jAntTask.getLibClasspath());
            assertTrue("crap4jAntTask.isDebug()", crap4jAntTask.isDebug());
            assertNull("crap4jAntTask.getProjectDir()", crap4jAntTask.getProjectDir());
        }
    }
    
    public void testExecuteThrowsNullPointerException() throws Throwable {
        Crap4jAntTask crap4jAntTask = new Crap4jAntTask();
        crap4jAntTask.setDebug(true);
        crap4jAntTask.createClassDirs();
        try {
            crap4jAntTask.execute();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(Crap4jAntTask.class, ex);
        }
    }
    
    public void testExecuteThrowsNullPointerException1() throws Throwable {
        Crap4jAntTask crap4jAntTask = new Crap4jAntTask();
        crap4jAntTask.setDebug(true);
        try {
            crap4jAntTask.execute();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(Crap4jAntTask.class, ex);
        }
    }
    
    public void testExecuteThrowsNullPointerException2() throws Throwable {
        try {
            new Crap4jAntTask().execute();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(Crap4jAntTask.class, ex);
        }
    }
    
    public void testMakeListFromThrowsBuildException() throws Throwable {
        Crap4jAntTask crap4jAntTask = new Crap4jAntTask();
        Path path = (Path) Mockingbird.getProxyObject(Path.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setException(path.list(), (Throwable) Mockingbird.getProxyObject(BuildException.class));
        Mockingbird.enterTestMode(Crap4jAntTask.class);
        try {
            callPrivateMethod("org.crap4j.anttask.Crap4jAntTask", "makeListFrom", new Class[] {Path.class}, crap4jAntTask, new Object[] {path});
            fail("Expected BuildException to be thrown");
        } catch (BuildException ex) {
            assertTrue("Test call resulted in expected outcome", true);
        }
    }
    
    public void testMakeListFromThrowsNullPointerException() throws Throwable {
        Crap4jAntTask crap4jAntTask = new Crap4jAntTask();
        try {
            callPrivateMethod("org.crap4j.anttask.Crap4jAntTask", "makeListFrom", new Class[] {Path.class}, crap4jAntTask, new Object[] {null});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(Crap4jAntTask.class, ex);
        }
    }
    
    public void testStringOfThrowsBuildException() throws Throwable {
        Crap4jAntTask crap4jAntTask = new Crap4jAntTask();
        Path path = (Path) Mockingbird.getProxyObject(Path.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setException(path.list(), (Throwable) Mockingbird.getProxyObject(BuildException.class));
        Mockingbird.enterTestMode(Crap4jAntTask.class);
        try {
            callPrivateMethod("org.crap4j.anttask.Crap4jAntTask", "stringOf", new Class[] {Path.class}, crap4jAntTask, new Object[] {path});
            fail("Expected BuildException to be thrown");
        } catch (BuildException ex) {
            assertTrue("Test call resulted in expected outcome", true);
        }
    }
    
    public void testStringOfThrowsNullPointerException() throws Throwable {
        Crap4jAntTask crap4jAntTask = new Crap4jAntTask();
        try {
            callPrivateMethod("org.crap4j.anttask.Crap4jAntTask", "stringOf", new Class[] {Path.class}, crap4jAntTask, new Object[] {null});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(Crap4jAntTask.class, ex);
        }
    }
}

