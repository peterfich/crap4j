/**
 * Generated by Agitar build: JUnitFactory Version 2.1.0.000576 (Build date: Oct 19, 2007) [2.1.0.000576]
 * JDK Version: 1.5.0_11
 *
 * Generated on Nov 6, 2007 1:39:24 PM
 * Time to generate: 00:29.259 seconds
 *
 */

package org.crap4j.complexity;

import com.agitar.lib.junit.AgitarTestCase;

public class MyTraceSignatureVisitorAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return MyTraceSignatureVisitor.class;
    }
    
    public void testConstructor() throws Throwable {
        MyTraceSignatureVisitor myTraceSignatureVisitor = (MyTraceSignatureVisitor) callPrivateMethod("org.crap4j.complexity.MyTraceSignatureVisitor", "<init>", new Class[] {StringBuffer.class}, null, new Object[] {new StringBuffer()});
        assertEquals("myTraceSignatureVisitor.separator", "", getPrivateField(myTraceSignatureVisitor, "separator"));
        assertEquals("myTraceSignatureVisitor.getDeclaration()", "", myTraceSignatureVisitor.getDeclaration());
    }
    
    public void testConstructor1() throws Throwable {
        MyTraceSignatureVisitor myTraceSignatureVisitor = new MyTraceSignatureVisitor(100);
        assertEquals("myTraceSignatureVisitor.separator", "", getPrivateField(myTraceSignatureVisitor, "separator"));
        assertFalse("myTraceSignatureVisitor.isInterface", ((Boolean) getPrivateField(myTraceSignatureVisitor, "isInterface")).booleanValue());
        assertEquals("myTraceSignatureVisitor.getDeclaration()", "", myTraceSignatureVisitor.getDeclaration());
    }
    
    public void testConstructor2() throws Throwable {
        MyTraceSignatureVisitor myTraceSignatureVisitor = new MyTraceSignatureVisitor(1000);
        assertEquals("myTraceSignatureVisitor.separator", "", getPrivateField(myTraceSignatureVisitor, "separator"));
        assertTrue("myTraceSignatureVisitor.isInterface", ((Boolean) getPrivateField(myTraceSignatureVisitor, "isInterface")).booleanValue());
        assertEquals("myTraceSignatureVisitor.getDeclaration()", "", myTraceSignatureVisitor.getDeclaration());
    }
    
    public void testEndFormals() throws Throwable {
        MyTraceSignatureVisitor myTraceSignatureVisitor = (MyTraceSignatureVisitor) callPrivateMethod("org.crap4j.complexity.MyTraceSignatureVisitor", "<init>", new Class[] {StringBuffer.class}, null, new Object[] {new StringBuffer("testMyTraceSignatureVisitorParam1")});
        myTraceSignatureVisitor.visitFormalTypeParameter("testMyTraceSignatureVisitorName");
        callPrivateMethod("org.crap4j.complexity.MyTraceSignatureVisitor", "endFormals", new Class[] {}, myTraceSignatureVisitor, new Object[] {});
        assertFalse("myTraceSignatureVisitor.seenFormalParameter", ((Boolean) getPrivateField(myTraceSignatureVisitor, "seenFormalParameter")).booleanValue());
        assertEquals("myTraceSignatureVisitor.getDeclaration()", "testMyTraceSignatureVisitorParam1<testMyTraceSignatureVisitorName>", myTraceSignatureVisitor.getDeclaration());
    }
    
    public void testEndFormals1() throws Throwable {
        MyTraceSignatureVisitor myTraceSignatureVisitor = (MyTraceSignatureVisitor) callPrivateMethod("org.crap4j.complexity.MyTraceSignatureVisitor", "<init>", new Class[] {StringBuffer.class}, null, new Object[] {new StringBuffer("testMyTraceSignatureVisitorParam1")});
        callPrivateMethod("org.crap4j.complexity.MyTraceSignatureVisitor", "endFormals", new Class[] {}, myTraceSignatureVisitor, new Object[] {});
        callPrivateMethod("org.crap4j.complexity.MyTraceSignatureVisitor", "endFormals", new Class[] {}, myTraceSignatureVisitor, new Object[] {});
        assertFalse("myTraceSignatureVisitor.seenFormalParameter", ((Boolean) getPrivateField(myTraceSignatureVisitor, "seenFormalParameter")).booleanValue());
        assertEquals("myTraceSignatureVisitor.getDeclaration()", "testMyTraceSignatureVisitorParam1", myTraceSignatureVisitor.getDeclaration());
    }
    
    public void testEndType() throws Throwable {
        MyTraceSignatureVisitor myTraceSignatureVisitor = new MyTraceSignatureVisitor(100);
        myTraceSignatureVisitor.visitArrayType();
        callPrivateMethod("org.crap4j.complexity.MyTraceSignatureVisitor", "endType", new Class[] {}, myTraceSignatureVisitor, new Object[] {});
        assertEquals("myTraceSignatureVisitor.arrayStack", 0, ((Number) getPrivateField(myTraceSignatureVisitor, "arrayStack")).intValue());
        assertEquals("myTraceSignatureVisitor.getDeclaration()", "[]", myTraceSignatureVisitor.getDeclaration());
    }
    
    public void testEndType1() throws Throwable {
        MyTraceSignatureVisitor myTraceSignatureVisitor = new MyTraceSignatureVisitor(100);
        myTraceSignatureVisitor.visitInterfaceBound();
        MyTraceSignatureVisitor exceptionType = (MyTraceSignatureVisitor) myTraceSignatureVisitor.visitExceptionType();
        callPrivateMethod("org.crap4j.complexity.MyTraceSignatureVisitor", "endType", new Class[] {}, exceptionType, new Object[] {});
        assertEquals("exceptionType.arrayStack", 0, ((Number) getPrivateField(exceptionType, "arrayStack")).intValue());
    }
    
    public void testGetDeclaration() throws Throwable {
        MyTraceSignatureVisitor myTraceSignatureVisitor = new MyTraceSignatureVisitor(100);
        myTraceSignatureVisitor.visitParameterType();
        String result = myTraceSignatureVisitor.getDeclaration();
        assertEquals("result", "(", result);
    }
    
    public void testGetExceptions() throws Throwable {
        MyTraceSignatureVisitor myTraceSignatureVisitor = new MyTraceSignatureVisitor(100);
        myTraceSignatureVisitor.visitSuperclass();
        String result = myTraceSignatureVisitor.getExceptions();
        assertNull("result", result);
    }
    
    public void testGetExceptions1() throws Throwable {
        MyTraceSignatureVisitor myTraceSignatureVisitor = new MyTraceSignatureVisitor(100);
        myTraceSignatureVisitor.visitInterface();
        myTraceSignatureVisitor.visitExceptionType();
        String result = myTraceSignatureVisitor.getExceptions();
        assertEquals("result", "", result);
    }
    
    public void testGetReturnType() throws Throwable {
        String result = new MyTraceSignatureVisitor(100).getReturnType();
        assertNull("result", result);
    }
    
    public void testGetReturnType1() throws Throwable {
        MyTraceSignatureVisitor myTraceSignatureVisitor = new MyTraceSignatureVisitor(100);
        myTraceSignatureVisitor.visitReturnType();
        String result = myTraceSignatureVisitor.getReturnType();
        assertEquals("result", "", result);
    }
    
    public void testStartType() throws Throwable {
        MyTraceSignatureVisitor myTraceSignatureVisitor = new MyTraceSignatureVisitor(100);
        callPrivateMethod("org.crap4j.complexity.MyTraceSignatureVisitor", "startType", new Class[] {}, myTraceSignatureVisitor, new Object[] {});
        assertEquals("myTraceSignatureVisitor.arrayStack", 0, ((Number) getPrivateField(myTraceSignatureVisitor, "arrayStack")).intValue());
    }
    
    public void testVisitArrayType() throws Throwable {
        MyTraceSignatureVisitor myTraceSignatureVisitor = new MyTraceSignatureVisitor(100);
        MyTraceSignatureVisitor result = (MyTraceSignatureVisitor) myTraceSignatureVisitor.visitArrayType();
        assertEquals("myTraceSignatureVisitor.arrayStack", 1, ((Number) getPrivateField(myTraceSignatureVisitor, "arrayStack")).intValue());
        assertSame("result", myTraceSignatureVisitor, result);
    }
    
    public void testVisitBaseType() throws Throwable {
        MyTraceSignatureVisitor myTraceSignatureVisitor = new MyTraceSignatureVisitor(100);
        myTraceSignatureVisitor.visitBaseType('V');
        assertEquals("myTraceSignatureVisitor.arrayStack", 0, ((Number) getPrivateField(myTraceSignatureVisitor, "arrayStack")).intValue());
        assertEquals("myTraceSignatureVisitor.getDeclaration()", "void", myTraceSignatureVisitor.getDeclaration());
    }
    
    public void testVisitBaseType1() throws Throwable {
        MyTraceSignatureVisitor myTraceSignatureVisitor = new MyTraceSignatureVisitor(100);
        myTraceSignatureVisitor.visitArrayType();
        myTraceSignatureVisitor.visitBaseType('Z');
        assertEquals("myTraceSignatureVisitor.arrayStack", 0, ((Number) getPrivateField(myTraceSignatureVisitor, "arrayStack")).intValue());
        assertEquals("myTraceSignatureVisitor.getDeclaration()", "boolean[]", myTraceSignatureVisitor.getDeclaration());
    }
    
    public void testVisitBaseType2() throws Throwable {
        MyTraceSignatureVisitor myTraceSignatureVisitor = (MyTraceSignatureVisitor) callPrivateMethod("org.crap4j.complexity.MyTraceSignatureVisitor", "<init>", new Class[] {StringBuffer.class}, null, new Object[] {new StringBuffer("testMyTraceSignatureVisitorParam1")});
        myTraceSignatureVisitor.visitBaseType('I');
        assertEquals("myTraceSignatureVisitor.arrayStack", 0, ((Number) getPrivateField(myTraceSignatureVisitor, "arrayStack")).intValue());
        assertEquals("myTraceSignatureVisitor.getDeclaration()", "testMyTraceSignatureVisitorParam1int", myTraceSignatureVisitor.getDeclaration());
    }
    
    public void testVisitBaseType3() throws Throwable {
        MyTraceSignatureVisitor myTraceSignatureVisitor = (MyTraceSignatureVisitor) callPrivateMethod("org.crap4j.complexity.MyTraceSignatureVisitor", "<init>", new Class[] {StringBuffer.class}, null, new Object[] {new StringBuffer()});
        myTraceSignatureVisitor.visitBaseType('F');
        assertEquals("myTraceSignatureVisitor.arrayStack", 0, ((Number) getPrivateField(myTraceSignatureVisitor, "arrayStack")).intValue());
        assertEquals("myTraceSignatureVisitor.getDeclaration()", "float", myTraceSignatureVisitor.getDeclaration());
    }
    
    public void testVisitBaseType4() throws Throwable {
        MyTraceSignatureVisitor myTraceSignatureVisitor = new MyTraceSignatureVisitor(100);
        myTraceSignatureVisitor.visitArrayType();
        myTraceSignatureVisitor.visitBaseType('F');
        assertEquals("myTraceSignatureVisitor.arrayStack", 0, ((Number) getPrivateField(myTraceSignatureVisitor, "arrayStack")).intValue());
        assertEquals("myTraceSignatureVisitor.getDeclaration()", "float[]", myTraceSignatureVisitor.getDeclaration());
    }
    
    public void testVisitBaseType5() throws Throwable {
        MyTraceSignatureVisitor myTraceSignatureVisitor = new MyTraceSignatureVisitor(100);
        myTraceSignatureVisitor.visitArrayType();
        myTraceSignatureVisitor.visitBaseType(' ');
        assertEquals("myTraceSignatureVisitor.arrayStack", 0, ((Number) getPrivateField(myTraceSignatureVisitor, "arrayStack")).intValue());
        assertEquals("myTraceSignatureVisitor.getDeclaration()", "double[]", myTraceSignatureVisitor.getDeclaration());
    }
    
    public void testVisitBaseType6() throws Throwable {
        MyTraceSignatureVisitor myTraceSignatureVisitor = new MyTraceSignatureVisitor(100);
        myTraceSignatureVisitor.visitBaseType('C');
        assertEquals("myTraceSignatureVisitor.arrayStack", 0, ((Number) getPrivateField(myTraceSignatureVisitor, "arrayStack")).intValue());
        assertEquals("myTraceSignatureVisitor.getDeclaration()", "char", myTraceSignatureVisitor.getDeclaration());
    }
    
    public void testVisitBaseType7() throws Throwable {
        MyTraceSignatureVisitor myTraceSignatureVisitor = new MyTraceSignatureVisitor(100);
        myTraceSignatureVisitor.visitInterface();
        myTraceSignatureVisitor.visitBaseType(' ');
        assertEquals("myTraceSignatureVisitor.arrayStack", 0, ((Number) getPrivateField(myTraceSignatureVisitor, "arrayStack")).intValue());
        assertEquals("myTraceSignatureVisitor.getDeclaration()", "double", myTraceSignatureVisitor.getDeclaration());
    }
    
    public void testVisitBaseType8() throws Throwable {
        MyTraceSignatureVisitor myTraceSignatureVisitor = new MyTraceSignatureVisitor(100);
        myTraceSignatureVisitor.visitBaseType('J');
        assertEquals("myTraceSignatureVisitor.arrayStack", 0, ((Number) getPrivateField(myTraceSignatureVisitor, "arrayStack")).intValue());
        assertEquals("myTraceSignatureVisitor.getDeclaration()", "long", myTraceSignatureVisitor.getDeclaration());
    }
    
    public void testVisitBaseType9() throws Throwable {
        MyTraceSignatureVisitor myTraceSignatureVisitor = new MyTraceSignatureVisitor(100);
        myTraceSignatureVisitor.visitInterfaceBound();
        myTraceSignatureVisitor.visitBaseType('B');
        assertEquals("myTraceSignatureVisitor.arrayStack", 0, ((Number) getPrivateField(myTraceSignatureVisitor, "arrayStack")).intValue());
        assertEquals("myTraceSignatureVisitor.getDeclaration()", "byte", myTraceSignatureVisitor.getDeclaration());
    }
    
    public void testVisitBaseType10() throws Throwable {
        MyTraceSignatureVisitor myTraceSignatureVisitor = new MyTraceSignatureVisitor(100);
        myTraceSignatureVisitor.visitArrayType();
        myTraceSignatureVisitor.visitBaseType('C');
        assertEquals("myTraceSignatureVisitor.arrayStack", 0, ((Number) getPrivateField(myTraceSignatureVisitor, "arrayStack")).intValue());
        assertEquals("myTraceSignatureVisitor.getDeclaration()", "char[]", myTraceSignatureVisitor.getDeclaration());
    }
    
    public void testVisitBaseType11() throws Throwable {
        MyTraceSignatureVisitor myTraceSignatureVisitor = new MyTraceSignatureVisitor(100);
        myTraceSignatureVisitor.visitArrayType();
        myTraceSignatureVisitor.visitBaseType('S');
        assertEquals("myTraceSignatureVisitor.arrayStack", 0, ((Number) getPrivateField(myTraceSignatureVisitor, "arrayStack")).intValue());
        assertEquals("myTraceSignatureVisitor.getDeclaration()", "short[]", myTraceSignatureVisitor.getDeclaration());
    }
    
    public void testVisitBaseType12() throws Throwable {
        MyTraceSignatureVisitor myTraceSignatureVisitor = new MyTraceSignatureVisitor(100);
        myTraceSignatureVisitor.visitArrayType();
        myTraceSignatureVisitor.visitBaseType('I');
        assertEquals("myTraceSignatureVisitor.arrayStack", 0, ((Number) getPrivateField(myTraceSignatureVisitor, "arrayStack")).intValue());
        assertEquals("myTraceSignatureVisitor.getDeclaration()", "int[]", myTraceSignatureVisitor.getDeclaration());
    }
    
    public void testVisitBaseType13() throws Throwable {
        MyTraceSignatureVisitor myTraceSignatureVisitor = new MyTraceSignatureVisitor(100);
        myTraceSignatureVisitor.visitSuperclass();
        myTraceSignatureVisitor.visitBaseType('Z');
        assertEquals("myTraceSignatureVisitor.arrayStack", 0, ((Number) getPrivateField(myTraceSignatureVisitor, "arrayStack")).intValue());
        assertEquals("myTraceSignatureVisitor.getDeclaration()", "boolean", myTraceSignatureVisitor.getDeclaration());
    }
    
    public void testVisitBaseType14() throws Throwable {
        MyTraceSignatureVisitor myTraceSignatureVisitor = new MyTraceSignatureVisitor(100);
        myTraceSignatureVisitor.visitArrayType();
        myTraceSignatureVisitor.visitBaseType('B');
        assertEquals("myTraceSignatureVisitor.arrayStack", 0, ((Number) getPrivateField(myTraceSignatureVisitor, "arrayStack")).intValue());
        assertEquals("myTraceSignatureVisitor.getDeclaration()", "byte[]", myTraceSignatureVisitor.getDeclaration());
    }
    
    public void testVisitBaseType15() throws Throwable {
        MyTraceSignatureVisitor myTraceSignatureVisitor = new MyTraceSignatureVisitor(100);
        myTraceSignatureVisitor.visitArrayType();
        myTraceSignatureVisitor.visitBaseType('J');
        assertEquals("myTraceSignatureVisitor.arrayStack", 0, ((Number) getPrivateField(myTraceSignatureVisitor, "arrayStack")).intValue());
        assertEquals("myTraceSignatureVisitor.getDeclaration()", "long[]", myTraceSignatureVisitor.getDeclaration());
    }
    
    public void testVisitBaseType16() throws Throwable {
        MyTraceSignatureVisitor myTraceSignatureVisitor = new MyTraceSignatureVisitor(100);
        myTraceSignatureVisitor.visitBaseType('S');
        assertEquals("myTraceSignatureVisitor.arrayStack", 0, ((Number) getPrivateField(myTraceSignatureVisitor, "arrayStack")).intValue());
        assertEquals("myTraceSignatureVisitor.getDeclaration()", "short", myTraceSignatureVisitor.getDeclaration());
    }
    
    public void testVisitBaseType17() throws Throwable {
        MyTraceSignatureVisitor myTraceSignatureVisitor = new MyTraceSignatureVisitor(100);
        myTraceSignatureVisitor.visitArrayType();
        myTraceSignatureVisitor.visitBaseType('V');
        assertEquals("myTraceSignatureVisitor.arrayStack", 0, ((Number) getPrivateField(myTraceSignatureVisitor, "arrayStack")).intValue());
        assertEquals("myTraceSignatureVisitor.getDeclaration()", "void[]", myTraceSignatureVisitor.getDeclaration());
    }
    
    public void testVisitClassBound() throws Throwable {
        MyTraceSignatureVisitor myTraceSignatureVisitor = new MyTraceSignatureVisitor(100);
        MyTraceSignatureVisitor result = (MyTraceSignatureVisitor) myTraceSignatureVisitor.visitClassBound();
        assertEquals("myTraceSignatureVisitor.separator", " extends ", getPrivateField(myTraceSignatureVisitor, "separator"));
        assertSame("result", myTraceSignatureVisitor, result);
        assertEquals("myTraceSignatureVisitor.arrayStack", 0, ((Number) getPrivateField(myTraceSignatureVisitor, "arrayStack")).intValue());
    }
    
    public void testVisitClassType() throws Throwable {
        MyTraceSignatureVisitor myTraceSignatureVisitor = (MyTraceSignatureVisitor) callPrivateMethod("org.crap4j.complexity.MyTraceSignatureVisitor", "<init>", new Class[] {StringBuffer.class}, null, new Object[] {new StringBuffer()});
        myTraceSignatureVisitor.visitClassType("java/lang/Object");
        assertEquals("myTraceSignatureVisitor.separator", "", getPrivateField(myTraceSignatureVisitor, "separator"));
        assertEquals("myTraceSignatureVisitor.argumentStack", 0, ((Number) getPrivateField(myTraceSignatureVisitor, "argumentStack")).intValue());
    }
    
    public void testVisitClassType1() throws Throwable {
        MyTraceSignatureVisitor myTraceSignatureVisitor = new MyTraceSignatureVisitor(100);
        myTraceSignatureVisitor.visitParameterType();
        myTraceSignatureVisitor.visitClassType("java/lang/Object");
        assertEquals("myTraceSignatureVisitor.separator", "", getPrivateField(myTraceSignatureVisitor, "separator"));
        assertEquals("myTraceSignatureVisitor.getDeclaration()", "(java.lang.Object", myTraceSignatureVisitor.getDeclaration());
        assertEquals("myTraceSignatureVisitor.argumentStack", 0, ((Number) getPrivateField(myTraceSignatureVisitor, "argumentStack")).intValue());
    }
    
    public void testVisitClassType2() throws Throwable {
        MyTraceSignatureVisitor myTraceSignatureVisitor = new MyTraceSignatureVisitor(100);
        myTraceSignatureVisitor.visitTypeArgument(' ');
        myTraceSignatureVisitor.visitClassType("java/lang/Object");
        assertEquals("myTraceSignatureVisitor.argumentStack", 2, ((Number) getPrivateField(myTraceSignatureVisitor, "argumentStack")).intValue());
        assertEquals("myTraceSignatureVisitor.separator", "", getPrivateField(myTraceSignatureVisitor, "separator"));
        assertEquals("myTraceSignatureVisitor.getDeclaration()", "<java.lang.Object", myTraceSignatureVisitor.getDeclaration());
    }
    
    public void testVisitClassType3() throws Throwable {
        MyTraceSignatureVisitor myTraceSignatureVisitor = new MyTraceSignatureVisitor(100);
        myTraceSignatureVisitor.visitArrayType();
        myTraceSignatureVisitor.visitClassType("testMyTraceSignatureVisitorParam1");
        assertEquals("myTraceSignatureVisitor.separator", "", getPrivateField(myTraceSignatureVisitor, "separator"));
        assertEquals("myTraceSignatureVisitor.getDeclaration()", "testMyTraceSignatureVisitorParam1", myTraceSignatureVisitor.getDeclaration());
        assertEquals("myTraceSignatureVisitor.argumentStack", 0, ((Number) getPrivateField(myTraceSignatureVisitor, "argumentStack")).intValue());
    }
    
    public void testVisitEnd() throws Throwable {
        MyTraceSignatureVisitor myTraceSignatureVisitor = new MyTraceSignatureVisitor(100);
        myTraceSignatureVisitor.visitArrayType();
        myTraceSignatureVisitor.visitTypeArgument();
        myTraceSignatureVisitor.visitEnd();
        assertEquals("myTraceSignatureVisitor.argumentStack", 0, ((Number) getPrivateField(myTraceSignatureVisitor, "argumentStack")).intValue());
        assertEquals("myTraceSignatureVisitor.arrayStack", 0, ((Number) getPrivateField(myTraceSignatureVisitor, "arrayStack")).intValue());
        assertEquals("myTraceSignatureVisitor.getDeclaration()", "<?>[]", myTraceSignatureVisitor.getDeclaration());
    }
    
    public void testVisitEnd1() throws Throwable {
        MyTraceSignatureVisitor myTraceSignatureVisitor = new MyTraceSignatureVisitor(100);
        myTraceSignatureVisitor.visitArrayType();
        myTraceSignatureVisitor.visitEnd();
        assertEquals("myTraceSignatureVisitor.arrayStack", 0, ((Number) getPrivateField(myTraceSignatureVisitor, "arrayStack")).intValue());
        assertEquals("myTraceSignatureVisitor.getDeclaration()", "[]", myTraceSignatureVisitor.getDeclaration());
        assertEquals("myTraceSignatureVisitor.argumentStack", 0, ((Number) getPrivateField(myTraceSignatureVisitor, "argumentStack")).intValue());
    }
    
    public void testVisitEnd2() throws Throwable {
        MyTraceSignatureVisitor myTraceSignatureVisitor = new MyTraceSignatureVisitor(100);
        myTraceSignatureVisitor.visitTypeArgument(' ');
        myTraceSignatureVisitor.visitEnd();
        assertEquals("myTraceSignatureVisitor.argumentStack", 0, ((Number) getPrivateField(myTraceSignatureVisitor, "argumentStack")).intValue());
        assertEquals("myTraceSignatureVisitor.arrayStack", 0, ((Number) getPrivateField(myTraceSignatureVisitor, "arrayStack")).intValue());
        assertEquals("myTraceSignatureVisitor.getDeclaration()", "<>", myTraceSignatureVisitor.getDeclaration());
    }
    
    public void testVisitEnd3() throws Throwable {
        MyTraceSignatureVisitor myTraceSignatureVisitor = new MyTraceSignatureVisitor(100);
        myTraceSignatureVisitor.visitEnd();
        assertEquals("myTraceSignatureVisitor.arrayStack", 0, ((Number) getPrivateField(myTraceSignatureVisitor, "arrayStack")).intValue());
        assertEquals("myTraceSignatureVisitor.argumentStack", 0, ((Number) getPrivateField(myTraceSignatureVisitor, "argumentStack")).intValue());
    }
    
    public void testVisitExceptionType() throws Throwable {
        MyTraceSignatureVisitor myTraceSignatureVisitor = new MyTraceSignatureVisitor(100);
        myTraceSignatureVisitor.visitInterface();
        myTraceSignatureVisitor.visitExceptionType();
        MyTraceSignatureVisitor result = (MyTraceSignatureVisitor) myTraceSignatureVisitor.visitExceptionType();
        assertEquals("result.getDeclaration()", ", ", result.getDeclaration());
        assertEquals("myTraceSignatureVisitor.getExceptions()", ", ", myTraceSignatureVisitor.getExceptions());
    }
    
    public void testVisitExceptionType1() throws Throwable {
        MyTraceSignatureVisitor myTraceSignatureVisitor = new MyTraceSignatureVisitor(100);
        myTraceSignatureVisitor.visitInterface();
        MyTraceSignatureVisitor result = (MyTraceSignatureVisitor) myTraceSignatureVisitor.visitExceptionType();
        assertEquals("myTraceSignatureVisitor.getExceptions()", "", myTraceSignatureVisitor.getExceptions());
        assertEquals("result.getDeclaration()", "", result.getDeclaration());
    }
    
    public void testVisitFormalTypeParameter() throws Throwable {
        MyTraceSignatureVisitor myTraceSignatureVisitor = new MyTraceSignatureVisitor(100);
        myTraceSignatureVisitor.visitInterfaceBound();
        myTraceSignatureVisitor.visitFormalTypeParameter("testMyTraceSignatureVisitorParam1");
        assertTrue("myTraceSignatureVisitor.seenFormalParameter", ((Boolean) getPrivateField(myTraceSignatureVisitor, "seenFormalParameter")).booleanValue());
        assertFalse("myTraceSignatureVisitor.seenInterfaceBound", ((Boolean) getPrivateField(myTraceSignatureVisitor, "seenInterfaceBound")).booleanValue());
    }
    
    public void testVisitFormalTypeParameter1() throws Throwable {
        MyTraceSignatureVisitor myTraceSignatureVisitor = (MyTraceSignatureVisitor) callPrivateMethod("org.crap4j.complexity.MyTraceSignatureVisitor", "<init>", new Class[] {StringBuffer.class}, null, new Object[] {new StringBuffer()});
        myTraceSignatureVisitor.visitFormalTypeParameter("testMyTraceSignatureVisitorName");
        myTraceSignatureVisitor.visitFormalTypeParameter("testMyTraceSignatureVisitorName");
        assertTrue("myTraceSignatureVisitor.seenFormalParameter", ((Boolean) getPrivateField(myTraceSignatureVisitor, "seenFormalParameter")).booleanValue());
        assertFalse("myTraceSignatureVisitor.seenInterfaceBound", ((Boolean) getPrivateField(myTraceSignatureVisitor, "seenInterfaceBound")).booleanValue());
    }
    
    public void testVisitInnerClassType() throws Throwable {
        MyTraceSignatureVisitor myTraceSignatureVisitor = new MyTraceSignatureVisitor(100);
        myTraceSignatureVisitor.visitInterface();
        myTraceSignatureVisitor.visitTypeArgument();
        myTraceSignatureVisitor.visitInnerClassType("testMyTraceSignatureVisitorParam1");
        assertEquals("myTraceSignatureVisitor.argumentStack", 0, ((Number) getPrivateField(myTraceSignatureVisitor, "argumentStack")).intValue());
        assertEquals("myTraceSignatureVisitor.separator", "", getPrivateField(myTraceSignatureVisitor, "separator"));
        assertEquals("myTraceSignatureVisitor.getDeclaration()", "<?>. implements testMyTraceSignatureVisitorParam1", myTraceSignatureVisitor.getDeclaration());
    }
    
    public void testVisitInnerClassType1() throws Throwable {
        MyTraceSignatureVisitor myTraceSignatureVisitor = new MyTraceSignatureVisitor(100);
        myTraceSignatureVisitor.visitInnerClassType("testMyTraceSignatureVisitorParam1");
        assertEquals("myTraceSignatureVisitor.separator", "", getPrivateField(myTraceSignatureVisitor, "separator"));
        assertEquals("myTraceSignatureVisitor.getDeclaration()", ".testMyTraceSignatureVisitorParam1", myTraceSignatureVisitor.getDeclaration());
        assertEquals("myTraceSignatureVisitor.argumentStack", 0, ((Number) getPrivateField(myTraceSignatureVisitor, "argumentStack")).intValue());
    }
    
    public void testVisitInterface() throws Throwable {
        MyTraceSignatureVisitor myTraceSignatureVisitor = new MyTraceSignatureVisitor(100);
        MyTraceSignatureVisitor result = (MyTraceSignatureVisitor) myTraceSignatureVisitor.visitInterface();
        assertTrue("myTraceSignatureVisitor.seenInterface", ((Boolean) getPrivateField(myTraceSignatureVisitor, "seenInterface")).booleanValue());
        assertEquals("myTraceSignatureVisitor.separator", " implements ", getPrivateField(myTraceSignatureVisitor, "separator"));
        assertSame("result", myTraceSignatureVisitor, result);
        assertEquals("myTraceSignatureVisitor.arrayStack", 0, ((Number) getPrivateField(myTraceSignatureVisitor, "arrayStack")).intValue());
    }
    
    public void testVisitInterface1() throws Throwable {
        MyTraceSignatureVisitor myTraceSignatureVisitor = new MyTraceSignatureVisitor(100);
        myTraceSignatureVisitor.visitInterface();
        MyTraceSignatureVisitor result = (MyTraceSignatureVisitor) myTraceSignatureVisitor.visitInterface();
        assertEquals("myTraceSignatureVisitor.separator", ", ", getPrivateField(myTraceSignatureVisitor, "separator"));
        assertSame("result", myTraceSignatureVisitor, result);
        assertTrue("myTraceSignatureVisitor.seenInterface", ((Boolean) getPrivateField(myTraceSignatureVisitor, "seenInterface")).booleanValue());
        assertEquals("myTraceSignatureVisitor.arrayStack", 0, ((Number) getPrivateField(myTraceSignatureVisitor, "arrayStack")).intValue());
    }
    
    public void testVisitInterface2() throws Throwable {
        MyTraceSignatureVisitor myTraceSignatureVisitor = new MyTraceSignatureVisitor(1000);
        MyTraceSignatureVisitor result = (MyTraceSignatureVisitor) myTraceSignatureVisitor.visitInterface();
        assertTrue("myTraceSignatureVisitor.seenInterface", ((Boolean) getPrivateField(myTraceSignatureVisitor, "seenInterface")).booleanValue());
        assertEquals("myTraceSignatureVisitor.separator", " extends ", getPrivateField(myTraceSignatureVisitor, "separator"));
        assertSame("result", myTraceSignatureVisitor, result);
        assertEquals("myTraceSignatureVisitor.arrayStack", 0, ((Number) getPrivateField(myTraceSignatureVisitor, "arrayStack")).intValue());
    }
    
    public void testVisitInterfaceBound() throws Throwable {
        MyTraceSignatureVisitor myTraceSignatureVisitor = new MyTraceSignatureVisitor(100);
        myTraceSignatureVisitor.visitInterfaceBound();
        MyTraceSignatureVisitor result = (MyTraceSignatureVisitor) myTraceSignatureVisitor.visitInterfaceBound();
        assertEquals("myTraceSignatureVisitor.separator", ", ", getPrivateField(myTraceSignatureVisitor, "separator"));
        assertSame("result", myTraceSignatureVisitor, result);
        assertEquals("myTraceSignatureVisitor.arrayStack", 0, ((Number) getPrivateField(myTraceSignatureVisitor, "arrayStack")).intValue());
        assertTrue("myTraceSignatureVisitor.seenInterfaceBound", ((Boolean) getPrivateField(myTraceSignatureVisitor, "seenInterfaceBound")).booleanValue());
    }
    
    public void testVisitInterfaceBound1() throws Throwable {
        MyTraceSignatureVisitor myTraceSignatureVisitor = new MyTraceSignatureVisitor(100);
        MyTraceSignatureVisitor result = (MyTraceSignatureVisitor) myTraceSignatureVisitor.visitInterfaceBound();
        assertTrue("myTraceSignatureVisitor.seenInterfaceBound", ((Boolean) getPrivateField(myTraceSignatureVisitor, "seenInterfaceBound")).booleanValue());
        assertEquals("myTraceSignatureVisitor.separator", " extends ", getPrivateField(myTraceSignatureVisitor, "separator"));
        assertSame("result", myTraceSignatureVisitor, result);
        assertEquals("myTraceSignatureVisitor.arrayStack", 0, ((Number) getPrivateField(myTraceSignatureVisitor, "arrayStack")).intValue());
    }
    
    public void testVisitParameterType() throws Throwable {
        MyTraceSignatureVisitor myTraceSignatureVisitor = (MyTraceSignatureVisitor) callPrivateMethod("org.crap4j.complexity.MyTraceSignatureVisitor", "<init>", new Class[] {StringBuffer.class}, null, new Object[] {new StringBuffer()});
        MyTraceSignatureVisitor returnType = (MyTraceSignatureVisitor) myTraceSignatureVisitor.visitReturnType();
        returnType.visitParameterType();
        returnType.visitInterface();
        returnType.visitFormalTypeParameter("testMyTraceSignatureVisitorName");
        MyTraceSignatureVisitor result = (MyTraceSignatureVisitor) returnType.visitParameterType();
        assertFalse("returnType.seenFormalParameter", ((Boolean) getPrivateField(returnType, "seenFormalParameter")).booleanValue());
        assertSame("result", returnType, result);
        assertEquals("returnType.arrayStack", 0, ((Number) getPrivateField(returnType, "arrayStack")).intValue());
        assertEquals("returnType.getDeclaration()", "(<testMyTraceSignatureVisitorName>, ", returnType.getDeclaration());
    }
    
    public void testVisitParameterType1() throws Throwable {
        MyTraceSignatureVisitor myTraceSignatureVisitor = new MyTraceSignatureVisitor(100);
        myTraceSignatureVisitor.visitInterfaceBound();
        myTraceSignatureVisitor.visitFormalTypeParameter("testMyTraceSignatureVisitorParam1");
        MyTraceSignatureVisitor result = (MyTraceSignatureVisitor) myTraceSignatureVisitor.visitParameterType();
        assertFalse("myTraceSignatureVisitor.seenFormalParameter", ((Boolean) getPrivateField(myTraceSignatureVisitor, "seenFormalParameter")).booleanValue());
        assertTrue("myTraceSignatureVisitor.seenParameter", ((Boolean) getPrivateField(myTraceSignatureVisitor, "seenParameter")).booleanValue());
        assertSame("result", myTraceSignatureVisitor, result);
        assertEquals("myTraceSignatureVisitor.arrayStack", 0, ((Number) getPrivateField(myTraceSignatureVisitor, "arrayStack")).intValue());
        assertEquals("myTraceSignatureVisitor.getDeclaration()", "<testMyTraceSignatureVisitorParam1>(", myTraceSignatureVisitor.getDeclaration());
    }
    
    public void testVisitParameterType2() throws Throwable {
        MyTraceSignatureVisitor myTraceSignatureVisitor = new MyTraceSignatureVisitor(100);
        myTraceSignatureVisitor.visitParameterType();
        MyTraceSignatureVisitor result = (MyTraceSignatureVisitor) myTraceSignatureVisitor.visitParameterType();
        assertSame("result", myTraceSignatureVisitor, result);
        assertEquals("myTraceSignatureVisitor.arrayStack", 0, ((Number) getPrivateField(myTraceSignatureVisitor, "arrayStack")).intValue());
        assertEquals("myTraceSignatureVisitor.getDeclaration()", "(, ", myTraceSignatureVisitor.getDeclaration());
    }
    
    public void testVisitParameterType3() throws Throwable {
        MyTraceSignatureVisitor myTraceSignatureVisitor = new MyTraceSignatureVisitor(100);
        MyTraceSignatureVisitor result = (MyTraceSignatureVisitor) myTraceSignatureVisitor.visitParameterType();
        assertTrue("myTraceSignatureVisitor.seenParameter", ((Boolean) getPrivateField(myTraceSignatureVisitor, "seenParameter")).booleanValue());
        assertSame("result", myTraceSignatureVisitor, result);
        assertEquals("myTraceSignatureVisitor.arrayStack", 0, ((Number) getPrivateField(myTraceSignatureVisitor, "arrayStack")).intValue());
        assertEquals("myTraceSignatureVisitor.getDeclaration()", "(", myTraceSignatureVisitor.getDeclaration());
    }
    
    public void testVisitReturnType() throws Throwable {
        MyTraceSignatureVisitor myTraceSignatureVisitor = new MyTraceSignatureVisitor(100);
        myTraceSignatureVisitor.visitParameterType();
        myTraceSignatureVisitor.visitInterface();
        myTraceSignatureVisitor.visitFormalTypeParameter("testMyTraceSignatureVisitorParam1");
        MyTraceSignatureVisitor result = (MyTraceSignatureVisitor) myTraceSignatureVisitor.visitReturnType();
        assertFalse("myTraceSignatureVisitor.seenFormalParameter", ((Boolean) getPrivateField(myTraceSignatureVisitor, "seenFormalParameter")).booleanValue());
        assertFalse("myTraceSignatureVisitor.seenParameter", ((Boolean) getPrivateField(myTraceSignatureVisitor, "seenParameter")).booleanValue());
        assertEquals("myTraceSignatureVisitor.getReturnType()", "", myTraceSignatureVisitor.getReturnType());
        assertEquals("result.getDeclaration()", "", result.getDeclaration());
        assertEquals("myTraceSignatureVisitor.getDeclaration()", "(<testMyTraceSignatureVisitorParam1>)", myTraceSignatureVisitor.getDeclaration());
    }
    
    public void testVisitReturnType1() throws Throwable {
        MyTraceSignatureVisitor myTraceSignatureVisitor = new MyTraceSignatureVisitor(100);
        myTraceSignatureVisitor.visitParameterType();
        myTraceSignatureVisitor.visitClassBound();
        MyTraceSignatureVisitor result = (MyTraceSignatureVisitor) myTraceSignatureVisitor.visitReturnType();
        assertFalse("myTraceSignatureVisitor.seenParameter", ((Boolean) getPrivateField(myTraceSignatureVisitor, "seenParameter")).booleanValue());
        assertEquals("myTraceSignatureVisitor.getReturnType()", "", myTraceSignatureVisitor.getReturnType());
        assertEquals("result.getDeclaration()", "", result.getDeclaration());
        assertEquals("myTraceSignatureVisitor.getDeclaration()", "()", myTraceSignatureVisitor.getDeclaration());
    }
    
    public void testVisitReturnType2() throws Throwable {
        MyTraceSignatureVisitor myTraceSignatureVisitor = new MyTraceSignatureVisitor(100);
        myTraceSignatureVisitor.visitInterface();
        myTraceSignatureVisitor.visitFormalTypeParameter("testMyTraceSignatureVisitorParam1");
        MyTraceSignatureVisitor result = (MyTraceSignatureVisitor) myTraceSignatureVisitor.visitReturnType();
        assertFalse("myTraceSignatureVisitor.seenFormalParameter", ((Boolean) getPrivateField(myTraceSignatureVisitor, "seenFormalParameter")).booleanValue());
        assertEquals("myTraceSignatureVisitor.getReturnType()", "", myTraceSignatureVisitor.getReturnType());
        assertEquals("result.getDeclaration()", "", result.getDeclaration());
        assertEquals("myTraceSignatureVisitor.getDeclaration()", "<testMyTraceSignatureVisitorParam1>()", myTraceSignatureVisitor.getDeclaration());
    }
    
    public void testVisitReturnType3() throws Throwable {
        MyTraceSignatureVisitor myTraceSignatureVisitor = new MyTraceSignatureVisitor(100);
        MyTraceSignatureVisitor result = (MyTraceSignatureVisitor) myTraceSignatureVisitor.visitReturnType();
        assertEquals("myTraceSignatureVisitor.getReturnType()", "", myTraceSignatureVisitor.getReturnType());
        assertEquals("result.getDeclaration()", "", result.getDeclaration());
        assertEquals("myTraceSignatureVisitor.getDeclaration()", "()", myTraceSignatureVisitor.getDeclaration());
    }
    
    public void testVisitSuperclass() throws Throwable {
        MyTraceSignatureVisitor myTraceSignatureVisitor = new MyTraceSignatureVisitor(100);
        myTraceSignatureVisitor.visitClassBound();
        myTraceSignatureVisitor.visitFormalTypeParameter("testMyTraceSignatureVisitorParam1");
        MyTraceSignatureVisitor result = (MyTraceSignatureVisitor) myTraceSignatureVisitor.visitSuperclass();
        assertFalse("myTraceSignatureVisitor.seenFormalParameter", ((Boolean) getPrivateField(myTraceSignatureVisitor, "seenFormalParameter")).booleanValue());
        assertSame("result", myTraceSignatureVisitor, result);
        assertEquals("myTraceSignatureVisitor.separator", " extends ", getPrivateField(myTraceSignatureVisitor, "separator"));
        assertEquals("myTraceSignatureVisitor.arrayStack", 0, ((Number) getPrivateField(myTraceSignatureVisitor, "arrayStack")).intValue());
        assertEquals("myTraceSignatureVisitor.getDeclaration()", "<testMyTraceSignatureVisitorParam1>", myTraceSignatureVisitor.getDeclaration());
    }
    
    public void testVisitSuperclass1() throws Throwable {
        MyTraceSignatureVisitor myTraceSignatureVisitor = new MyTraceSignatureVisitor(100);
        MyTraceSignatureVisitor result = (MyTraceSignatureVisitor) myTraceSignatureVisitor.visitSuperclass();
        assertEquals("myTraceSignatureVisitor.separator", " extends ", getPrivateField(myTraceSignatureVisitor, "separator"));
        assertSame("result", myTraceSignatureVisitor, result);
        assertEquals("myTraceSignatureVisitor.arrayStack", 0, ((Number) getPrivateField(myTraceSignatureVisitor, "arrayStack")).intValue());
    }
    
    public void testVisitTypeArgument() throws Throwable {
        MyTraceSignatureVisitor myTraceSignatureVisitor = new MyTraceSignatureVisitor(100);
        myTraceSignatureVisitor.visitTypeArgument();
        assertEquals("myTraceSignatureVisitor.argumentStack", 1, ((Number) getPrivateField(myTraceSignatureVisitor, "argumentStack")).intValue());
        assertEquals("myTraceSignatureVisitor.getDeclaration()", "<?", myTraceSignatureVisitor.getDeclaration());
    }
    
    public void testVisitTypeArgument1() throws Throwable {
        MyTraceSignatureVisitor myTraceSignatureVisitor = new MyTraceSignatureVisitor(100);
        myTraceSignatureVisitor.visitTypeArgument(' ');
        myTraceSignatureVisitor.visitTypeArgument();
        assertEquals("myTraceSignatureVisitor.getDeclaration()", "<, ?", myTraceSignatureVisitor.getDeclaration());
    }
    
    public void testVisitTypeArgument2() throws Throwable {
        MyTraceSignatureVisitor myTraceSignatureVisitor = new MyTraceSignatureVisitor(100);
        myTraceSignatureVisitor.visitArrayType();
        myTraceSignatureVisitor.visitTypeArgument();
        MyTraceSignatureVisitor result = (MyTraceSignatureVisitor) myTraceSignatureVisitor.visitTypeArgument('+');
        assertEquals("myTraceSignatureVisitor.arrayStack", 2, ((Number) getPrivateField(myTraceSignatureVisitor, "arrayStack")).intValue());
        assertSame("result", myTraceSignatureVisitor, result);
        assertEquals("myTraceSignatureVisitor.getDeclaration()", "<?, ? extends ", myTraceSignatureVisitor.getDeclaration());
    }
    
    public void testVisitTypeArgument3() throws Throwable {
        MyTraceSignatureVisitor myTraceSignatureVisitor = new MyTraceSignatureVisitor(100);
        myTraceSignatureVisitor.visitTypeArgument();
        MyTraceSignatureVisitor result = (MyTraceSignatureVisitor) myTraceSignatureVisitor.visitTypeArgument('-');
        assertSame("result", myTraceSignatureVisitor, result);
        assertEquals("myTraceSignatureVisitor.arrayStack", 0, ((Number) getPrivateField(myTraceSignatureVisitor, "arrayStack")).intValue());
        assertEquals("myTraceSignatureVisitor.getDeclaration()", "<?, ? super ", myTraceSignatureVisitor.getDeclaration());
    }
    
    public void testVisitTypeArgument4() throws Throwable {
        MyTraceSignatureVisitor myTraceSignatureVisitor = new MyTraceSignatureVisitor(100);
        myTraceSignatureVisitor.visitParameterType();
        myTraceSignatureVisitor.visitTypeArgument();
        myTraceSignatureVisitor.visitClassBound();
        myTraceSignatureVisitor.visitClassType("testMyTraceSignatureVisitorName");
        myTraceSignatureVisitor.visitEnd();
        MyTraceSignatureVisitor result = (MyTraceSignatureVisitor) myTraceSignatureVisitor.visitTypeArgument('*');
        assertSame("result", myTraceSignatureVisitor, result);
        assertEquals("myTraceSignatureVisitor.arrayStack", 0, ((Number) getPrivateField(myTraceSignatureVisitor, "arrayStack")).intValue());
        assertEquals("myTraceSignatureVisitor.getDeclaration()", "(<? extends testMyTraceSignatureVisitorName, ", myTraceSignatureVisitor.getDeclaration());
    }
    
    public void testVisitTypeArgument5() throws Throwable {
        MyTraceSignatureVisitor myTraceSignatureVisitor = new MyTraceSignatureVisitor(100);
        MyTraceSignatureVisitor result = (MyTraceSignatureVisitor) myTraceSignatureVisitor.visitTypeArgument('.');
        assertEquals("myTraceSignatureVisitor.argumentStack", 1, ((Number) getPrivateField(myTraceSignatureVisitor, "argumentStack")).intValue());
        assertEquals("result.getDeclaration()", "<", result.getDeclaration());
        assertEquals("myTraceSignatureVisitor.arrayStack", 0, ((Number) getPrivateField(myTraceSignatureVisitor, "arrayStack")).intValue());
        assertEquals("myTraceSignatureVisitor.getDeclaration()", "<", myTraceSignatureVisitor.getDeclaration());
    }
    
    public void testVisitTypeArgument6() throws Throwable {
        MyTraceSignatureVisitor myTraceSignatureVisitor = (MyTraceSignatureVisitor) callPrivateMethod("org.crap4j.complexity.MyTraceSignatureVisitor", "<init>", new Class[] {StringBuffer.class}, null, new Object[] {new StringBuffer("testMyTraceSignatureVisitorParam1")});
        MyTraceSignatureVisitor result = (MyTraceSignatureVisitor) myTraceSignatureVisitor.visitTypeArgument(',');
        assertEquals("myTraceSignatureVisitor.argumentStack", 1, ((Number) getPrivateField(myTraceSignatureVisitor, "argumentStack")).intValue());
        assertSame("result", myTraceSignatureVisitor, result);
        assertEquals("myTraceSignatureVisitor.arrayStack", 0, ((Number) getPrivateField(myTraceSignatureVisitor, "arrayStack")).intValue());
        assertEquals("myTraceSignatureVisitor.getDeclaration()", "testMyTraceSignatureVisitorParam1<", myTraceSignatureVisitor.getDeclaration());
    }
    
    public void testVisitTypeArgument7() throws Throwable {
        MyTraceSignatureVisitor myTraceSignatureVisitor = (MyTraceSignatureVisitor) callPrivateMethod("org.crap4j.complexity.MyTraceSignatureVisitor", "<init>", new Class[] {StringBuffer.class}, null, new Object[] {new StringBuffer()});
        MyTraceSignatureVisitor result = (MyTraceSignatureVisitor) myTraceSignatureVisitor.visitTypeArgument('-');
        assertEquals("myTraceSignatureVisitor.argumentStack", 1, ((Number) getPrivateField(myTraceSignatureVisitor, "argumentStack")).intValue());
        assertSame("result", myTraceSignatureVisitor, result);
        assertEquals("myTraceSignatureVisitor.arrayStack", 0, ((Number) getPrivateField(myTraceSignatureVisitor, "arrayStack")).intValue());
        assertEquals("myTraceSignatureVisitor.getDeclaration()", "<? super ", myTraceSignatureVisitor.getDeclaration());
    }
    
    public void testVisitTypeArgument8() throws Throwable {
        MyTraceSignatureVisitor myTraceSignatureVisitor = new MyTraceSignatureVisitor(100);
        MyTraceSignatureVisitor result = (MyTraceSignatureVisitor) myTraceSignatureVisitor.visitTypeArgument('+');
        assertEquals("myTraceSignatureVisitor.argumentStack", 1, ((Number) getPrivateField(myTraceSignatureVisitor, "argumentStack")).intValue());
        assertSame("result", myTraceSignatureVisitor, result);
        assertEquals("myTraceSignatureVisitor.arrayStack", 0, ((Number) getPrivateField(myTraceSignatureVisitor, "arrayStack")).intValue());
        assertEquals("myTraceSignatureVisitor.getDeclaration()", "<? extends ", myTraceSignatureVisitor.getDeclaration());
    }
    
    public void testVisitTypeVariable() throws Throwable {
        MyTraceSignatureVisitor myTraceSignatureVisitor = new MyTraceSignatureVisitor(100);
        myTraceSignatureVisitor.visitArrayType();
        myTraceSignatureVisitor.visitTypeVariable("testMyTraceSignatureVisitorParam1");
        assertEquals("myTraceSignatureVisitor.arrayStack", 0, ((Number) getPrivateField(myTraceSignatureVisitor, "arrayStack")).intValue());
        assertEquals("myTraceSignatureVisitor.getDeclaration()", "testMyTraceSignatureVisitorParam1[]", myTraceSignatureVisitor.getDeclaration());
    }
    
    public void testVisitTypeVariable1() throws Throwable {
        MyTraceSignatureVisitor myTraceSignatureVisitor = (MyTraceSignatureVisitor) callPrivateMethod("org.crap4j.complexity.MyTraceSignatureVisitor", "<init>", new Class[] {StringBuffer.class}, null, new Object[] {new StringBuffer("testMyTraceSignatureVisitorParam1")});
        myTraceSignatureVisitor.visitTypeVariable("testMyTraceSignatureVisitorName");
        assertEquals("myTraceSignatureVisitor.arrayStack", 0, ((Number) getPrivateField(myTraceSignatureVisitor, "arrayStack")).intValue());
        assertEquals("myTraceSignatureVisitor.getDeclaration()", "testMyTraceSignatureVisitorParam1testMyTraceSignatureVisitorName", myTraceSignatureVisitor.getDeclaration());
    }
    
    public void testEndTypeThrowsNullPointerException() throws Throwable {
        MyTraceSignatureVisitor myTraceSignatureVisitor = (MyTraceSignatureVisitor) callPrivateMethod("org.crap4j.complexity.MyTraceSignatureVisitor", "<init>", new Class[] {StringBuffer.class}, null, new Object[] {null});
        myTraceSignatureVisitor.visitArrayType();
        try {
            callPrivateMethod("org.crap4j.complexity.MyTraceSignatureVisitor", "endType", new Class[] {}, myTraceSignatureVisitor, new Object[] {});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertEquals("myTraceSignatureVisitor.arrayStack", 0, ((Number) getPrivateField(myTraceSignatureVisitor, "arrayStack")).intValue());
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(MyTraceSignatureVisitor.class, ex);
            assertNull("myTraceSignatureVisitor.declaration", getPrivateField(myTraceSignatureVisitor, "declaration"));
        }
    }
    
    public void testGetDeclarationThrowsNullPointerException() throws Throwable {
        MyTraceSignatureVisitor myTraceSignatureVisitor = (MyTraceSignatureVisitor) callPrivateMethod("org.crap4j.complexity.MyTraceSignatureVisitor", "<init>", new Class[] {StringBuffer.class}, null, new Object[] {null});
        try {
            myTraceSignatureVisitor.getDeclaration();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(MyTraceSignatureVisitor.class, ex);
        }
    }
    
    public void testVisitBaseTypeThrowsNullPointerException() throws Throwable {
        MyTraceSignatureVisitor myTraceSignatureVisitor = (MyTraceSignatureVisitor) callPrivateMethod("org.crap4j.complexity.MyTraceSignatureVisitor", "<init>", new Class[] {StringBuffer.class}, null, new Object[] {null});
        try {
            myTraceSignatureVisitor.visitBaseType('J');
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(MyTraceSignatureVisitor.class, ex);
            assertNull("myTraceSignatureVisitor.declaration", getPrivateField(myTraceSignatureVisitor, "declaration"));
            assertEquals("myTraceSignatureVisitor.arrayStack", 0, ((Number) getPrivateField(myTraceSignatureVisitor, "arrayStack")).intValue());
        }
    }
    
    public void testVisitBaseTypeThrowsNullPointerException1() throws Throwable {
        MyTraceSignatureVisitor myTraceSignatureVisitor = (MyTraceSignatureVisitor) callPrivateMethod("org.crap4j.complexity.MyTraceSignatureVisitor", "<init>", new Class[] {StringBuffer.class}, null, new Object[] {null});
        try {
            myTraceSignatureVisitor.visitBaseType('F');
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(MyTraceSignatureVisitor.class, ex);
            assertNull("myTraceSignatureVisitor.declaration", getPrivateField(myTraceSignatureVisitor, "declaration"));
            assertEquals("myTraceSignatureVisitor.arrayStack", 0, ((Number) getPrivateField(myTraceSignatureVisitor, "arrayStack")).intValue());
        }
    }
    
    public void testVisitBaseTypeThrowsNullPointerException2() throws Throwable {
        MyTraceSignatureVisitor myTraceSignatureVisitor = (MyTraceSignatureVisitor) callPrivateMethod("org.crap4j.complexity.MyTraceSignatureVisitor", "<init>", new Class[] {StringBuffer.class}, null, new Object[] {null});
        try {
            myTraceSignatureVisitor.visitBaseType('I');
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(MyTraceSignatureVisitor.class, ex);
            assertNull("myTraceSignatureVisitor.declaration", getPrivateField(myTraceSignatureVisitor, "declaration"));
            assertEquals("myTraceSignatureVisitor.arrayStack", 0, ((Number) getPrivateField(myTraceSignatureVisitor, "arrayStack")).intValue());
        }
    }
    
    public void testVisitBaseTypeThrowsNullPointerException3() throws Throwable {
        MyTraceSignatureVisitor myTraceSignatureVisitor = (MyTraceSignatureVisitor) callPrivateMethod("org.crap4j.complexity.MyTraceSignatureVisitor", "<init>", new Class[] {StringBuffer.class}, null, new Object[] {null});
        try {
            myTraceSignatureVisitor.visitBaseType('C');
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(MyTraceSignatureVisitor.class, ex);
            assertNull("myTraceSignatureVisitor.declaration", getPrivateField(myTraceSignatureVisitor, "declaration"));
            assertEquals("myTraceSignatureVisitor.arrayStack", 0, ((Number) getPrivateField(myTraceSignatureVisitor, "arrayStack")).intValue());
        }
    }
    
    public void testVisitBaseTypeThrowsNullPointerException4() throws Throwable {
        MyTraceSignatureVisitor myTraceSignatureVisitor = (MyTraceSignatureVisitor) callPrivateMethod("org.crap4j.complexity.MyTraceSignatureVisitor", "<init>", new Class[] {StringBuffer.class}, null, new Object[] {null});
        try {
            myTraceSignatureVisitor.visitBaseType(' ');
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(MyTraceSignatureVisitor.class, ex);
            assertNull("myTraceSignatureVisitor.declaration", getPrivateField(myTraceSignatureVisitor, "declaration"));
            assertEquals("myTraceSignatureVisitor.arrayStack", 0, ((Number) getPrivateField(myTraceSignatureVisitor, "arrayStack")).intValue());
        }
    }
    
    public void testVisitBaseTypeThrowsNullPointerException5() throws Throwable {
        MyTraceSignatureVisitor myTraceSignatureVisitor = (MyTraceSignatureVisitor) callPrivateMethod("org.crap4j.complexity.MyTraceSignatureVisitor", "<init>", new Class[] {StringBuffer.class}, null, new Object[] {null});
        try {
            myTraceSignatureVisitor.visitBaseType('V');
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(MyTraceSignatureVisitor.class, ex);
            assertNull("myTraceSignatureVisitor.declaration", getPrivateField(myTraceSignatureVisitor, "declaration"));
            assertEquals("myTraceSignatureVisitor.arrayStack", 0, ((Number) getPrivateField(myTraceSignatureVisitor, "arrayStack")).intValue());
        }
    }
    
    public void testVisitBaseTypeThrowsNullPointerException6() throws Throwable {
        MyTraceSignatureVisitor myTraceSignatureVisitor = (MyTraceSignatureVisitor) callPrivateMethod("org.crap4j.complexity.MyTraceSignatureVisitor", "<init>", new Class[] {StringBuffer.class}, null, new Object[] {null});
        try {
            myTraceSignatureVisitor.visitBaseType('B');
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(MyTraceSignatureVisitor.class, ex);
            assertNull("myTraceSignatureVisitor.declaration", getPrivateField(myTraceSignatureVisitor, "declaration"));
            assertEquals("myTraceSignatureVisitor.arrayStack", 0, ((Number) getPrivateField(myTraceSignatureVisitor, "arrayStack")).intValue());
        }
    }
    
    public void testVisitBaseTypeThrowsNullPointerException7() throws Throwable {
        MyTraceSignatureVisitor myTraceSignatureVisitor = (MyTraceSignatureVisitor) callPrivateMethod("org.crap4j.complexity.MyTraceSignatureVisitor", "<init>", new Class[] {StringBuffer.class}, null, new Object[] {null});
        try {
            myTraceSignatureVisitor.visitBaseType('Z');
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(MyTraceSignatureVisitor.class, ex);
            assertNull("myTraceSignatureVisitor.declaration", getPrivateField(myTraceSignatureVisitor, "declaration"));
            assertEquals("myTraceSignatureVisitor.arrayStack", 0, ((Number) getPrivateField(myTraceSignatureVisitor, "arrayStack")).intValue());
        }
    }
    
    public void testVisitBaseTypeThrowsNullPointerException8() throws Throwable {
        MyTraceSignatureVisitor myTraceSignatureVisitor = (MyTraceSignatureVisitor) callPrivateMethod("org.crap4j.complexity.MyTraceSignatureVisitor", "<init>", new Class[] {StringBuffer.class}, null, new Object[] {null});
        try {
            myTraceSignatureVisitor.visitBaseType('S');
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(MyTraceSignatureVisitor.class, ex);
            assertNull("myTraceSignatureVisitor.declaration", getPrivateField(myTraceSignatureVisitor, "declaration"));
            assertEquals("myTraceSignatureVisitor.arrayStack", 0, ((Number) getPrivateField(myTraceSignatureVisitor, "arrayStack")).intValue());
        }
    }
    
    public void testVisitClassTypeThrowsNullPointerException() throws Throwable {
        MyTraceSignatureVisitor myTraceSignatureVisitor = (MyTraceSignatureVisitor) callPrivateMethod("org.crap4j.complexity.MyTraceSignatureVisitor", "<init>", new Class[] {StringBuffer.class}, null, new Object[] {null});
        try {
            myTraceSignatureVisitor.visitClassType("testMyTraceSignatureVisitorName");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(MyTraceSignatureVisitor.class, ex);
            assertNull("myTraceSignatureVisitor.declaration", getPrivateField(myTraceSignatureVisitor, "declaration"));
            assertEquals("myTraceSignatureVisitor.separator", "", getPrivateField(myTraceSignatureVisitor, "separator"));
            assertEquals("myTraceSignatureVisitor.argumentStack", 0, ((Number) getPrivateField(myTraceSignatureVisitor, "argumentStack")).intValue());
        }
    }
    
    public void testVisitFormalTypeParameterThrowsNullPointerException() throws Throwable {
        MyTraceSignatureVisitor myTraceSignatureVisitor = (MyTraceSignatureVisitor) callPrivateMethod("org.crap4j.complexity.MyTraceSignatureVisitor", "<init>", new Class[] {StringBuffer.class}, null, new Object[] {null});
        try {
            myTraceSignatureVisitor.visitFormalTypeParameter("testMyTraceSignatureVisitorName");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(MyTraceSignatureVisitor.class, ex);
            assertFalse("myTraceSignatureVisitor.seenFormalParameter", ((Boolean) getPrivateField(myTraceSignatureVisitor, "seenFormalParameter")).booleanValue());
            assertFalse("myTraceSignatureVisitor.seenInterfaceBound", ((Boolean) getPrivateField(myTraceSignatureVisitor, "seenInterfaceBound")).booleanValue());
        }
    }
    
    public void testVisitInnerClassTypeThrowsNullPointerException() throws Throwable {
        MyTraceSignatureVisitor myTraceSignatureVisitor = (MyTraceSignatureVisitor) callPrivateMethod("org.crap4j.complexity.MyTraceSignatureVisitor", "<init>", new Class[] {StringBuffer.class}, null, new Object[] {null});
        try {
            myTraceSignatureVisitor.visitInnerClassType("testMyTraceSignatureVisitorName");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(MyTraceSignatureVisitor.class, ex);
            assertEquals("myTraceSignatureVisitor.separator", "", getPrivateField(myTraceSignatureVisitor, "separator"));
            assertNull("myTraceSignatureVisitor.declaration", getPrivateField(myTraceSignatureVisitor, "declaration"));
            assertEquals("myTraceSignatureVisitor.argumentStack", 0, ((Number) getPrivateField(myTraceSignatureVisitor, "argumentStack")).intValue());
        }
    }
    
    public void testVisitInnerClassTypeThrowsNullPointerException1() throws Throwable {
        MyTraceSignatureVisitor myTraceSignatureVisitor = (MyTraceSignatureVisitor) callPrivateMethod("org.crap4j.complexity.MyTraceSignatureVisitor", "<init>", new Class[] {StringBuffer.class}, null, new Object[] {new StringBuffer("testMyTraceSignatureVisitorParam1")});
        myTraceSignatureVisitor.visitTypeArgument(' ');
        myTraceSignatureVisitor.visitClassType("testMyTraceSignatureVisitorName");
        myTraceSignatureVisitor.visitArrayType();
        myTraceSignatureVisitor.visitEnd();
        myTraceSignatureVisitor.visitParameterType();
        try {
            myTraceSignatureVisitor.visitInnerClassType(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertEquals("myTraceSignatureVisitor.argumentStack", 0, ((Number) getPrivateField(myTraceSignatureVisitor, "argumentStack")).intValue());
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(MyTraceSignatureVisitor.class, ex);
            assertEquals("myTraceSignatureVisitor.separator", "", getPrivateField(myTraceSignatureVisitor, "separator"));
            assertEquals("myTraceSignatureVisitor.getDeclaration()", "testMyTraceSignatureVisitorParam1<testMyTraceSignatureVisitorName[](>.", myTraceSignatureVisitor.getDeclaration());
        }
    }
    
    public void testVisitInnerClassTypeThrowsNullPointerException2() throws Throwable {
        MyTraceSignatureVisitor myTraceSignatureVisitor = (MyTraceSignatureVisitor) callPrivateMethod("org.crap4j.complexity.MyTraceSignatureVisitor", "<init>", new Class[] {StringBuffer.class}, null, new Object[] {new StringBuffer()});
        try {
            myTraceSignatureVisitor.visitInnerClassType(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(MyTraceSignatureVisitor.class, ex);
            assertEquals("myTraceSignatureVisitor.separator", "", getPrivateField(myTraceSignatureVisitor, "separator"));
            assertEquals("myTraceSignatureVisitor.getDeclaration()", ".", myTraceSignatureVisitor.getDeclaration());
            assertEquals("myTraceSignatureVisitor.argumentStack", 0, ((Number) getPrivateField(myTraceSignatureVisitor, "argumentStack")).intValue());
        }
    }
    
    public void testVisitParameterTypeThrowsNullPointerException() throws Throwable {
        MyTraceSignatureVisitor myTraceSignatureVisitor = (MyTraceSignatureVisitor) callPrivateMethod("org.crap4j.complexity.MyTraceSignatureVisitor", "<init>", new Class[] {StringBuffer.class}, null, new Object[] {null});
        try {
            myTraceSignatureVisitor.visitParameterType();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertTrue("myTraceSignatureVisitor.seenParameter", ((Boolean) getPrivateField(myTraceSignatureVisitor, "seenParameter")).booleanValue());
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(MyTraceSignatureVisitor.class, ex);
            assertNull("myTraceSignatureVisitor.declaration", getPrivateField(myTraceSignatureVisitor, "declaration"));
            assertFalse("myTraceSignatureVisitor.seenFormalParameter", ((Boolean) getPrivateField(myTraceSignatureVisitor, "seenFormalParameter")).booleanValue());
            assertEquals("myTraceSignatureVisitor.arrayStack", 0, ((Number) getPrivateField(myTraceSignatureVisitor, "arrayStack")).intValue());
        }
    }
    
    public void testVisitReturnTypeThrowsNullPointerException() throws Throwable {
        MyTraceSignatureVisitor myTraceSignatureVisitor = (MyTraceSignatureVisitor) callPrivateMethod("org.crap4j.complexity.MyTraceSignatureVisitor", "<init>", new Class[] {StringBuffer.class}, null, new Object[] {null});
        try {
            myTraceSignatureVisitor.visitReturnType();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(MyTraceSignatureVisitor.class, ex);
            assertNull("myTraceSignatureVisitor.declaration", getPrivateField(myTraceSignatureVisitor, "declaration"));
            assertFalse("myTraceSignatureVisitor.seenFormalParameter", ((Boolean) getPrivateField(myTraceSignatureVisitor, "seenFormalParameter")).booleanValue());
            assertNull("myTraceSignatureVisitor.getReturnType()", myTraceSignatureVisitor.getReturnType());
            assertFalse("myTraceSignatureVisitor.seenParameter", ((Boolean) getPrivateField(myTraceSignatureVisitor, "seenParameter")).booleanValue());
        }
    }
    
    public void testVisitTypeArgumentThrowsNullPointerException() throws Throwable {
        MyTraceSignatureVisitor myTraceSignatureVisitor = (MyTraceSignatureVisitor) callPrivateMethod("org.crap4j.complexity.MyTraceSignatureVisitor", "<init>", new Class[] {StringBuffer.class}, null, new Object[] {null});
        try {
            myTraceSignatureVisitor.visitTypeArgument();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertEquals("myTraceSignatureVisitor.argumentStack", 1, ((Number) getPrivateField(myTraceSignatureVisitor, "argumentStack")).intValue());
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(MyTraceSignatureVisitor.class, ex);
            assertNull("myTraceSignatureVisitor.declaration", getPrivateField(myTraceSignatureVisitor, "declaration"));
        }
    }
    
    public void testVisitTypeArgumentThrowsNullPointerException1() throws Throwable {
        MyTraceSignatureVisitor myTraceSignatureVisitor = (MyTraceSignatureVisitor) callPrivateMethod("org.crap4j.complexity.MyTraceSignatureVisitor", "<init>", new Class[] {StringBuffer.class}, null, new Object[] {null});
        try {
            myTraceSignatureVisitor.visitTypeArgument(' ');
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertEquals("myTraceSignatureVisitor.argumentStack", 1, ((Number) getPrivateField(myTraceSignatureVisitor, "argumentStack")).intValue());
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(MyTraceSignatureVisitor.class, ex);
            assertNull("myTraceSignatureVisitor.declaration", getPrivateField(myTraceSignatureVisitor, "declaration"));
            assertEquals("myTraceSignatureVisitor.arrayStack", 0, ((Number) getPrivateField(myTraceSignatureVisitor, "arrayStack")).intValue());
        }
    }
    
    public void testVisitTypeVariableThrowsNullPointerException() throws Throwable {
        MyTraceSignatureVisitor myTraceSignatureVisitor = (MyTraceSignatureVisitor) callPrivateMethod("org.crap4j.complexity.MyTraceSignatureVisitor", "<init>", new Class[] {StringBuffer.class}, null, new Object[] {null});
        try {
            myTraceSignatureVisitor.visitTypeVariable("testMyTraceSignatureVisitorName");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(MyTraceSignatureVisitor.class, ex);
            assertNull("myTraceSignatureVisitor.declaration", getPrivateField(myTraceSignatureVisitor, "declaration"));
            assertEquals("myTraceSignatureVisitor.arrayStack", 0, ((Number) getPrivateField(myTraceSignatureVisitor, "arrayStack")).intValue());
        }
    }
}

