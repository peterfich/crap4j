/**
 * Generated by Agitar build: JUnitFactory Version 2.1.1.000614 (Build date: Nov 19, 2007) [2.1.1.000614]
 * JDK Version: 1.5.0_11
 *
 * Generated on Nov 27, 2007 4:10:12 PM
 * Time to generate: 01:33.769 seconds
 *
 */

package org.crap4j;

import com.agitar.lib.junit.AgitarTestCase;
import com.agitar.lib.mockingbird.Mockingbird;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.text.DateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collections;
import java.util.Iterator;
import java.util.List;
import org.crap4j.util.FileUtil;
import org.crap4j.util.XmlUtil;

public class CrapProjectAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return CrapProject.class;
    }
    
    public void testConstructor() throws Throwable {
        CrapProject crapProject = new CrapProject("projectDir", new ArrayList(100), new ArrayList(1000), new ArrayList(0), new ArrayList(1), "");
        assertEquals("crapProject.outputDir()", "projectDir/agitar/reports/crap4j", crapProject.outputDir());
        assertEquals("crapProject.testClassDirs().size()", 0, crapProject.testClassDirs().size());
        assertEquals("crapProject.getProjectId()", 1195109738131L, crapProject.getProjectId().longValue());
        assertEquals("crapProject.libClasspaths().size()", 0, crapProject.libClasspaths().size());
        assertEquals("crapProject.sourceDirs().size()", 0, crapProject.sourceDirs().size());
        assertEquals("crapProject.classDirs().size()", 0, crapProject.classDirs().size());
        assertEquals("crapProject.projectDir()", "projectDir", crapProject.projectDir());
    }
    
    public void testConstructor1() throws Throwable {
        List libClasspath = new ArrayList(100);
        libClasspath.add("testString");
        CrapProject crapProject = new CrapProject("projectDir", libClasspath, new ArrayList(1000), new ArrayList(0), new ArrayList(1), "");
        assertEquals("crapProject.outputDir()", "projectDir/agitar/reports/crap4j", crapProject.outputDir());
        assertEquals("crapProject.testClassDirs().size()", 0, crapProject.testClassDirs().size());
        assertEquals("crapProject.getProjectId()", 1195109738131L, crapProject.getProjectId().longValue());
        assertEquals("crapProject.libClasspaths().size()", 1, crapProject.libClasspaths().size());
        assertEquals("crapProject.sourceDirs().size()", 0, crapProject.sourceDirs().size());
        assertEquals("crapProject.classDirs().size()", 0, crapProject.classDirs().size());
        assertEquals("crapProject.projectDir()", "projectDir", crapProject.projectDir());
    }
    
    public void testConstructor2() throws Throwable {
        List list = (List) Mockingbird.getProxyObject(List.class);
        List list2 = (List) Mockingbird.getProxyObject(List.class);
        List list3 = (List) Mockingbird.getProxyObject(List.class);
        List list4 = (List) Mockingbird.getProxyObject(List.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Iterator iterator2 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Iterator iterator3 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Iterator iterator4 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(CrapProject.class, "validateNonBlank", "(java.lang.String,java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(CrapProject.class, "validateFileExists", "(java.lang.String)void", null, 1);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", Mockingbird.getProxyObject(ArrayList.class));
        Mockingbird.setReturnValue(list.iterator(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", Mockingbird.getProxyObject(ArrayList.class));
        Mockingbird.setReturnValue(list2.iterator(), iterator2);
        Mockingbird.setReturnValue(iterator2.hasNext(), false);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", Mockingbird.getProxyObject(ArrayList.class));
        Mockingbird.setReturnValue(list3.iterator(), iterator3);
        Mockingbird.setReturnValue(iterator3.hasNext(), false);
        ArrayList arrayList = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList);
        Mockingbird.setReturnValue(list4.iterator(), iterator4);
        Mockingbird.setReturnValue(iterator4.hasNext(), true);
        Mockingbird.setReturnValue(iterator4.next(), "");
        Boolean boolean2 = Boolean.TRUE;
        Mockingbird.setReturnValue(true, FileUtil.class, "isAbsolute", "(java.lang.String)boolean", boolean2, 1);
        Boolean boolean3 = Boolean.FALSE;
        Mockingbird.setReturnValue(false, arrayList, "add", "(java.lang.Object)boolean", boolean3, 1);
        Mockingbird.setReturnValue(iterator4.hasNext(), true);
        Mockingbird.setReturnValue(iterator4.next(), "");
        Mockingbird.setReturnValue(true, FileUtil.class, "isAbsolute", "(java.lang.String)boolean", boolean2, 1);
        Mockingbird.setReturnValue(false, arrayList, "add", "(java.lang.Object)boolean", boolean3, 1);
        Mockingbird.setReturnValue(iterator4.hasNext(), true);
        Mockingbird.setReturnValue(iterator4.next(), null);
        Mockingbird.setReturnValue(iterator4.hasNext(), true);
        Mockingbird.setReturnValue(iterator4.next(), "");
        Mockingbird.setReturnValue(true, FileUtil.class, "isAbsolute", "(java.lang.String)boolean", boolean3, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(CrapProject.class, true), "makeFilePathAbsoluteWithProject", "(java.lang.String)java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, arrayList, "add", "(java.lang.Object)boolean", boolean3, 1);
        Mockingbird.setReturnValue(iterator4.hasNext(), true);
        Mockingbird.setReturnValue(iterator4.next(), "");
        Mockingbird.setReturnValue(true, FileUtil.class, "isAbsolute", "(java.lang.String)boolean", boolean3, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(CrapProject.class, true), "makeFilePathAbsoluteWithProject", "(java.lang.String)java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, arrayList, "add", "(java.lang.Object)boolean", boolean3, 1);
        Mockingbird.setReturnValue(iterator4.hasNext(), true);
        Mockingbird.setReturnValue(iterator4.next(), null);
        Mockingbird.setReturnValue(iterator4.hasNext(), false);
        Mockingbird.setReturnValue(true, FileUtil.class, "isAbsolute", "(java.lang.String)boolean", boolean3, 1);
        Mockingbird.setReturnValue(true, FileUtil.class, "joinPath", "(java.lang.String,java.lang.String)java.lang.String", "", 1);
        Mockingbird.setReturnValue(true, FileUtil.class, "ensureDirectory", "(java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(CrapProject.class, true), "loadProjectId", "()java.lang.Long", null, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(CrapProject.class, true), "makeProjectId", "()java.lang.Long", null, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(CrapProject.class, true), "writeProjectId", "(java.lang.Long)void", null, 1);
        Mockingbird.enterTestMode();
        CrapProject crapProject = new CrapProject("", list, list2, list3, list4, "A");
        assertEquals("crapProject.outputDir()", "", crapProject.outputDir());
        assertNotNull("crapProject.testClassDirs()", crapProject.testClassDirs());
        assertNull("crapProject.getProjectId()", crapProject.getProjectId());
        assertNotNull("crapProject.libClasspaths()", crapProject.libClasspaths());
        assertNotNull("crapProject.sourceDirs()", crapProject.sourceDirs());
        assertNotNull("crapProject.classDirs()", crapProject.classDirs());
        assertEquals("crapProject.projectDir()", "", crapProject.projectDir());
    }
    
    public void testConstructor3() throws Throwable {
        List list = (List) Mockingbird.getProxyObject(List.class);
        List list2 = (List) Mockingbird.getProxyObject(List.class);
        List list3 = (List) Mockingbird.getProxyObject(List.class);
        List list4 = (List) Mockingbird.getProxyObject(List.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Iterator iterator2 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Iterator iterator3 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Iterator iterator4 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(CrapProject.class, "validateNonBlank", "(java.lang.String,java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(CrapProject.class, "validateFileExists", "(java.lang.String)void", null, 1);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", Mockingbird.getProxyObject(ArrayList.class));
        Mockingbird.setReturnValue(list.iterator(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", Mockingbird.getProxyObject(ArrayList.class));
        Mockingbird.setReturnValue(list2.iterator(), iterator2);
        Mockingbird.setReturnValue(iterator2.hasNext(), false);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", Mockingbird.getProxyObject(ArrayList.class));
        Mockingbird.setReturnValue(list3.iterator(), iterator3);
        Mockingbird.setReturnValue(iterator3.hasNext(), false);
        ArrayList arrayList = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList);
        Mockingbird.setReturnValue(list4.iterator(), iterator4);
        Mockingbird.setReturnValue(iterator4.hasNext(), true);
        Mockingbird.setReturnValue(iterator4.next(), "");
        Boolean boolean2 = Boolean.TRUE;
        Mockingbird.setReturnValue(true, FileUtil.class, "isAbsolute", "(java.lang.String)boolean", boolean2, 1);
        Boolean boolean3 = Boolean.FALSE;
        Mockingbird.setReturnValue(false, arrayList, "add", "(java.lang.Object)boolean", boolean3, 1);
        Mockingbird.setReturnValue(iterator4.hasNext(), true);
        Mockingbird.setReturnValue(iterator4.next(), "");
        Mockingbird.setReturnValue(true, FileUtil.class, "isAbsolute", "(java.lang.String)boolean", boolean2, 1);
        Mockingbird.setReturnValue(false, arrayList, "add", "(java.lang.Object)boolean", boolean3, 1);
        Mockingbird.setReturnValue(iterator4.hasNext(), true);
        Mockingbird.setReturnValue(iterator4.next(), null);
        Mockingbird.setReturnValue(iterator4.hasNext(), true);
        Mockingbird.setReturnValue(iterator4.next(), null);
        Mockingbird.setReturnValue(iterator4.hasNext(), true);
        Mockingbird.setReturnValue(iterator4.next(), "");
        Mockingbird.setReturnValue(true, FileUtil.class, "isAbsolute", "(java.lang.String)boolean", boolean3, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(CrapProject.class, true), "makeFilePathAbsoluteWithProject", "(java.lang.String)java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, arrayList, "add", "(java.lang.Object)boolean", boolean3, 1);
        Mockingbird.setReturnValue(iterator4.hasNext(), true);
        Mockingbird.setReturnValue(iterator4.next(), "");
        Mockingbird.setReturnValue(true, FileUtil.class, "isAbsolute", "(java.lang.String)boolean", boolean3, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(CrapProject.class, true), "makeFilePathAbsoluteWithProject", "(java.lang.String)java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, arrayList, "add", "(java.lang.Object)boolean", boolean3, 1);
        Mockingbird.setReturnValue(iterator4.hasNext(), false);
        Mockingbird.setReturnValue(true, FileUtil.class, "isAbsolute", "(java.lang.String)boolean", boolean2, 1);
        Mockingbird.setReturnValue(true, FileUtil.class, "ensureDirectory", "(java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(CrapProject.class, true), "loadProjectId", "()java.lang.Long", null, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(CrapProject.class, true), "makeProjectId", "()java.lang.Long", null, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(CrapProject.class, true), "writeProjectId", "(java.lang.Long)void", null, 1);
        Mockingbird.enterTestMode();
        CrapProject crapProject = new CrapProject("", list, list2, list3, list4, "X");
        assertEquals("crapProject.outputDir()", "X", crapProject.outputDir());
        assertNotNull("crapProject.testClassDirs()", crapProject.testClassDirs());
        assertNull("crapProject.getProjectId()", crapProject.getProjectId());
        assertNotNull("crapProject.libClasspaths()", crapProject.libClasspaths());
        assertNotNull("crapProject.sourceDirs()", crapProject.sourceDirs());
        assertNotNull("crapProject.classDirs()", crapProject.classDirs());
        assertEquals("crapProject.projectDir()", "", crapProject.projectDir());
    }
    
    public void testConstructor4() throws Throwable {
        List list = (List) Mockingbird.getProxyObject(List.class);
        List list2 = (List) Mockingbird.getProxyObject(List.class);
        List list3 = (List) Mockingbird.getProxyObject(List.class);
        List list4 = (List) Mockingbird.getProxyObject(List.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Iterator iterator2 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Iterator iterator3 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Iterator iterator4 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(CrapProject.class, "validateNonBlank", "(java.lang.String,java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(CrapProject.class, "validateFileExists", "(java.lang.String)void", null, 1);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", Mockingbird.getProxyObject(ArrayList.class));
        Mockingbird.setReturnValue(list.iterator(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", Mockingbird.getProxyObject(ArrayList.class));
        Mockingbird.setReturnValue(list2.iterator(), iterator2);
        Mockingbird.setReturnValue(iterator2.hasNext(), false);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", Mockingbird.getProxyObject(ArrayList.class));
        Mockingbird.setReturnValue(list3.iterator(), iterator3);
        Mockingbird.setReturnValue(iterator3.hasNext(), false);
        ArrayList arrayList = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList);
        Mockingbird.setReturnValue(list4.iterator(), iterator4);
        Mockingbird.setReturnValue(iterator4.hasNext(), true);
        Mockingbird.setReturnValue(iterator4.next(), "");
        Boolean boolean2 = Boolean.TRUE;
        Mockingbird.setReturnValue(true, FileUtil.class, "isAbsolute", "(java.lang.String)boolean", boolean2, 1);
        Mockingbird.setReturnValue(arrayList.add(""), false);
        Mockingbird.setReturnValue(iterator4.hasNext(), true);
        Mockingbird.setReturnValue(iterator4.next(), "");
        Mockingbird.setReturnValue(true, FileUtil.class, "isAbsolute", "(java.lang.String)boolean", boolean2, 1);
        Boolean boolean3 = Boolean.FALSE;
        Mockingbird.setReturnValue(false, arrayList, "add", "(java.lang.Object)boolean", boolean3, 1);
        Mockingbird.setReturnValue(iterator4.hasNext(), true);
        Mockingbird.setReturnValue(iterator4.next(), null);
        Mockingbird.setReturnValue(iterator4.hasNext(), true);
        Mockingbird.setReturnValue(iterator4.next(), null);
        Mockingbird.setReturnValue(iterator4.hasNext(), true);
        Mockingbird.setReturnValue(iterator4.next(), "");
        Mockingbird.setReturnValue(true, FileUtil.class, "isAbsolute", "(java.lang.String)boolean", boolean3, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(CrapProject.class, true), "makeFilePathAbsoluteWithProject", "(java.lang.String)java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, arrayList, "add", "(java.lang.Object)boolean", boolean3, 1);
        Mockingbird.setReturnValue(iterator4.hasNext(), true);
        Mockingbird.setReturnValue(iterator4.next(), "");
        Mockingbird.setReturnValue(true, FileUtil.class, "isAbsolute", "(java.lang.String)boolean", boolean3, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(CrapProject.class, true), "makeFilePathAbsoluteWithProject", "(java.lang.String)java.lang.String", "", 1);
        Mockingbird.setReturnValue(arrayList.add(""), false);
        Mockingbird.setReturnValue(iterator4.hasNext(), false);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(true, FileUtil.class, "ensureDirectory", "(java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(CrapProject.class, true), "loadProjectId", "()java.lang.Long", null, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(CrapProject.class, true), "makeProjectId", "()java.lang.Long", null, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(CrapProject.class, true), "writeProjectId", "(java.lang.Long)void", null, 1);
        Mockingbird.enterTestMode();
        CrapProject crapProject = new CrapProject("", list, list2, list3, list4, null);
        assertEquals("crapProject.outputDir()", "", crapProject.outputDir());
        assertNotNull("crapProject.testClassDirs()", crapProject.testClassDirs());
        assertNull("crapProject.getProjectId()", crapProject.getProjectId());
        assertNotNull("crapProject.libClasspaths()", crapProject.libClasspaths());
        assertNotNull("crapProject.sourceDirs()", crapProject.sourceDirs());
        assertNotNull("crapProject.classDirs()", crapProject.classDirs());
        assertEquals("crapProject.projectDir()", "", crapProject.projectDir());
    }
    
    public void testAllClasspaths() throws Throwable {
        List libClasspath = new ArrayList(100);
        libClasspath.add("testString");
        CrapProject crapProject = new CrapProject("projectDir", libClasspath, new ArrayList(1000), new ArrayList(0), new ArrayList(1), "");
        ArrayList result = (ArrayList) crapProject.allClasspaths();
        assertEquals("result.size()", 1, result.size());
    }
    
    public void testAllClasspaths1() throws Throwable {
        CrapProject crapProject = new CrapProject("projectDir", new ArrayList(100), new ArrayList(1000), new ArrayList(0), new ArrayList(1), "");
        ArrayList result = (ArrayList) crapProject.allClasspaths();
        assertEquals("result.size()", 0, result.size());
    }
    
    public void testClassDirs() throws Throwable {
        List projectClassDirs = new ArrayList(0);
        projectClassDirs.add("testString");
        CrapProject crapProject = new CrapProject("projectDir", new ArrayList(100), new ArrayList(1000), projectClassDirs, new ArrayList(1), "");
        ArrayList result = (ArrayList) crapProject.classDirs();
        assertEquals("result.size()", 1, result.size());
    }
    
    public void testClassDirs1() throws Throwable {
        CrapProject crapProject = new CrapProject("projectDir", new ArrayList(100), new ArrayList(1000), new ArrayList(0), new ArrayList(1), "");
        ArrayList result = (ArrayList) crapProject.classDirs();
        assertEquals("result.size()", 0, result.size());
    }
    
    public void testEnsureProjectId() throws Throwable {
        CrapProject crapProject = new CrapProject("projectDir", new ArrayList(100), new ArrayList(1000), new ArrayList(0), new ArrayList(1), "");
        Long result = (Long) callPrivateMethod("org.crap4j.CrapProject", "ensureProjectId", new Class[] {}, crapProject, new Object[] {});
        assertEquals("result", 1195109738131L, result.longValue());
    }
    
    public void testGetAllProjectClassesWithAggressiveMocks() throws Throwable {
        CrapProject crapProject = (CrapProject) Mockingbird.getProxyObject(CrapProject.class, true);
        List list = (List) Mockingbird.getProxyObject(List.class);
        Mockingbird.enterRecordingMode();
        ArrayList arrayList = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        setPrivateField(crapProject, "classDirs", list);
        Mockingbird.setReturnValue(list.iterator(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), "");
        ArrayList arrayList2 = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList2);
        Mockingbird.setReturnValue(true, FileUtil.class, "getAllFilesInDirMatchingPattern", "(java.lang.String,java.lang.String,boolean)java.util.List", null, 1);
        Boolean boolean2 = Boolean.FALSE;
        Mockingbird.setReturnValue(false, arrayList2, "addAll", "(java.util.Collection)boolean", new Object[] {null}, boolean2, 1);
        Mockingbird.setReturnValue(arrayList.addAll(arrayList2), false);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), "");
        ArrayList arrayList3 = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList3);
        Mockingbird.setReturnValue(true, FileUtil.class, "getAllFilesInDirMatchingPattern", "(java.lang.String,java.lang.String,boolean)java.util.List", null, 1);
        Mockingbird.setReturnValue(false, arrayList3, "addAll", "(java.util.Collection)boolean", new Object[] {null}, boolean2, 1);
        Mockingbird.setReturnValue(arrayList.addAll(arrayList3), false);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.enterTestMode(CrapProject.class);
        List result = crapProject.getAllProjectClasses();
        assertNotNull("result", result);
        assertNotNull("crapProject.classDirs()", crapProject.classDirs());
    }
    
    public void testGetCoverageDir() throws Throwable {
        CrapProject crapProject = new CrapProject("projectDir", new ArrayList(100), new ArrayList(1000), new ArrayList(0), new ArrayList(1), "");
        String result = crapProject.getCoverageDir();
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testGetProjectId() throws Throwable {
        CrapProject crapProject = new CrapProject("projectDir", new ArrayList(100), new ArrayList(1000), new ArrayList(0), new ArrayList(1), "");
        Long result = crapProject.getProjectId();
        assertEquals("result", 1195109738131L, result.longValue());
    }
    
    public void testGetProjectIdFile() throws Throwable {
        CrapProject crapProject = new CrapProject("projectDir", new ArrayList(100), new ArrayList(1000), new ArrayList(0), new ArrayList(1), "");
        File result = crapProject.getProjectIdFile();
        assertEquals("result.getName()", ".crap4j_project_id", result.getName());
    }
    
    public void testGetProjectName() throws Throwable {
        CrapProject crapProject = new CrapProject("projectDir", new ArrayList(100), new ArrayList(1000), new ArrayList(0), new ArrayList(1), "");
        String result = crapProject.getProjectName();
        assertEquals("result", "projectDir", result);
    }
    
    public void testGetReportFile() throws Throwable {
        CrapProject crapProject = new CrapProject("projectDir", new ArrayList(100), new ArrayList(1000), new ArrayList(0), new ArrayList(1), "");
        File result = crapProject.getReportFile();
        assertEquals("result.getName()", "report.xml", result.getName());
    }
    
    public void testGetReportHtmlFile() throws Throwable {
        CrapProject crapProject = new CrapProject("projectDir", new ArrayList(100), new ArrayList(1000), new ArrayList(0), new ArrayList(1), "");
        File result = crapProject.getReportHtmlFile();
        assertEquals("result.getName()", "index.html", result.getName());
    }
    
    public void testLibClasspaths() throws Throwable {
        List libClasspath = new ArrayList(100);
        libClasspath.add("testString");
        CrapProject crapProject = new CrapProject("projectDir", libClasspath, new ArrayList(1000), new ArrayList(0), new ArrayList(1), "");
        ArrayList result = (ArrayList) crapProject.libClasspaths();
        assertEquals("result.size()", 1, result.size());
    }
    
    public void testLibClasspaths1() throws Throwable {
        CrapProject crapProject = new CrapProject("projectDir", new ArrayList(100), new ArrayList(1000), new ArrayList(0), new ArrayList(1), "");
        ArrayList result = (ArrayList) crapProject.libClasspaths();
        assertEquals("result.size()", 0, result.size());
    }
    
    public void testLoadProjectId() throws Throwable {
        CrapProject crapProject = new CrapProject("projectDir", new ArrayList(100), new ArrayList(1000), new ArrayList(0), new ArrayList(1), "");
        Long result = (Long) callPrivateMethod("org.crap4j.CrapProject", "loadProjectId", new Class[] {}, crapProject, new Object[] {});
        assertEquals("result", 1195109738131L, result.longValue());
    }
    
    public void testLoadProjectIdWithAggressiveMocks() throws Throwable {
        CrapProject crapProject = (CrapProject) Mockingbird.getProxyObject(CrapProject.class, true);
        Mockingbird.enterRecordingMode();
        File file = (File) Mockingbird.getProxyObject(File.class);
        Mockingbird.replaceObjectForRecording(File.class, "<init>(java.lang.String,java.lang.String)", file);
        IOException iOException = (IOException) Mockingbird.getProxyObject(IOException.class);
        setPrivateField(crapProject, "outputDir", "");
        Mockingbird.setReturnValue(false, file, "exists", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.replaceObjectForRecording(FileInputStream.class, "<init>(java.io.File)", Mockingbird.getProxyObject(FileInputStream.class));
        DataInputStream dataInputStream = (DataInputStream) Mockingbird.getProxyObject(DataInputStream.class);
        Mockingbird.replaceObjectForRecording(DataInputStream.class, "<init>(java.io.InputStream)", dataInputStream);
        Mockingbird.setReturnValue(false, dataInputStream, "readLong", "()long", new Object[] {}, new Long(0L), 1);
        Mockingbird.setException(false, dataInputStream, "close", "()void", new Object[] {}, iOException, 1);
        Mockingbird.setReturnValue(false, iOException, "printStackTrace", "()void", new Object[] {}, null, 1);
        Mockingbird.enterTestMode(CrapProject.class);
        Long result = (Long) callPrivateMethod("org.crap4j.CrapProject", "loadProjectId", new Class[] {}, crapProject, new Object[] {});
        assertEquals("result", 0L, result.longValue());
    }
    
    public void testLoadProjectIdWithAggressiveMocks1() throws Throwable {
        CrapProject crapProject = (CrapProject) Mockingbird.getProxyObject(CrapProject.class, true);
        Mockingbird.enterRecordingMode();
        File file = (File) Mockingbird.getProxyObject(File.class);
        Mockingbird.replaceObjectForRecording(File.class, "<init>(java.lang.String,java.lang.String)", file);
        IOException iOException = (IOException) Mockingbird.getProxyObject(IOException.class);
        IOException iOException2 = (IOException) Mockingbird.getProxyObject(IOException.class);
        setPrivateField(crapProject, "outputDir", "");
        Mockingbird.setReturnValue(false, file, "exists", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.replaceObjectForRecording(FileInputStream.class, "<init>(java.io.File)", Mockingbird.getProxyObject(FileInputStream.class));
        DataInputStream dataInputStream = (DataInputStream) Mockingbird.getProxyObject(DataInputStream.class);
        Mockingbird.replaceObjectForRecording(DataInputStream.class, "<init>(java.io.InputStream)", dataInputStream);
        Mockingbird.setException(false, dataInputStream, "readLong", "()long", new Object[] {}, iOException, 1);
        Mockingbird.setReturnValue(false, iOException, "printStackTrace", "()void", new Object[] {}, null, 1);
        Mockingbird.setException(false, dataInputStream, "close", "()void", new Object[] {}, iOException2, 1);
        Mockingbird.setReturnValue(false, iOException2, "printStackTrace", "()void", new Object[] {}, null, 1);
        Mockingbird.enterTestMode(CrapProject.class);
        Long result = (Long) callPrivateMethod("org.crap4j.CrapProject", "loadProjectId", new Class[] {}, crapProject, new Object[] {});
        assertNull("result", result);
    }
    
    public void testLoadProjectIdWithAggressiveMocks2() throws Throwable {
        CrapProject crapProject = (CrapProject) Mockingbird.getProxyObject(CrapProject.class, true);
        Mockingbird.enterRecordingMode();
        File file = (File) Mockingbird.getProxyObject(File.class);
        Mockingbird.replaceObjectForRecording(File.class, "<init>(java.lang.String,java.lang.String)", file);
        setPrivateField(crapProject, "outputDir", "");
        Mockingbird.setReturnValue(false, file, "exists", "()boolean", new Object[] {}, Boolean.FALSE, 1);
        Mockingbird.enterTestMode(CrapProject.class);
        Long result = (Long) callPrivateMethod("org.crap4j.CrapProject", "loadProjectId", new Class[] {}, crapProject, new Object[] {});
        assertNull("result", result);
    }
    
    public void testLoadProjectIdWithAggressiveMocks3() throws Throwable {
        CrapProject crapProject = (CrapProject) Mockingbird.getProxyObject(CrapProject.class, true);
        Mockingbird.enterRecordingMode();
        File file = (File) Mockingbird.getProxyObject(File.class);
        Mockingbird.replaceObjectForRecording(File.class, "<init>(java.lang.String,java.lang.String)", file);
        FileNotFoundException fileNotFoundException = (FileNotFoundException) Mockingbird.getProxyObject(FileNotFoundException.class);
        setPrivateField(crapProject, "outputDir", "");
        Mockingbird.setReturnValue(false, file, "exists", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setConstructorForException(FileInputStream.class, "<init>(java.io.File)", fileNotFoundException);
        Mockingbird.setReturnValue(false, fileNotFoundException, "printStackTrace", "()void", new Object[] {}, null, 1);
        Mockingbird.enterTestMode(CrapProject.class);
        Long result = (Long) callPrivateMethod("org.crap4j.CrapProject", "loadProjectId", new Class[] {}, crapProject, new Object[] {});
        assertNull("result", result);
    }
    
    public void testLoadProjectIdWithAggressiveMocks4() throws Throwable {
        CrapProject crapProject = (CrapProject) Mockingbird.getProxyObject(CrapProject.class, true);
        Mockingbird.enterRecordingMode();
        File file = (File) Mockingbird.getProxyObject(File.class);
        Mockingbird.replaceObjectForRecording(File.class, "<init>(java.lang.String,java.lang.String)", file);
        IOException iOException = (IOException) Mockingbird.getProxyObject(IOException.class);
        setPrivateField(crapProject, "outputDir", "");
        Mockingbird.setReturnValue(false, file, "exists", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.replaceObjectForRecording(FileInputStream.class, "<init>(java.io.File)", Mockingbird.getProxyObject(FileInputStream.class));
        DataInputStream dataInputStream = (DataInputStream) Mockingbird.getProxyObject(DataInputStream.class);
        Mockingbird.replaceObjectForRecording(DataInputStream.class, "<init>(java.io.InputStream)", dataInputStream);
        Mockingbird.setException(false, dataInputStream, "readLong", "()long", new Object[] {}, iOException, 1);
        Mockingbird.setReturnValue(false, iOException, "printStackTrace", "()void", new Object[] {}, null, 1);
        Mockingbird.setReturnValue(false, dataInputStream, "close", "()void", new Object[] {}, null, 1);
        Mockingbird.enterTestMode(CrapProject.class);
        Long result = (Long) callPrivateMethod("org.crap4j.CrapProject", "loadProjectId", new Class[] {}, crapProject, new Object[] {});
        assertNull("result", result);
    }
    
    public void testMakeAbsolute() throws Throwable {
        CrapProject crapProject = new CrapProject("projectDir", new ArrayList(100), new ArrayList(1000), new ArrayList(0), new ArrayList(1), "");
        ArrayList result = (ArrayList) callPrivateMethod("org.crap4j.CrapProject", "makeAbsolute", new Class[] {List.class}, crapProject, new Object[] {new ArrayList(10)});
        assertEquals("result.size()", 0, result.size());
    }
    
    public void testMakeAbsolute1() throws Throwable {
        CrapProject crapProject = new CrapProject("projectDir", new ArrayList(100), new ArrayList(1000), new ArrayList(0), new ArrayList(1), "");
        List arrayList = new ArrayList(10);
        arrayList.add("classDiectory");
        ArrayList result = (ArrayList) callPrivateMethod("org.crap4j.CrapProject", "makeAbsolute", new Class[] {List.class}, crapProject, new Object[] {arrayList});
        assertEquals("result.size()", 1, result.size());
    }
    
    public void testMakeFilePathAbsoluteWithProject() throws Throwable {
        CrapProject crapProject = new CrapProject("projectDir", new ArrayList(100), new ArrayList(1000), new ArrayList(0), new ArrayList(1), "");
        String result = (String) callPrivateMethod("org.crap4j.CrapProject", "makeFilePathAbsoluteWithProject", new Class[] {String.class}, crapProject, new Object[] {"testCrapProjectPath"});
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testMakeProjectId() throws Throwable {
        CrapProject crapProject = new CrapProject("projectDir", new ArrayList(100), new ArrayList(1000), new ArrayList(0), new ArrayList(1), "");
        callPrivateMethod("org.crap4j.CrapProject", "makeProjectId", new Class[] {}, crapProject, new Object[] {});
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testOutputDir() throws Throwable {
        CrapProject crapProject = new CrapProject("projectDir", new ArrayList(100), new ArrayList(1000), new ArrayList(0), new ArrayList(1), "");
        String result = crapProject.outputDir();
        assertEquals("result", "projectDir/agitar/reports/crap4j", result);
    }
    
    public void testProjectDir() throws Throwable {
        CrapProject crapProject = new CrapProject("projectDir", new ArrayList(100), new ArrayList(1000), new ArrayList(0), new ArrayList(1), "");
        String result = crapProject.projectDir();
        assertEquals("result", "projectDir", result);
    }
    
    public void testSourceDirs() throws Throwable {
        CrapProject crapProject = new CrapProject("projectDir", new ArrayList(100), new ArrayList(1000), new ArrayList(0), new ArrayList(1), "");
        ArrayList result = (ArrayList) crapProject.sourceDirs();
        assertEquals("result.size()", 0, result.size());
    }
    
    public void testSourceDirs1() throws Throwable {
        List sourceDirs = new ArrayList(1);
        sourceDirs.add("testString");
        CrapProject crapProject = new CrapProject("projectDir", new ArrayList(100), new ArrayList(1000), new ArrayList(0), sourceDirs, "");
        ArrayList result = (ArrayList) crapProject.sourceDirs();
        assertEquals("result.size()", 1, result.size());
    }
    
    public void testTestClassDirs() throws Throwable {
        CrapProject crapProject = new CrapProject("projectDir", new ArrayList(100), new ArrayList(1000), new ArrayList(0), new ArrayList(1), "");
        ArrayList result = (ArrayList) crapProject.testClassDirs();
        assertEquals("result.size()", 0, result.size());
    }
    
    public void testToXmlWithAggressiveMocks() throws Throwable {
        CrapProject crapProject = (CrapProject) Mockingbird.getProxyObject(CrapProject.class, true);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(true, XmlUtil.class, "itemToXml", "(org.crap4j.util.MyStringBuilder,java.lang.String,java.lang.String)void", null, 1);
        DateFormat dateFormat = (DateFormat) Mockingbird.getProxyObject(DateFormat.class);
        Calendar calendar = (Calendar) Mockingbird.getProxyObject(Calendar.class);
        setPrivateField(crapProject, "projectDir", "");
        setPrivateField(crapProject, "projectId", new Long(0L));
        setPrivateField(crapProject, "classDirs", null);
        setPrivateField(crapProject, "testClassDirs", null);
        setPrivateField(crapProject, "sourceDirs", null);
        setPrivateField(crapProject, "libClasspaths", null);
        Mockingbird.setReturnValue(true, XmlUtil.class, "itemToXml", "(org.crap4j.util.MyStringBuilder,java.lang.String,java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(true, DateFormat.class, "getInstance", "()java.text.DateFormat", new Object[] {}, dateFormat, 1);
        Mockingbird.setReturnValue(true, Calendar.class, "getInstance", "()java.util.Calendar", new Object[] {}, calendar, 1);
        Mockingbird.setReturnValue(false, calendar, "getTime", "()java.util.Date", new Object[] {}, null, 1);
        Mockingbird.setReturnValue(false, dateFormat, "format", "(java.util.Date)java.lang.String", new Object[] {null}, "", 1);
        Mockingbird.setReturnValue(true, XmlUtil.class, "itemToXml", "(org.crap4j.util.MyStringBuilder,java.lang.String,java.lang.String)void", null, 1);
        XmlUtil.collectionToXml(null, "classDirectories", "classDirectory", null);
        Mockingbird.setNormalReturnForVoid();
        XmlUtil.collectionToXml(null, "testClassDirectories", "testClassDirectory", null);
        Mockingbird.setNormalReturnForVoid();
        XmlUtil.collectionToXml(null, "sourceDirectories", "sourceDirectory", null);
        Mockingbird.setNormalReturnForVoid();
        XmlUtil.collectionToXml(null, "libClasspaths", "libClasspath", null);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(CrapProject.class);
        crapProject.toXml(null);
        assertEquals("crapProject.getProjectId()", 0L, crapProject.getProjectId().longValue());
    }
    
    public void testWriteProjectIdWithAggressiveMocks() throws Throwable {
        CrapProject crapProject = (CrapProject) Mockingbird.getProxyObject(CrapProject.class, true);
        Mockingbird.enterRecordingMode();
        Mockingbird.replaceObjectForRecording(File.class, "<init>(java.lang.String,java.lang.String)", Mockingbird.getProxyObject(File.class));
        FileNotFoundException fileNotFoundException = (FileNotFoundException) Mockingbird.getProxyObject(FileNotFoundException.class);
        setPrivateField(crapProject, "outputDir", "");
        Mockingbird.setConstructorForException(FileOutputStream.class, "<init>(java.io.File)", fileNotFoundException);
        Mockingbird.setReturnValue(false, fileNotFoundException, "printStackTrace", "()void", new Object[] {}, null, 1);
        Mockingbird.enterTestMode(CrapProject.class);
        callPrivateMethod("org.crap4j.CrapProject", "writeProjectId", new Class[] {Long.class}, crapProject, new Object[] {null});
        assertEquals("crapProject.outputDir()", "", crapProject.outputDir());
    }
    
    public void testWriteProjectIdWithAggressiveMocks1() throws Throwable {
        CrapProject crapProject = (CrapProject) Mockingbird.getProxyObject(CrapProject.class, true);
        Mockingbird.enterRecordingMode();
        Mockingbird.replaceObjectForRecording(File.class, "<init>(java.lang.String,java.lang.String)", Mockingbird.getProxyObject(File.class));
        IOException iOException = (IOException) Mockingbird.getProxyObject(IOException.class);
        setPrivateField(crapProject, "outputDir", "");
        Mockingbird.replaceObjectForRecording(FileOutputStream.class, "<init>(java.io.File)", Mockingbird.getProxyObject(FileOutputStream.class));
        DataOutputStream dataOutputStream = (DataOutputStream) Mockingbird.getProxyObject(DataOutputStream.class);
        Mockingbird.replaceObjectForRecording(DataOutputStream.class, "<init>(java.io.OutputStream)", dataOutputStream);
        Mockingbird.setReturnValue(false, dataOutputStream, "writeLong", "(long)void", new Object[] {new Long(0L)}, null, 1);
        Mockingbird.setException(false, dataOutputStream, "close", "()void", new Object[] {}, iOException, 1);
        Mockingbird.setReturnValue(false, iOException, "printStackTrace", "()void", new Object[] {}, null, 1);
        Mockingbird.enterTestMode(CrapProject.class);
        callPrivateMethod("org.crap4j.CrapProject", "writeProjectId", new Class[] {Long.class}, crapProject, new Object[] {new Long(0L)});
        assertEquals("crapProject.outputDir()", "", crapProject.outputDir());
    }
    
    public void testWriteProjectIdWithAggressiveMocks2() throws Throwable {
        CrapProject crapProject = (CrapProject) Mockingbird.getProxyObject(CrapProject.class, true);
        Mockingbird.enterRecordingMode();
        Mockingbird.replaceObjectForRecording(File.class, "<init>(java.lang.String,java.lang.String)", Mockingbird.getProxyObject(File.class));
        IOException iOException = (IOException) Mockingbird.getProxyObject(IOException.class);
        IOException iOException2 = (IOException) Mockingbird.getProxyObject(IOException.class);
        setPrivateField(crapProject, "outputDir", "");
        Mockingbird.replaceObjectForRecording(FileOutputStream.class, "<init>(java.io.File)", Mockingbird.getProxyObject(FileOutputStream.class));
        DataOutputStream dataOutputStream = (DataOutputStream) Mockingbird.getProxyObject(DataOutputStream.class);
        Mockingbird.replaceObjectForRecording(DataOutputStream.class, "<init>(java.io.OutputStream)", dataOutputStream);
        Mockingbird.setException(false, dataOutputStream, "writeLong", "(long)void", new Object[] {new Long(0L)}, iOException, 1);
        Mockingbird.setReturnValue(false, iOException, "printStackTrace", "()void", new Object[] {}, null, 1);
        Mockingbird.setException(false, dataOutputStream, "close", "()void", new Object[] {}, iOException2, 1);
        Mockingbird.setReturnValue(false, iOException2, "printStackTrace", "()void", new Object[] {}, null, 1);
        Mockingbird.enterTestMode(CrapProject.class);
        callPrivateMethod("org.crap4j.CrapProject", "writeProjectId", new Class[] {Long.class}, crapProject, new Object[] {new Long(0L)});
        assertEquals("crapProject.outputDir()", "", crapProject.outputDir());
    }
    
    public void testWriteProjectIdWithAggressiveMocks3() throws Throwable {
        CrapProject crapProject = (CrapProject) Mockingbird.getProxyObject(CrapProject.class, true);
        Mockingbird.enterRecordingMode();
        Mockingbird.replaceObjectForRecording(File.class, "<init>(java.lang.String,java.lang.String)", Mockingbird.getProxyObject(File.class));
        IOException iOException = (IOException) Mockingbird.getProxyObject(IOException.class);
        setPrivateField(crapProject, "outputDir", "");
        Mockingbird.replaceObjectForRecording(FileOutputStream.class, "<init>(java.io.File)", Mockingbird.getProxyObject(FileOutputStream.class));
        DataOutputStream dataOutputStream = (DataOutputStream) Mockingbird.getProxyObject(DataOutputStream.class);
        Mockingbird.replaceObjectForRecording(DataOutputStream.class, "<init>(java.io.OutputStream)", dataOutputStream);
        Mockingbird.setException(false, dataOutputStream, "writeLong", "(long)void", new Object[] {new Long(0L)}, iOException, 1);
        Mockingbird.setReturnValue(false, iOException, "printStackTrace", "()void", new Object[] {}, null, 1);
        Mockingbird.setReturnValue(false, dataOutputStream, "close", "()void", new Object[] {}, null, 1);
        Mockingbird.enterTestMode(CrapProject.class);
        callPrivateMethod("org.crap4j.CrapProject", "writeProjectId", new Class[] {Long.class}, crapProject, new Object[] {new Long(0L)});
        assertEquals("crapProject.outputDir()", "", crapProject.outputDir());
    }
    
    public void testWriteProjectIdWithAggressiveMocks4() throws Throwable {
        CrapProject crapProject = (CrapProject) Mockingbird.getProxyObject(CrapProject.class, true);
        Mockingbird.enterRecordingMode();
        Mockingbird.replaceObjectForRecording(File.class, "<init>(java.lang.String,java.lang.String)", Mockingbird.getProxyObject(File.class));
        setPrivateField(crapProject, "outputDir", "");
        Mockingbird.replaceObjectForRecording(FileOutputStream.class, "<init>(java.io.File)", Mockingbird.getProxyObject(FileOutputStream.class));
        DataOutputStream dataOutputStream = (DataOutputStream) Mockingbird.getProxyObject(DataOutputStream.class);
        Mockingbird.replaceObjectForRecording(DataOutputStream.class, "<init>(java.io.OutputStream)", dataOutputStream);
        Mockingbird.setReturnValue(false, dataOutputStream, "writeLong", "(long)void", new Object[] {new Long(0L)}, null, 1);
        Mockingbird.setReturnValue(false, dataOutputStream, "close", "()void", new Object[] {}, null, 1);
        Mockingbird.enterTestMode(CrapProject.class);
        callPrivateMethod("org.crap4j.CrapProject", "writeProjectId", new Class[] {Long.class}, crapProject, new Object[] {new Long(0L)});
        assertEquals("crapProject.outputDir()", "", crapProject.outputDir());
    }
    
    public void testConstructorThrowsIllegalArgumentException() throws Throwable {
        List libClasspath = new ArrayList(100);
        List testClassDirs = new ArrayList(1000);
        List projectClassDirs = new ArrayList(0);
        List sourceDirs = new ArrayList(1);
        try {
            new CrapProject(" ", libClasspath, testClassDirs, projectClassDirs, sourceDirs, "testCrapProjectOutputDir");
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertEquals("ex.getMessage()", "Project Dir, null does not exist!", ex.getMessage());
            assertThrownBy(CrapProject.class, ex);
            assertEquals("(ArrayList) testClassDirs.size()", 0, testClassDirs.size());
            assertEquals("(ArrayList) sourceDirs.size()", 0, sourceDirs.size());
            assertEquals("(ArrayList) projectClassDirs.size()", 0, projectClassDirs.size());
            assertEquals("(ArrayList) libClasspath.size()", 0, libClasspath.size());
        }
    }
    
    public void testConstructorThrowsIllegalArgumentException1() throws Throwable {
        List libClasspath = new ArrayList(100);
        List testClassDirs = new ArrayList(1000);
        List projectClassDirs = new ArrayList(0);
        List sourceDirs = new ArrayList(1);
        try {
            new CrapProject("", libClasspath, testClassDirs, projectClassDirs, sourceDirs, "testCrapProjectOutputDir");
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertEquals("ex.getMessage()", "projectDir cannot be null", ex.getMessage());
            assertThrownBy(CrapProject.class, ex);
            assertEquals("(ArrayList) testClassDirs.size()", 0, testClassDirs.size());
            assertEquals("(ArrayList) sourceDirs.size()", 0, sourceDirs.size());
            assertEquals("(ArrayList) projectClassDirs.size()", 0, projectClassDirs.size());
            assertEquals("(ArrayList) libClasspath.size()", 0, libClasspath.size());
        }
    }
    
    public void testConstructorThrowsIllegalArgumentException2() throws Throwable {
        List EMPTY_LIST = Collections.EMPTY_LIST;
        try {
            new CrapProject(null, EMPTY_LIST, EMPTY_LIST, EMPTY_LIST, EMPTY_LIST, "testCrapProjectParam6");
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertEquals("ex.getMessage()", "projectDir cannot be null", ex.getMessage());
            assertThrownBy(CrapProject.class, ex);
        }
    }
    
    public void testGetAllProjectClassesThrowsIllegalArgumentException() throws Throwable {
        List projectClassDirs = new ArrayList(0);
        projectClassDirs.add("testString");
        CrapProject crapProject = new CrapProject("projectDir", new ArrayList(100), new ArrayList(1000), projectClassDirs, new ArrayList(1), "");
        try {
            crapProject.getAllProjectClasses();
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertEquals("ex.getMessage()", new File("projectDir/testString").getAbsolutePath() + " is not a directory", ex.getMessage());
            assertThrownBy(FileUtil.class, ex);
            assertEquals("crapProject.classDirs().size()", 1, crapProject.classDirs().size());
        }
    }
    
    public void testGetClassesInThrowsIllegalArgumentException() throws Throwable {
        CrapProject crapProject = new CrapProject("projectDir", new ArrayList(100), new ArrayList(1000), new ArrayList(0), new ArrayList(1), "");
        try {
            callPrivateMethod("org.crap4j.CrapProject", "getClassesIn", new Class[] {String.class}, crapProject, new Object[] {"testCrapProjectDirName"});
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertEquals("ex.getMessage()", new File("testCrapProjectDirName").getAbsolutePath() + " is not a directory", ex.getMessage());
            assertThrownBy(FileUtil.class, ex);
        }
    }
    
    public void testGetClassesInThrowsNullPointerException() throws Throwable {
        CrapProject crapProject = new CrapProject("projectDir", new ArrayList(100), new ArrayList(1000), new ArrayList(0), new ArrayList(1), "");
        try {
            callPrivateMethod("org.crap4j.CrapProject", "getClassesIn", new Class[] {String.class}, crapProject, new Object[] {null});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(File.class, ex);
        }
    }
    
    public void testMakeAbsoluteThrowsNullPointerException() throws Throwable {
        CrapProject crapProject = new CrapProject("projectDir", new ArrayList(100), new ArrayList(1000), new ArrayList(0), new ArrayList(1), "");
        try {
            callPrivateMethod("org.crap4j.CrapProject", "makeAbsolute", new Class[] {List.class}, crapProject, new Object[] {null});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(CrapProject.class, ex);
        }
    }
    
    public void testMakeFilePathAbsoluteWithProjectThrowsNullPointerException() throws Throwable {
        CrapProject crapProject = new CrapProject("projectDir", new ArrayList(100), new ArrayList(1000), new ArrayList(0), new ArrayList(1), "");
        try {
            callPrivateMethod("org.crap4j.CrapProject", "makeFilePathAbsoluteWithProject", new Class[] {String.class}, crapProject, new Object[] {null});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(File.class, ex);
        }
    }
    
    public void testValidateFileExistsThrowsIllegalArgumentException() throws Throwable {
        CrapProject crapProject = new CrapProject("projectDir", new ArrayList(100), new ArrayList(1000), new ArrayList(0), new ArrayList(1), "");
        try {
            callPrivateMethod("org.crap4j.CrapProject", "validateFileExists", new Class[] {String.class}, crapProject, new Object[] {"testCrapProjectProjectDir2"});
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertEquals("ex.getMessage()", "Project Dir, projectDir does not exist!", ex.getMessage());
            assertThrownBy(CrapProject.class, ex);
        }
    }
    
    public void testValidateFileExistsThrowsNullPointerException() throws Throwable {
        CrapProject crapProject = new CrapProject("projectDir", new ArrayList(100), new ArrayList(1000), new ArrayList(0), new ArrayList(1), "");
        try {
            callPrivateMethod("org.crap4j.CrapProject", "validateFileExists", new Class[] {String.class}, crapProject, new Object[] {null});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(File.class, ex);
        }
    }
}

