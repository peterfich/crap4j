/**
 * Generated by Agitar build: JUnitFactory Version 2.1.1.000614 (Build date: Nov 19, 2007) [2.1.1.000614]
 * JDK Version: 1.5.0_11
 *
 * Generated on Nov 27, 2007 4:11:15 PM
 * Time to generate: 00:21.960 seconds
 *
 */

package org.crap4j.external;

import com.agitar.lib.junit.AgitarTestCase;
import com.agitar.lib.mockingbird.Mockingbird;
import com.agitar.lib.mockingbird.MockingbirdSystem;
import java.io.PrintStream;
import org.crap4j.util.StreamCopier;

public class AntRunnerAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return AntRunner.class;
    }
    
    public void testConstructor() throws Throwable {
        AntRunner antRunner = new AntRunner("testAntRunnerParam1", "testAntRunnerParam2", "testAntRunnerParam3", "testAntRunnerParam4", true);
        assertEquals("antRunner.antHome", "testAntRunnerParam2", getPrivateField(antRunner, "antHome"));
        assertEquals("antRunner.debug", Boolean.TRUE, getPrivateField(antRunner, "debug"));
        assertEquals("antRunner.agitatorEclipseApiPluginDir", "testAntRunnerParam4", getPrivateField(antRunner, "agitatorEclipseApiPluginDir"));
        assertEquals("antRunner.antFile", "testAntRunnerParam1", getPrivateField(antRunner, "antFile"));
        assertEquals("antRunner.junitLib", "testAntRunnerParam3", getPrivateField(antRunner, "junitLib"));
    }
    
    public void testAgitatorEclipseApiPluginDir() throws Throwable {
        AntRunner antRunner = new AntRunner("testAntRunnerAntFile", "testAntRunnerAntHome", "testAntRunnerJunitLib", "testAntRunnerAgitatorEclipseApiPluginDir", true);
        String result = (String) callPrivateMethod("org.crap4j.external.AntRunner", "agitatorEclipseApiPluginDir", new Class[] {}, antRunner, new Object[] {});
        assertEquals("result", "testAntRunnerAgitatorEclipseApiPluginDir", result);
    }
    
    public void testAntHome() throws Throwable {
        AntRunner antRunner = new AntRunner("testAntRunnerAntFile", "testAntRunnerAntHome", "testAntRunnerJunitLib", "testAntRunnerAgitatorEclipseApiPluginDir", true);
        String result = (String) callPrivateMethod("org.crap4j.external.AntRunner", "antHome", new Class[] {}, antRunner, new Object[] {});
        assertEquals("result", "testAntRunnerAntHome", result);
    }
    
    public void testAntLauncherJar() throws Throwable {
        AntRunner antRunner = new AntRunner("testAntRunnerAntFile", "testAntRunnerAntHome", "testAntRunnerJunitLib", "testAntRunnerAgitatorEclipseApiPluginDir", true);
        String result = (String) callPrivateMethod("org.crap4j.external.AntRunner", "antLauncherJar", new Class[] {}, antRunner, new Object[] {});
        assertEquals("result", "testAntRunnerAgitatorEclipseApiPluginDir/lib/ant-launcher.jar", result);
    }
    
    public void testBuildAntCmdJavaLauncher() throws Throwable {
        AntRunner antRunner = new AntRunner("testAntRunnerAntFile", "testAntRunnerAntHome", "testAntRunnerJunitLib", "testAntRunnerAgitatorEclipseApiPluginDir", false);
        String[] result = (String[]) callPrivateMethod("org.crap4j.external.AntRunner", "buildAntCmdJavaLauncher", new Class[] {}, antRunner, new Object[] {});
        assertEquals("result.length", 10, result.length);
        assertEquals("(String[]) result[0]", "java", ((String[]) result)[0]);
    }
    
    public void testBuildAntCmdJavaLauncher1() throws Throwable {
        AntRunner antRunner = new AntRunner("testAntRunnerAntFile", "testAntRunnerAntHome", "testAntRunnerJunitLib", "testAntRunnerAgitatorEclipseApiPluginDir", true);
        String[] result = (String[]) callPrivateMethod("org.crap4j.external.AntRunner", "buildAntCmdJavaLauncher", new Class[] {}, antRunner, new Object[] {});
        assertEquals("result.length", 11, result.length);
        assertEquals("(String[]) result[0]", "java", ((String[]) result)[0]);
    }
    
    public void testCheckExitStatus() throws Throwable {
        AntRunner antRunner = new AntRunner("testAntRunnerAntFile", "testAntRunnerAntHome", "testAntRunnerJunitLib", "testAntRunnerAgitatorEclipseApiPluginDir", true);
        callPrivateMethod("org.crap4j.external.AntRunner", "checkExitStatus", new Class[] {int.class}, antRunner, new Object[] {new Integer(0)});
        Object actual = callPrivateMethod("org.crap4j.external.AntRunner", "agitatorEclipseApiPluginDir", new Class[] {}, antRunner, new Object[] {});
        assertEquals("antRunner.agitatorEclipseApiPluginDir()", "testAntRunnerAgitatorEclipseApiPluginDir", actual);
    }
    
    public void testIsDebug() throws Throwable {
        AntRunner antRunner = new AntRunner("testAntRunnerAntFile", "testAntRunnerAntHome", "testAntRunnerJunitLib", "testAntRunnerAgitatorEclipseApiPluginDir", false);
        boolean result = ((Boolean) callPrivateMethod("org.crap4j.external.AntRunner", "isDebug", new Class[] {}, antRunner, new Object[] {})).booleanValue();
        assertFalse("result", result);
    }
    
    public void testIsDebug1() throws Throwable {
        AntRunner antRunner = new AntRunner("testAntRunnerAntFile", "testAntRunnerAntHome", "testAntRunnerJunitLib", "testAntRunnerAgitatorEclipseApiPluginDir", true);
        boolean result = ((Boolean) callPrivateMethod("org.crap4j.external.AntRunner", "isDebug", new Class[] {}, antRunner, new Object[] {})).booleanValue();
        assertTrue("result", result);
    }
    
    public void testJunitLib() throws Throwable {
        AntRunner antRunner = new AntRunner("testAntRunnerAntFile", "testAntRunnerAntHome", "testAntRunnerJunitLib", "testAntRunnerAgitatorEclipseApiPluginDir", true);
        String result = (String) callPrivateMethod("org.crap4j.external.AntRunner", "junitLib", new Class[] {}, antRunner, new Object[] {});
        assertEquals("result", "testAntRunnerJunitLib", result);
    }
    
    public void testPrintCmd() throws Throwable {
        AntRunner antRunner = new AntRunner("testAntRunnerAntFile", "testAntRunnerAntHome", "testAntRunnerJunitLib", "testAntRunnerAgitatorEclipseApiPluginDir", true);
        String[] strings = new String[0];
        callPrivateMethod("org.crap4j.external.AntRunner", "printCmd", new Class[] {String[].class}, antRunner, new Object[] {strings});
        Object actual = callPrivateMethod("org.crap4j.external.AntRunner", "agitatorEclipseApiPluginDir", new Class[] {}, antRunner, new Object[] {});
        assertEquals("antRunner.agitatorEclipseApiPluginDir()", "testAntRunnerAgitatorEclipseApiPluginDir", actual);
    }
    
    public void testPrintCmd1() throws Throwable {
        String[] strings = new String[1];
        AntRunner antRunner = new AntRunner("testAntRunnerAntFile", "testAntRunnerAntHome", "testAntRunnerJunitLib", "testAntRunnerAgitatorEclipseApiPluginDir", true);
        callPrivateMethod("org.crap4j.external.AntRunner", "printCmd", new Class[] {String[].class}, antRunner, new Object[] {strings});
        Object actual = callPrivateMethod("org.crap4j.external.AntRunner", "agitatorEclipseApiPluginDir", new Class[] {}, antRunner, new Object[] {});
        assertEquals("antRunner.agitatorEclipseApiPluginDir()", "testAntRunnerAgitatorEclipseApiPluginDir", actual);
    }
    
    public void testRun() throws Throwable {
        AntRunner antRunner = new AntRunner("testAntRunnerParam1", "testAntRunnerParam2", "testAntRunnerParam3", "testAntRunnerParam4", true);
        int result = antRunner.run();
        assertEquals("result", -1, result);
    }
    
    public void testRun1() throws Throwable {
        AntRunner antRunner = new AntRunner("testAntRunnerParam1", "testAntRunnerParam2", "testAntRunnerParam3", "testAntRunnerParam4", false);
        int result = antRunner.run();
        assertEquals("result", -1, result);
    }
    
    public void testRunAsExternalProcess() throws Throwable {
        AntRunner antRunner = new AntRunner("testAntRunnerAntFile", "testAntRunnerAntHome", "testAntRunnerJunitLib", "testAntRunnerAgitatorEclipseApiPluginDir", true);
        int result = ((Number) callPrivateMethod("org.crap4j.external.AntRunner", "runAsExternalProcess", new Class[] {}, antRunner, new Object[] {})).intValue();
        assertEquals("result", -1, result);
    }
    
    public void testRunAsExternalProcess1() throws Throwable {
        AntRunner antRunner = new AntRunner("testAntRunnerAntFile", "testAntRunnerAntHome", "testAntRunnerJunitLib", "testAntRunnerAgitatorEclipseApiPluginDir", false);
        int result = ((Number) callPrivateMethod("org.crap4j.external.AntRunner", "runAsExternalProcess", new Class[] {}, antRunner, new Object[] {})).intValue();
        assertEquals("result", -1, result);
    }
    
    public void testRunWithAggressiveMocks() throws Throwable {
        AntRunner antRunner = (AntRunner) Mockingbird.getProxyObject(AntRunner.class, true);
        String[] strings = new String[0];
        Runtime runtime = (Runtime) Mockingbird.getProxyObject(Runtime.class);
        Process process = (Process) Mockingbird.getProxyObject(Process.class);
        setPrivateField(antRunner, "debug", Boolean.TRUE);
        PrintStream printStream = (PrintStream) Mockingbird.getProxyObject(PrintStream.class);
        MockingbirdSystem.out = printStream;
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, antRunner, "buildAntCmdJavaLauncher", "()java.lang.String[]", new Object[] {}, strings, 1);
        Mockingbird.setReturnValue(false, antRunner, "printCmd", "(java.lang.String[])void", new Object[] {strings}, null, 1);
        Mockingbird.setReturnValue(true, Runtime.class, "getRuntime", "()java.lang.Runtime", new Object[] {}, runtime, 1);
        Mockingbird.setReturnValue(false, runtime, "exec", "(java.lang.String[])java.lang.Process", new Object[] {strings}, process, 1);
        Mockingbird.setReturnValue(process.getInputStream(), null);
        Mockingbird.replaceObjectForRecording(StreamCopier.class, "<init>(java.io.InputStream,java.io.OutputStream,boolean)", Mockingbird.getProxyObject(StreamCopier.class));
        Mockingbird.setReturnValue(process.getErrorStream(), null);
        Mockingbird.replaceObjectForRecording(StreamCopier.class, "<init>(java.io.InputStream,java.io.OutputStream,boolean)", Mockingbird.getProxyObject(StreamCopier.class));
        Mockingbird.setReturnValue(process.waitFor(), 0);
        Mockingbird.setReturnValue(false, antRunner, "checkExitStatus", "(int)void", new Object[] {new Integer(0)}, null, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, printStream, "println", "(java.lang.String)void", null, 1);
        Mockingbird.enterTestMode(AntRunner.class);
        int result = antRunner.run();
        assertEquals("result", 0, result);
    }
    
    public void testCheckExitStatusThrowsRuntimeException() throws Throwable {
        AntRunner antRunner = new AntRunner("testAntRunnerAntFile", "testAntRunnerAntHome", "testAntRunnerJunitLib", "testAntRunnerAgitatorEclipseApiPluginDir", true);
        try {
            callPrivateMethod("org.crap4j.external.AntRunner", "checkExitStatus", new Class[] {int.class}, antRunner, new Object[] {new Integer(-1)});
            fail("Expected RuntimeException to be thrown");
        } catch (RuntimeException ex) {
            assertEquals("ex.getMessage()", "Ant run failed with status: -1", ex.getMessage());
            assertThrownBy(AntRunner.class, ex);
        }
    }
    
    public void testCheckExitStatusThrowsRuntimeException1() throws Throwable {
        AntRunner antRunner = new AntRunner("testAntRunnerAntFile", "testAntRunnerAntHome", "testAntRunnerJunitLib", "testAntRunnerAgitatorEclipseApiPluginDir", true);
        try {
            callPrivateMethod("org.crap4j.external.AntRunner", "checkExitStatus", new Class[] {int.class}, antRunner, new Object[] {new Integer(1)});
            fail("Expected RuntimeException to be thrown");
        } catch (RuntimeException ex) {
            assertEquals("ex.getMessage()", "Ant run failed with status: 1", ex.getMessage());
            assertThrownBy(AntRunner.class, ex);
        }
    }
    
    public void testPrintCmdThrowsNullPointerException() throws Throwable {
        AntRunner antRunner = new AntRunner("testAntRunnerAntFile", "testAntRunnerAntHome", "testAntRunnerJunitLib", "testAntRunnerAgitatorEclipseApiPluginDir", true);
        try {
            callPrivateMethod("org.crap4j.external.AntRunner", "printCmd", new Class[] {String[].class}, antRunner, new Object[] {null});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(AntRunner.class, ex);
        }
    }
}

