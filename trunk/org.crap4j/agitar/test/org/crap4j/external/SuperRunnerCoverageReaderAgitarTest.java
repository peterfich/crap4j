/**
 * Generated by Agitar build: JUnitFactory Version 2.1.0.000576 (Build date: Oct 19, 2007) [2.1.0.000576]
 * JDK Version: 1.5.0_11
 *
 * Generated on Nov 1, 2007 12:04:13 AM
 * Time to generate: 01:30.511 seconds
 *
 */

package org.crap4j.external;

import com.agitar.lib.junit.AgitarTestCase;
import com.agitar.lib.mockingbird.Mockingbird;
import com.agitar.lib.mockingbird.MockingbirdSystem;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInput;
import java.io.DataInputStream;
import java.io.EOFException;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PrintStream;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Vector;
import org.crap4j.CrapProject;
import org.crap4j.MethodCoverage;
import org.crap4j.util.FileUtil;

public class SuperRunnerCoverageReaderAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return SuperRunnerCoverageReader.class;
    }
    
    public void testConstructor() throws Throwable {
        SuperRunnerCoverageReader superRunnerCoverageReader = new SuperRunnerCoverageReader(null);
        assertNull("superRunnerCoverageReader.project", getPrivateField(superRunnerCoverageReader, "project"));
    }
    
    public void testCreateMethodCoverages() throws Throwable {
        SuperRunnerCoverageReader superRunnerCoverageReader = new SuperRunnerCoverageReader(null);
        Collection arrayList = new ArrayList(100);
        arrayList.add(new MyCoveragePoint());
        List arrayList2 = new ArrayList(1000);
        List arrayList3 = new ArrayList(0);
        arrayList3.add("testString");
        Map hashMap = new HashMap(100, 100.0F);
        hashMap.put(new Integer(0), arrayList);
        superRunnerCoverageReader.createMethodCoverages(arrayList2, arrayList3, hashMap);
        assertEquals("(ArrayList) arrayList2.size()", 1, arrayList2.size());
    }
    
    public void testCreateMethodCoverages1() throws Throwable {
        SuperRunnerCoverageReader superRunnerCoverageReader = new SuperRunnerCoverageReader(null);
        List arrayList = new ArrayList(100);
        List arrayList2 = new ArrayList(1000);
        arrayList2.add("unknown");
        arrayList2.add("Cannot find coverage results files in ");
        Map hashMap = new HashMap(100, 100.0F);
        hashMap.put(new Integer(0), new LinkedList());
        superRunnerCoverageReader.createMethodCoverages(arrayList, arrayList2, hashMap);
        assertEquals("(ArrayList) arrayList.size()", 2, arrayList.size());
    }
    
    public void testCreateMethodCoverages2() throws Throwable {
        SuperRunnerCoverageReader superRunnerCoverageReader = new SuperRunnerCoverageReader(null);
        List arrayList = new ArrayList(100);
        List arrayList2 = new ArrayList(1000);
        arrayList2.add(".");
        Map hashMap = new HashMap(100, 100.0F);
        hashMap.put(new Integer(0), new Vector());
        superRunnerCoverageReader.createMethodCoverages(arrayList, arrayList2, hashMap);
        assertEquals("(ArrayList) arrayList.size()", 1, arrayList.size());
    }
    
    public void testCreateMethodCoverages3() throws Throwable {
        SuperRunnerCoverageReader superRunnerCoverageReader = new SuperRunnerCoverageReader(null);
        List methodNames = new ArrayList(100);
        List result = superRunnerCoverageReader.createMethodCoverages(null, methodNames, new HashMap(100, 100.0F));
        assertNull("result", result);
    }
    
    public void testCreateMethodCoverages4() throws Throwable {
        SuperRunnerCoverageReader superRunnerCoverageReader = new SuperRunnerCoverageReader(null);
        List methodCoverages = new ArrayList(100);
        List methodNames = new ArrayList(1000);
        methodNames.add("testString");
        superRunnerCoverageReader.createMethodCoverages(methodCoverages, methodNames, new HashMap(100, 100.0F));
        assertEquals("(ArrayList) methodCoverages.size()", 1, methodCoverages.size());
    }
    
    public void testCreateMethodCoverages5() throws Throwable {
        SuperRunnerCoverageReader superRunnerCoverageReader = new SuperRunnerCoverageReader(null);
        List methodNames = new ArrayList(100);
        boolean add = methodNames.add("testString");
        Map covPoints = new HashMap(100, 100.0F);
        ArrayList methodCoverages = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, methodCoverages, "add", "(java.lang.Object)boolean", Boolean.valueOf(add), 1);
        Mockingbird.enterTestMode(SuperRunnerCoverageReader.class);
        ArrayList result = (ArrayList) superRunnerCoverageReader.createMethodCoverages(methodCoverages, methodNames, covPoints);
        assertEquals("result.size()", 0, result.size());
    }
    
    public void testCreateMethodCoverages6() throws Throwable {
        SuperRunnerCoverageReader superRunnerCoverageReader = new SuperRunnerCoverageReader(null);
        List arrayList = new ArrayList(100);
        List result = superRunnerCoverageReader.createMethodCoverages(arrayList, new ArrayList(1000), new HashMap(100, 100.0F));
        assertSame("result", arrayList, result);
    }
    
    public void testMakeFullyQualifiedMethodName() throws Throwable {
        SuperRunnerCoverageReader superRunnerCoverageReader = new SuperRunnerCoverageReader(null);
        String result = (String) callPrivateMethod("org.crap4j.external.SuperRunnerCoverageReader", "makeFullyQualifiedMethodName", new Class[] {String.class, String.class}, superRunnerCoverageReader, new Object[] {"testSuperRunnerCoverageReaderClassName", "testSuperRunnerCoverageReaderMethodName"});
        assertEquals("result", "testSuperRunnerCoverageReaderClassName.testSuperRunnerCoverageReaderMethodName", result);
    }
    
    public void testRead() throws Throwable {
        ArrayList result = (ArrayList) new SuperRunnerCoverageReader(null).read();
        assertEquals("result.size()", 0, result.size());
    }
    
    public void testReadCoveragePointsWithAggressiveMocks() throws Throwable {
        SuperRunnerCoverageReader superRunnerCoverageReader = (SuperRunnerCoverageReader) Mockingbird.getProxyObject(SuperRunnerCoverageReader.class, true);
        DataInput dataInput = (DataInput) Mockingbird.getProxyObject(DataInput.class);
        List list = (List) Mockingbird.getProxyObject(List.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(dataInput.readInt(), 2);
        HashMap hashMap = (HashMap) Mockingbird.getProxyObject(HashMap.class);
        Mockingbird.replaceObjectForRecording(HashMap.class, "<init>()", hashMap);
        MyCoveragePoint myCoveragePoint = (MyCoveragePoint) Mockingbird.getProxyObject(MyCoveragePoint.class);
        Mockingbird.replaceObjectForRecording(MyCoveragePoint.class, "<init>(java.io.DataInput)", myCoveragePoint);
        Mockingbird.setReturnValue(false, hashMap, "get", "(java.lang.Object)java.lang.Object", list, 1);
        Mockingbird.enterNormalMode();
        myCoveragePoint.setType(0);
        myCoveragePoint.setMethodNumber(0);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(list.add(myCoveragePoint), false);
        Mockingbird.setReturnValue(false, hashMap, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        MyCoveragePoint myCoveragePoint2 = (MyCoveragePoint) Mockingbird.getProxyObject(MyCoveragePoint.class);
        Mockingbird.replaceObjectForRecording(MyCoveragePoint.class, "<init>(java.io.DataInput)", myCoveragePoint2);
        Mockingbird.setReturnValue(false, hashMap, "get", "(java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.enterNormalMode();
        myCoveragePoint2.setType(0);
        myCoveragePoint2.setMethodNumber(0);
        Mockingbird.enterRecordingMode();
        ArrayList arrayList = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList);
        Mockingbird.setReturnValue(arrayList.add(myCoveragePoint2), false);
        Mockingbird.setReturnValue(false, hashMap, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.enterTestMode(SuperRunnerCoverageReader.class);
        Map result = (Map) callPrivateMethod("org.crap4j.external.SuperRunnerCoverageReader", "readCoveragePoints", new Class[] {DataInput.class}, superRunnerCoverageReader, new Object[] {dataInput});
        assertNotNull("result", result);
    }
    
    public void testReadWithAggressiveMocks() throws Throwable {
        SuperRunnerCoverageReader superRunnerCoverageReader = (SuperRunnerCoverageReader) Mockingbird.getProxyObject(SuperRunnerCoverageReader.class, true);
        CrapProject crapProject = (CrapProject) Mockingbird.getProxyObject(CrapProject.class);
        Mockingbird.enterRecordingMode();
        ArrayList arrayList = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList);
        List list = (List) Mockingbird.getProxyObject(List.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        File file = (File) Mockingbird.getProxyObject(File.class);
        setPrivateField(superRunnerCoverageReader, "project", crapProject);
        Mockingbird.setReturnValue(crapProject.getCoverageDir(), "");
        PrintStream printStream = (PrintStream) Mockingbird.getProxyObject(PrintStream.class);
        MockingbirdSystem.err = printStream;
        Mockingbird.setReturnValue(true, FileUtil.class, "getAllFilesInDirMatchingPattern", "(java.lang.String,java.lang.String,boolean)java.util.List", null, 1);
        Mockingbird.setReturnValue(FileUtil.removeTestClassFiles(null), list);
        Mockingbird.setReturnValue(list.size(), 1);
        Mockingbird.setReturnValue(list.iterator(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), file);
        Mockingbird.replaceObjectForRecording(FileInputStream.class, "<init>(java.io.File)", Mockingbird.getProxyObject(FileInputStream.class));
        Mockingbird.replaceObjectForRecording(BufferedInputStream.class, "<init>(java.io.InputStream)", Mockingbird.getProxyObject(BufferedInputStream.class));
        DataInputStream dataInputStream = (DataInputStream) Mockingbird.getProxyObject(DataInputStream.class);
        Mockingbird.replaceObjectForRecording(DataInputStream.class, "<init>(java.io.InputStream)", dataInputStream);
        Mockingbird.setReturnValue(superRunnerCoverageReader.read(dataInputStream), null);
        Mockingbird.setException(false, dataInputStream, "close", "()void", new Object[] {}, (Throwable) Mockingbird.getProxyObject(IOException.class), 1);
        Mockingbird.setReturnValue(false, file, "getAbsolutePath", "()java.lang.String", new Object[] {}, "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, printStream, "println", "(java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), null);
        Mockingbird.replaceObjectForRecording(FileInputStream.class, "<init>(java.io.File)", Mockingbird.getProxyObject(FileInputStream.class));
        Mockingbird.replaceObjectForRecording(BufferedInputStream.class, "<init>(java.io.InputStream)", Mockingbird.getProxyObject(BufferedInputStream.class));
        DataInputStream dataInputStream2 = (DataInputStream) Mockingbird.getProxyObject(DataInputStream.class);
        Mockingbird.replaceObjectForRecording(DataInputStream.class, "<init>(java.io.InputStream)", dataInputStream2);
        Mockingbird.setReturnValue(superRunnerCoverageReader.read(dataInputStream2), null);
        Mockingbird.setReturnValue(false, dataInputStream2, "close", "()void", new Object[] {}, null, 1);
        Mockingbird.setReturnValue(arrayList.addAll(null), false);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.enterTestMode(SuperRunnerCoverageReader.class);
        List result = superRunnerCoverageReader.read();
        assertNotNull("result", result);
    }
    
    public void testReadWithAggressiveMocks1() throws Throwable {
        SuperRunnerCoverageReader superRunnerCoverageReader = (SuperRunnerCoverageReader) Mockingbird.getProxyObject(SuperRunnerCoverageReader.class, true);
        CrapProject crapProject = (CrapProject) Mockingbird.getProxyObject(CrapProject.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", Mockingbird.getProxyObject(ArrayList.class));
        setPrivateField(superRunnerCoverageReader, "project", crapProject);
        Mockingbird.setReturnValue(crapProject.getCoverageDir(), "");
        PrintStream printStream = (PrintStream) Mockingbird.getProxyObject(PrintStream.class);
        MockingbirdSystem.err = printStream;
        Mockingbird.setReturnValue(true, FileUtil.class, "getAllFilesInDirMatchingPattern", "(java.lang.String,java.lang.String,boolean)java.util.List", null, 1);
        Mockingbird.setReturnValue(FileUtil.removeTestClassFiles(null), null);
        Mockingbird.setReturnValue(crapProject.getCoverageDir(), "");
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, printStream, "println", "(java.lang.String)void", null, 1);
        Mockingbird.enterTestMode(SuperRunnerCoverageReader.class);
        List result = superRunnerCoverageReader.read();
        assertNotNull("result", result);
    }
    
    public void testReadWithAggressiveMocks2() throws Throwable {
        SuperRunnerCoverageReader superRunnerCoverageReader = (SuperRunnerCoverageReader) Mockingbird.getProxyObject(SuperRunnerCoverageReader.class, true);
        CrapProject crapProject = (CrapProject) Mockingbird.getProxyObject(CrapProject.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", Mockingbird.getProxyObject(ArrayList.class));
        List list = (List) Mockingbird.getProxyObject(List.class);
        setPrivateField(superRunnerCoverageReader, "project", crapProject);
        Mockingbird.setReturnValue(crapProject.getCoverageDir(), "");
        PrintStream printStream = (PrintStream) Mockingbird.getProxyObject(PrintStream.class);
        MockingbirdSystem.err = printStream;
        Mockingbird.setReturnValue(true, FileUtil.class, "getAllFilesInDirMatchingPattern", "(java.lang.String,java.lang.String,boolean)java.util.List", null, 1);
        Mockingbird.setReturnValue(FileUtil.removeTestClassFiles(null), list);
        Mockingbird.setReturnValue(list.size(), -1);
        Mockingbird.setReturnValue(crapProject.getCoverageDir(), "");
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, printStream, "println", "(java.lang.String)void", null, 1);
        Mockingbird.enterTestMode(SuperRunnerCoverageReader.class);
        List result = superRunnerCoverageReader.read();
        assertNotNull("result", result);
    }
    
    public void testXreadWithAggressiveMocks() throws Throwable {
        SuperRunnerCoverageReader superRunnerCoverageReader = (SuperRunnerCoverageReader) Mockingbird.getProxyObject(SuperRunnerCoverageReader.class, true);
        DataInput dataInput = (DataInput) Mockingbird.getProxyObject(DataInput.class);
        Mockingbird.enterRecordingMode();
        ArrayList arrayList = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        MyCoveragePoint myCoveragePoint = (MyCoveragePoint) Mockingbird.getProxyObject(MyCoveragePoint.class);
        Iterator iterator2 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        MyCoveragePoint myCoveragePoint2 = (MyCoveragePoint) Mockingbird.getProxyObject(MyCoveragePoint.class);
        MyCoveragePoint myCoveragePoint3 = (MyCoveragePoint) Mockingbird.getProxyObject(MyCoveragePoint.class);
        MyCoveragePoint myCoveragePoint4 = (MyCoveragePoint) Mockingbird.getProxyObject(MyCoveragePoint.class);
        Mockingbird.setReturnValue(dataInput.readInt(), -1);
        Mockingbird.enterNormalMode();
        myCoveragePoint.setType(0);
        setPrivateField(myCoveragePoint, "timesReached", new Integer(1));
        myCoveragePoint2.setType(0);
        setPrivateField(myCoveragePoint2, "timesReached", new Integer(-1));
        myCoveragePoint3.setType(-1);
        myCoveragePoint4.setType(-1);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(dataInput.readUTF(), "");
        Mockingbird.setReturnValue(dataInput.readUTF(), "");
        Mockingbird.setReturnValue(dataInput.readLong(), 0L);
        Mockingbird.setReturnValue(dataInput.readUTF(), "");
        Mockingbird.setReturnValue(dataInput.readInt(), 2);
        ArrayList arrayList2 = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList2);
        Mockingbird.setReturnValue(dataInput.readUTF(), "");
        Mockingbird.setReturnValue(false, superRunnerCoverageReader, "makeFullyQualifiedMethodName", "(java.lang.String,java.lang.String)java.lang.String", "", 1);
        Boolean boolean2 = Boolean.FALSE;
        Mockingbird.setReturnValue(false, arrayList2, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(dataInput.readBoolean(), false);
        Mockingbird.setReturnValue(dataInput.readUTF(), "");
        Mockingbird.setReturnValue(false, superRunnerCoverageReader, "makeFullyQualifiedMethodName", "(java.lang.String,java.lang.String)java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, arrayList2, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(dataInput.readBoolean(), false);
        Mockingbird.setReturnValue(dataInput.readInt(), 2);
        HashMap hashMap = (HashMap) Mockingbird.getProxyObject(HashMap.class);
        Mockingbird.replaceObjectForRecording(HashMap.class, "<init>()", hashMap);
        MyCoveragePoint myCoveragePoint5 = (MyCoveragePoint) Mockingbird.getProxyObject(MyCoveragePoint.class);
        Mockingbird.replaceObjectForRecording(MyCoveragePoint.class, "<init>(java.io.DataInput)", myCoveragePoint5);
        Mockingbird.setReturnValue(false, hashMap, "get", "(java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.enterNormalMode();
        myCoveragePoint5.setType(0);
        myCoveragePoint5.setMethodNumber(0);
        Mockingbird.enterRecordingMode();
        ArrayList arrayList3 = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList3);
        Mockingbird.setReturnValue(arrayList3.add(myCoveragePoint5), false);
        Mockingbird.setReturnValue(false, hashMap, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        MyCoveragePoint myCoveragePoint6 = (MyCoveragePoint) Mockingbird.getProxyObject(MyCoveragePoint.class);
        Mockingbird.replaceObjectForRecording(MyCoveragePoint.class, "<init>(java.io.DataInput)", myCoveragePoint6);
        Mockingbird.setReturnValue(arrayList2.size(), 1);
        Mockingbird.enterNormalMode();
        myCoveragePoint6.setType(-1);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(arrayList2.get(0), "");
        Mockingbird.setReturnValue(false, hashMap, "get", "(java.lang.Object)java.lang.Object", null, 1);
        ArrayList arrayList4 = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList4);
        Mockingbird.setReturnValue(arrayList4.iterator(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), myCoveragePoint);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        MethodCoverage methodCoverage = (MethodCoverage) Mockingbird.getProxyObject(MethodCoverage.class);
        Mockingbird.replaceObjectForRecording(MethodCoverage.class, "<init>(java.lang.String,float)", methodCoverage);
        Mockingbird.setReturnValue(arrayList.add(methodCoverage), false);
        Mockingbird.setReturnValue(arrayList2.size(), 2);
        Mockingbird.setReturnValue(arrayList2.get(1), "");
        Mockingbird.setReturnValue(false, hashMap, "get", "(java.lang.Object)java.lang.Object", null, 1);
        ArrayList arrayList5 = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList5);
        Mockingbird.setReturnValue(arrayList5.iterator(), iterator2);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), myCoveragePoint2);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), myCoveragePoint3);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), myCoveragePoint4);
        Mockingbird.setReturnValue(iterator2.hasNext(), false);
        MethodCoverage methodCoverage2 = (MethodCoverage) Mockingbird.getProxyObject(MethodCoverage.class);
        Mockingbird.replaceObjectForRecording(MethodCoverage.class, "<init>(java.lang.String,float)", methodCoverage2);
        Mockingbird.setReturnValue(arrayList.add(methodCoverage2), false);
        Mockingbird.setReturnValue(arrayList2.size(), 1);
        Mockingbird.enterTestMode(SuperRunnerCoverageReader.class);
        List result = superRunnerCoverageReader.Xread(dataInput);
        assertNotNull("result", result);
    }
    
    public void testXreadWithAggressiveMocks1() throws Throwable {
        SuperRunnerCoverageReader superRunnerCoverageReader = (SuperRunnerCoverageReader) Mockingbird.getProxyObject(SuperRunnerCoverageReader.class, true);
        DataInput dataInput = (DataInput) Mockingbird.getProxyObject(DataInput.class);
        Mockingbird.enterRecordingMode();
        ArrayList arrayList = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        MyCoveragePoint myCoveragePoint = (MyCoveragePoint) Mockingbird.getProxyObject(MyCoveragePoint.class);
        Iterator iterator2 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        MyCoveragePoint myCoveragePoint2 = (MyCoveragePoint) Mockingbird.getProxyObject(MyCoveragePoint.class);
        MyCoveragePoint myCoveragePoint3 = (MyCoveragePoint) Mockingbird.getProxyObject(MyCoveragePoint.class);
        MyCoveragePoint myCoveragePoint4 = (MyCoveragePoint) Mockingbird.getProxyObject(MyCoveragePoint.class);
        Mockingbird.setReturnValue(dataInput.readInt(), 4);
        Mockingbird.enterNormalMode();
        myCoveragePoint.setType(0);
        setPrivateField(myCoveragePoint, "timesReached", new Integer(1));
        myCoveragePoint2.setType(0);
        setPrivateField(myCoveragePoint2, "timesReached", new Integer(-1));
        myCoveragePoint3.setType(-1);
        myCoveragePoint4.setType(-1);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(dataInput.readBoolean(), false);
        Mockingbird.setReturnValue(dataInput.readUTF(), "");
        Mockingbird.setReturnValue(dataInput.readUTF(), "");
        Mockingbird.setReturnValue(dataInput.readLong(), 0L);
        Mockingbird.setReturnValue(dataInput.readUTF(), "");
        Mockingbird.setReturnValue(dataInput.readLong(), 0L);
        Mockingbird.setReturnValue(dataInput.readInt(), 2);
        ArrayList arrayList2 = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList2);
        Mockingbird.setReturnValue(dataInput.readUTF(), "");
        Mockingbird.setReturnValue(false, superRunnerCoverageReader, "makeFullyQualifiedMethodName", "(java.lang.String,java.lang.String)java.lang.String", "", 1);
        Boolean boolean2 = Boolean.FALSE;
        Mockingbird.setReturnValue(false, arrayList2, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(dataInput.readBoolean(), false);
        Mockingbird.setReturnValue(dataInput.readUTF(), "");
        Mockingbird.setReturnValue(false, superRunnerCoverageReader, "makeFullyQualifiedMethodName", "(java.lang.String,java.lang.String)java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, arrayList2, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(dataInput.readBoolean(), false);
        Mockingbird.setReturnValue(dataInput.readInt(), 2);
        HashMap hashMap = (HashMap) Mockingbird.getProxyObject(HashMap.class);
        Mockingbird.replaceObjectForRecording(HashMap.class, "<init>()", hashMap);
        MyCoveragePoint myCoveragePoint5 = (MyCoveragePoint) Mockingbird.getProxyObject(MyCoveragePoint.class);
        Mockingbird.replaceObjectForRecording(MyCoveragePoint.class, "<init>(java.io.DataInput)", myCoveragePoint5);
        Mockingbird.setReturnValue(false, hashMap, "get", "(java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.enterNormalMode();
        myCoveragePoint5.setType(0);
        myCoveragePoint5.setMethodNumber(0);
        Mockingbird.enterRecordingMode();
        ArrayList arrayList3 = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList3);
        Mockingbird.setReturnValue(arrayList3.add(myCoveragePoint5), false);
        Mockingbird.setReturnValue(false, hashMap, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        MyCoveragePoint myCoveragePoint6 = (MyCoveragePoint) Mockingbird.getProxyObject(MyCoveragePoint.class);
        Mockingbird.replaceObjectForRecording(MyCoveragePoint.class, "<init>(java.io.DataInput)", myCoveragePoint6);
        Mockingbird.setReturnValue(arrayList2.size(), 1);
        Mockingbird.enterNormalMode();
        myCoveragePoint6.setType(-1);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(arrayList2.get(0), "");
        Mockingbird.setReturnValue(false, hashMap, "get", "(java.lang.Object)java.lang.Object", null, 1);
        ArrayList arrayList4 = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList4);
        Mockingbird.setReturnValue(arrayList4.iterator(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), myCoveragePoint);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        MethodCoverage methodCoverage = (MethodCoverage) Mockingbird.getProxyObject(MethodCoverage.class);
        Mockingbird.replaceObjectForRecording(MethodCoverage.class, "<init>(java.lang.String,float)", methodCoverage);
        Mockingbird.setReturnValue(arrayList.add(methodCoverage), false);
        Mockingbird.setReturnValue(arrayList2.size(), 2);
        Mockingbird.setReturnValue(arrayList2.get(1), "");
        Mockingbird.setReturnValue(false, hashMap, "get", "(java.lang.Object)java.lang.Object", null, 1);
        ArrayList arrayList5 = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList5);
        Mockingbird.setReturnValue(arrayList5.iterator(), iterator2);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), myCoveragePoint2);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), myCoveragePoint3);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), myCoveragePoint4);
        Mockingbird.setReturnValue(iterator2.hasNext(), false);
        MethodCoverage methodCoverage2 = (MethodCoverage) Mockingbird.getProxyObject(MethodCoverage.class);
        Mockingbird.replaceObjectForRecording(MethodCoverage.class, "<init>(java.lang.String,float)", methodCoverage2);
        Mockingbird.setReturnValue(arrayList.add(methodCoverage2), false);
        Mockingbird.setReturnValue(arrayList2.size(), 1);
        Mockingbird.enterTestMode(SuperRunnerCoverageReader.class);
        List result = superRunnerCoverageReader.Xread(dataInput);
        assertNotNull("result", result);
    }
    
    public void testCreateMethodCoveragesThrowsClassCastException() throws Throwable {
        SuperRunnerCoverageReader superRunnerCoverageReader = new SuperRunnerCoverageReader(null);
        Collection arrayList = new ArrayList(100);
        arrayList.add(new Object());
        List arrayList2 = new ArrayList(0);
        arrayList2.add("testString");
        Map hashMap = new HashMap(100, 100.0F);
        hashMap.put(new Integer(0), arrayList);
        try {
            superRunnerCoverageReader.createMethodCoverages(new ArrayList(1000), arrayList2, hashMap);
            fail("Expected ClassCastException to be thrown");
        } catch (ClassCastException ex) {
            assertEquals("ex.getClass()", ClassCastException.class, ex.getClass());
            assertThrownBy(SuperRunnerCoverageReader.class, ex);
        }
    }
    
    public void testCreateMethodCoveragesThrowsClassCastException1() throws Throwable {
        SuperRunnerCoverageReader superRunnerCoverageReader = new SuperRunnerCoverageReader(null);
        Collection arrayList = new ArrayList(100);
        arrayList.add(new Object());
        List arrayList2 = new ArrayList(1000);
        List arrayList3 = new ArrayList(0);
        arrayList3.add("testString");
        arrayList3.add("testString");
        Map hashMap = new HashMap(100, 100.0F);
        Integer integer = new Integer(1);
        hashMap.put(integer, new ArrayList());
        hashMap.put(new Integer(0), new LinkedList());
        hashMap.put(integer, arrayList);
        try {
            superRunnerCoverageReader.createMethodCoverages(arrayList2, arrayList3, hashMap);
            fail("Expected ClassCastException to be thrown");
        } catch (ClassCastException ex) {
            assertEquals("(ArrayList) arrayList2.size()", 1, arrayList2.size());
            assertEquals("ex.getClass()", ClassCastException.class, ex.getClass());
            assertThrownBy(SuperRunnerCoverageReader.class, ex);
        }
    }
    
    public void testCreateMethodCoveragesThrowsClassCastException2() throws Throwable {
        SuperRunnerCoverageReader superRunnerCoverageReader = new SuperRunnerCoverageReader(null);
        ArrayList methodCoverages = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        ArrayList methodNames = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        HashMap covPoints = (HashMap) Mockingbird.getProxyObject(HashMap.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, methodNames, "size", "()int", new Object[] {}, new Integer(50), 1);
        Mockingbird.setReturnValue(false, methodNames, "get", "(int)java.lang.Object", new Object[] {new Integer(0)}, "testString", 1);
        ArrayList arrayList = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.setReturnValue(false, covPoints, "get", "(java.lang.Object)java.lang.Object", new Object[] {new Integer(0)}, arrayList, 1);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.setReturnValue(false, arrayList, "iterator", "()java.util.Iterator", new Object[] {}, iterator, 1);
        Mockingbird.setReturnValue(false, iterator, "hasNext", "()boolean", new Object[] {}, Boolean.FALSE, 1);
        MethodCoverage methodCoverage = (MethodCoverage) Mockingbird.getProxyObject(MethodCoverage.class);
        Mockingbird.replaceObjectForRecording(MethodCoverage.class, "<init>(java.lang.String,float)", methodCoverage);
        Mockingbird.setReturnValue(false, methodCoverages, "add", "(java.lang.Object)boolean", new Object[] {methodCoverage}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, methodNames, "size", "()int", new Object[] {}, new Integer(50), 1);
        Mockingbird.setReturnValue(false, methodNames, "get", "(int)java.lang.Object", new Object[] {new Integer(1)}, "S", 1);
        ArrayList arrayList2 = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.setReturnValue(false, covPoints, "get", "(java.lang.Object)java.lang.Object", new Object[] {new Integer(1)}, arrayList2, 1);
        Iterator iterator2 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.setReturnValue(false, arrayList2, "iterator", "()java.util.Iterator", new Object[] {}, iterator2, 1);
        Mockingbird.setReturnValue(false, iterator2, "hasNext", "()boolean", new Object[] {}, Boolean.FALSE, 1);
        MethodCoverage methodCoverage2 = (MethodCoverage) Mockingbird.getProxyObject(MethodCoverage.class);
        Mockingbird.replaceObjectForRecording(MethodCoverage.class, "<init>(java.lang.String,float)", methodCoverage2);
        Mockingbird.setReturnValue(false, methodCoverages, "add", "(java.lang.Object)boolean", new Object[] {methodCoverage2}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, methodNames, "size", "()int", new Object[] {}, new Integer(50), 1);
        Mockingbird.setReturnValue(false, methodNames, "get", "(int)java.lang.Object", new Object[] {new Integer(2)}, "testString", 1);
        ArrayList arrayList3 = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.setReturnValue(false, covPoints, "get", "(java.lang.Object)java.lang.Object", new Object[] {new Integer(2)}, arrayList3, 1);
        Iterator iterator3 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.setReturnValue(false, arrayList3, "iterator", "()java.util.Iterator", new Object[] {}, iterator3, 1);
        Mockingbird.setReturnValue(false, iterator3, "hasNext", "()boolean", new Object[] {}, Boolean.FALSE, 1);
        MethodCoverage methodCoverage3 = (MethodCoverage) Mockingbird.getProxyObject(MethodCoverage.class);
        Mockingbird.replaceObjectForRecording(MethodCoverage.class, "<init>(java.lang.String,float)", methodCoverage3);
        Mockingbird.setReturnValue(false, methodCoverages, "add", "(java.lang.Object)boolean", new Object[] {methodCoverage3}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, methodNames, "size", "()int", new Object[] {}, new Integer(50), 1);
        Mockingbird.setReturnValue(false, methodNames, "get", "(int)java.lang.Object", new Object[] {new Integer(3)}, "Cannot find ^overage results files in ", 1);
        ArrayList arrayList4 = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.setReturnValue(false, covPoints, "get", "(java.lang.Object)java.lang.Object", new Object[] {new Integer(3)}, arrayList4, 1);
        Iterator iterator4 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.setReturnValue(false, arrayList4, "iterator", "()java.util.Iterator", new Object[] {}, iterator4, 1);
        Mockingbird.setReturnValue(false, iterator4, "hasNext", "()boolean", new Object[] {}, Boolean.FALSE, 1);
        MethodCoverage methodCoverage4 = (MethodCoverage) Mockingbird.getProxyObject(MethodCoverage.class);
        Mockingbird.replaceObjectForRecording(MethodCoverage.class, "<init>(java.lang.String,float)", methodCoverage4);
        Mockingbird.setReturnValue(false, methodCoverages, "add", "(java.lang.Object)boolean", new Object[] {methodCoverage4}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, methodNames, "size", "()int", new Object[] {}, new Integer(50), 1);
        Mockingbird.setReturnValue(false, methodNames, "get", "(int)java.lang.Object", new Object[] {new Integer(4)}, "testString", 1);
        ArrayList arrayList5 = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.setReturnValue(false, covPoints, "get", "(java.lang.Object)java.lang.Object", new Object[] {new Integer(4)}, arrayList5, 1);
        Iterator iterator5 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.setReturnValue(false, arrayList5, "iterator", "()java.util.Iterator", new Object[] {}, iterator5, 1);
        Mockingbird.setReturnValue(false, iterator5, "hasNext", "()boolean", new Object[] {}, Boolean.FALSE, 1);
        MethodCoverage methodCoverage5 = (MethodCoverage) Mockingbird.getProxyObject(MethodCoverage.class);
        Mockingbird.replaceObjectForRecording(MethodCoverage.class, "<init>(java.lang.String,float)", methodCoverage5);
        Mockingbird.setReturnValue(false, methodCoverages, "add", "(java.lang.Object)boolean", new Object[] {methodCoverage5}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, methodNames, "size", "()int", new Object[] {}, new Integer(50), 1);
        Mockingbird.setReturnValue(false, methodNames, "get", "(int)java.lang.Object", new Object[] {new Integer(5)}, "testString", 1);
        ArrayList arrayList6 = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.setReturnValue(false, covPoints, "get", "(java.lang.Object)java.lang.Object", new Object[] {new Integer(5)}, arrayList6, 1);
        Iterator iterator6 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.setReturnValue(false, arrayList6, "iterator", "()java.util.Iterator", new Object[] {}, iterator6, 1);
        Mockingbird.setReturnValue(false, iterator6, "hasNext", "()boolean", new Object[] {}, Boolean.FALSE, 1);
        MethodCoverage methodCoverage6 = (MethodCoverage) Mockingbird.getProxyObject(MethodCoverage.class);
        Mockingbird.replaceObjectForRecording(MethodCoverage.class, "<init>(java.lang.String,float)", methodCoverage6);
        Mockingbird.setReturnValue(false, methodCoverages, "add", "(java.lang.Object)boolean", new Object[] {methodCoverage6}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, methodNames, "size", "()int", new Object[] {}, new Integer(50), 1);
        Mockingbird.setReturnValue(false, methodNames, "get", "(int)java.lang.Object", new Object[] {new Integer(6)}, "U", 1);
        ArrayList arrayList7 = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.setReturnValue(false, covPoints, "get", "(java.lang.Object)java.lang.Object", new Object[] {new Integer(6)}, arrayList7, 1);
        Iterator iterator7 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.setReturnValue(false, arrayList7, "iterator", "()java.util.Iterator", new Object[] {}, iterator7, 1);
        Mockingbird.setReturnValue(false, iterator7, "hasNext", "()boolean", new Object[] {}, Boolean.FALSE, 1);
        MethodCoverage methodCoverage7 = (MethodCoverage) Mockingbird.getProxyObject(MethodCoverage.class);
        Mockingbird.replaceObjectForRecording(MethodCoverage.class, "<init>(java.lang.String,float)", methodCoverage7);
        Mockingbird.setReturnValue(false, methodCoverages, "add", "(java.lang.Object)boolean", new Object[] {methodCoverage7}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, methodNames, "size", "()int", new Object[] {}, new Integer(50), 1);
        Mockingbird.setReturnValue(false, methodNames, "get", "(int)java.lang.Object", new Object[] {new Integer(7)}, "testString", 1);
        ArrayList arrayList8 = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.setReturnValue(false, covPoints, "get", "(java.lang.Object)java.lang.Object", new Object[] {new Integer(7)}, arrayList8, 1);
        Iterator iterator8 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.setReturnValue(false, arrayList8, "iterator", "()java.util.Iterator", new Object[] {}, iterator8, 1);
        Mockingbird.setReturnValue(false, iterator8, "hasNext", "()boolean", new Object[] {}, Boolean.FALSE, 1);
        MethodCoverage methodCoverage8 = (MethodCoverage) Mockingbird.getProxyObject(MethodCoverage.class);
        Mockingbird.replaceObjectForRecording(MethodCoverage.class, "<init>(java.lang.String,float)", methodCoverage8);
        Mockingbird.setReturnValue(false, methodCoverages, "add", "(java.lang.Object)boolean", new Object[] {methodCoverage8}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, methodNames, "size", "()int", new Object[] {}, new Integer(50), 1);
        Mockingbird.setReturnValue(false, methodNames, "get", "(int)java.lang.Object", new Object[] {new Integer(8)}, "testString", 1);
        ArrayList arrayList9 = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.setReturnValue(false, covPoints, "get", "(java.lang.Object)java.lang.Object", new Object[] {new Integer(8)}, arrayList9, 1);
        Iterator iterator9 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.setReturnValue(false, arrayList9, "iterator", "()java.util.Iterator", new Object[] {}, iterator9, 1);
        Mockingbird.setReturnValue(false, iterator9, "hasNext", "()boolean", new Object[] {}, Boolean.FALSE, 1);
        MethodCoverage methodCoverage9 = (MethodCoverage) Mockingbird.getProxyObject(MethodCoverage.class);
        Mockingbird.replaceObjectForRecording(MethodCoverage.class, "<init>(java.lang.String,float)", methodCoverage9);
        Mockingbird.setReturnValue(false, methodCoverages, "add", "(java.lang.Object)boolean", new Object[] {methodCoverage9}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, methodNames, "size", "()int", new Object[] {}, new Integer(50), 1);
        Mockingbird.setReturnValue(false, methodNames, "get", "(int)java.lang.Object", new Object[] {new Integer(9)}, ".", 1);
        ArrayList arrayList10 = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.setReturnValue(false, covPoints, "get", "(java.lang.Object)java.lang.Object", new Object[] {new Integer(9)}, arrayList10, 1);
        Iterator iterator10 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.setReturnValue(false, arrayList10, "iterator", "()java.util.Iterator", new Object[] {}, iterator10, 1);
        Mockingbird.setReturnValue(false, iterator10, "hasNext", "()boolean", new Object[] {}, Boolean.FALSE, 1);
        MethodCoverage methodCoverage10 = (MethodCoverage) Mockingbird.getProxyObject(MethodCoverage.class);
        Mockingbird.replaceObjectForRecording(MethodCoverage.class, "<init>(java.lang.String,float)", methodCoverage10);
        Mockingbird.setReturnValue(false, methodCoverages, "add", "(java.lang.Object)boolean", new Object[] {methodCoverage10}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, methodNames, "size", "()int", new Object[] {}, new Integer(50), 1);
        Mockingbird.setReturnValue(false, methodNames, "get", "(int)java.lang.Object", new Object[] {new Integer(10)}, "Illegl Capacity: ", 1);
        ArrayList arrayList11 = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.setReturnValue(false, covPoints, "get", "(java.lang.Object)java.lang.Object", new Object[] {new Integer(10)}, arrayList11, 1);
        Iterator iterator11 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.setReturnValue(false, arrayList11, "iterator", "()java.util.Iterator", new Object[] {}, iterator11, 1);
        Mockingbird.setReturnValue(false, iterator11, "hasNext", "()boolean", new Object[] {}, Boolean.FALSE, 1);
        MethodCoverage methodCoverage11 = (MethodCoverage) Mockingbird.getProxyObject(MethodCoverage.class);
        Mockingbird.replaceObjectForRecording(MethodCoverage.class, "<init>(java.lang.String,float)", methodCoverage11);
        Mockingbird.setReturnValue(false, methodCoverages, "add", "(java.lang.Object)boolean", new Object[] {methodCoverage11}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, methodNames, "size", "()int", new Object[] {}, new Integer(50), 1);
        Mockingbird.setReturnValue(false, methodNames, "get", "(int)java.lang.Object", new Object[] {new Integer(11)}, ".*.cov", 1);
        ArrayList arrayList12 = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.setReturnValue(false, covPoints, "get", "(java.lang.Object)java.lang.Object", new Object[] {new Integer(11)}, arrayList12, 1);
        Iterator iterator12 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.setReturnValue(false, arrayList12, "iterator", "()java.util.Iterator", new Object[] {}, iterator12, 1);
        Mockingbird.setReturnValue(false, iterator12, "hasNext", "()boolean", new Object[] {}, Boolean.FALSE, 1);
        MethodCoverage methodCoverage12 = (MethodCoverage) Mockingbird.getProxyObject(MethodCoverage.class);
        Mockingbird.replaceObjectForRecording(MethodCoverage.class, "<init>(java.lang.String,float)", methodCoverage12);
        Mockingbird.setReturnValue(false, methodCoverages, "add", "(java.lang.Object)boolean", new Object[] {methodCoverage12}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, methodNames, "size", "()int", new Object[] {}, new Integer(50), 1);
        Mockingbird.setReturnValue(false, methodNames, "get", "(int)java.lang.Object", new Object[] {new Integer(12)}, "testString", 1);
        ArrayList arrayList13 = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.setReturnValue(false, covPoints, "get", "(java.lang.Object)java.lang.Object", new Object[] {new Integer(12)}, arrayList13, 1);
        Iterator iterator13 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.setReturnValue(false, arrayList13, "iterator", "()java.util.Iterator", new Object[] {}, iterator13, 1);
        Mockingbird.setReturnValue(false, iterator13, "hasNext", "()boolean", new Object[] {}, Boolean.FALSE, 1);
        MethodCoverage methodCoverage13 = (MethodCoverage) Mockingbird.getProxyObject(MethodCoverage.class);
        Mockingbird.replaceObjectForRecording(MethodCoverage.class, "<init>(java.lang.String,float)", methodCoverage13);
        Mockingbird.setReturnValue(false, methodCoverages, "add", "(java.lang.Object)boolean", new Object[] {methodCoverage13}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, methodNames, "size", "()int", new Object[] {}, new Integer(50), 1);
        Mockingbird.setReturnValue(false, methodNames, "get", "(int)java.lang.Object", new Object[] {new Integer(13)}, "testString", 1);
        ArrayList arrayList14 = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.setReturnValue(false, covPoints, "get", "(java.lang.Object)java.lang.Object", new Object[] {new Integer(13)}, arrayList14, 1);
        Iterator iterator14 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.setReturnValue(false, arrayList14, "iterator", "()java.util.Iterator", new Object[] {}, iterator14, 1);
        Mockingbird.setReturnValue(false, iterator14, "hasNext", "()boolean", new Object[] {}, Boolean.FALSE, 1);
        MethodCoverage methodCoverage14 = (MethodCoverage) Mockingbird.getProxyObject(MethodCoverage.class);
        Mockingbird.replaceObjectForRecording(MethodCoverage.class, "<init>(java.lang.String,float)", methodCoverage14);
        Mockingbird.setReturnValue(false, methodCoverages, "add", "(java.lang.Object)boolean", new Object[] {methodCoverage14}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, methodNames, "size", "()int", new Object[] {}, new Integer(50), 1);
        Mockingbird.setReturnValue(false, methodNames, "get", "(int)java.lang.Object", new Object[] {new Integer(14)}, "testString", 1);
        ArrayList arrayList15 = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.setReturnValue(false, covPoints, "get", "(java.lang.Object)java.lang.Object", new Object[] {new Integer(14)}, arrayList15, 1);
        Iterator iterator15 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.setReturnValue(false, arrayList15, "iterator", "()java.util.Iterator", new Object[] {}, iterator15, 1);
        Mockingbird.setReturnValue(false, iterator15, "hasNext", "()boolean", new Object[] {}, Boolean.FALSE, 1);
        MethodCoverage methodCoverage15 = (MethodCoverage) Mockingbird.getProxyObject(MethodCoverage.class);
        Mockingbird.replaceObjectForRecording(MethodCoverage.class, "<init>(java.lang.String,float)", methodCoverage15);
        Mockingbird.setReturnValue(false, methodCoverages, "add", "(java.lang.Object)boolean", new Object[] {methodCoverage15}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, methodNames, "size", "()int", new Object[] {}, new Integer(50), 1);
        Mockingbird.setReturnValue(false, methodNames, "get", "(int)java.lang.Object", new Object[] {new Integer(15)}, "Illegal ?apacity: ", 1);
        ArrayList arrayList16 = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.setReturnValue(false, covPoints, "get", "(java.lang.Object)java.lang.Object", new Object[] {new Integer(15)}, arrayList16, 1);
        Iterator iterator16 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.setReturnValue(false, arrayList16, "iterator", "()java.util.Iterator", new Object[] {}, iterator16, 1);
        Mockingbird.setReturnValue(false, iterator16, "hasNext", "()boolean", new Object[] {}, Boolean.FALSE, 1);
        MethodCoverage methodCoverage16 = (MethodCoverage) Mockingbird.getProxyObject(MethodCoverage.class);
        Mockingbird.replaceObjectForRecording(MethodCoverage.class, "<init>(java.lang.String,float)", methodCoverage16);
        Mockingbird.setReturnValue(false, methodCoverages, "add", "(java.lang.Object)boolean", new Object[] {methodCoverage16}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, methodNames, "size", "()int", new Object[] {}, new Integer(50), 1);
        Mockingbird.setReturnValue(false, methodNames, "get", "(int)java.lang.Object", new Object[] {new Integer(16)}, "testString", 1);
        ArrayList arrayList17 = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.setReturnValue(false, covPoints, "get", "(java.lang.Object)java.lang.Object", new Object[] {new Integer(16)}, arrayList17, 1);
        Iterator iterator17 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.setReturnValue(false, arrayList17, "iterator", "()java.util.Iterator", new Object[] {}, iterator17, 1);
        Mockingbird.setReturnValue(false, iterator17, "hasNext", "()boolean", new Object[] {}, Boolean.FALSE, 1);
        MethodCoverage methodCoverage17 = (MethodCoverage) Mockingbird.getProxyObject(MethodCoverage.class);
        Mockingbird.replaceObjectForRecording(MethodCoverage.class, "<init>(java.lang.String,float)", methodCoverage17);
        Mockingbird.setReturnValue(false, methodCoverages, "add", "(java.lang.Object)boolean", new Object[] {methodCoverage17}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, methodNames, "size", "()int", new Object[] {}, new Integer(50), 1);
        Mockingbird.setReturnValue(false, methodNames, "get", "(int)java.lang.Object", new Object[] {new Integer(17)}, "Cannot find coverage results files in ", 1);
        ArrayList arrayList18 = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.setReturnValue(false, covPoints, "get", "(java.lang.Object)java.lang.Object", new Object[] {new Integer(17)}, arrayList18, 1);
        Iterator iterator18 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.setReturnValue(false, arrayList18, "iterator", "()java.util.Iterator", new Object[] {}, iterator18, 1);
        Mockingbird.setReturnValue(false, iterator18, "hasNext", "()boolean", new Object[] {}, Boolean.FALSE, 1);
        MethodCoverage methodCoverage18 = (MethodCoverage) Mockingbird.getProxyObject(MethodCoverage.class);
        Mockingbird.replaceObjectForRecording(MethodCoverage.class, "<init>(java.lang.String,float)", methodCoverage18);
        Mockingbird.setReturnValue(false, methodCoverages, "add", "(java.lang.Object)boolean", new Object[] {methodCoverage18}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, methodNames, "size", "()int", new Object[] {}, new Integer(50), 1);
        Mockingbird.setReturnValue(false, methodNames, "get", "(int)java.lang.Object", new Object[] {new Integer(18)}, "testString", 1);
        ArrayList arrayList19 = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.setReturnValue(false, covPoints, "get", "(java.lang.Object)java.lang.Object", new Object[] {new Integer(18)}, arrayList19, 1);
        Iterator iterator19 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.setReturnValue(false, arrayList19, "iterator", "()java.util.Iterator", new Object[] {}, iterator19, 1);
        Mockingbird.setReturnValue(false, iterator19, "hasNext", "()boolean", new Object[] {}, Boolean.FALSE, 1);
        MethodCoverage methodCoverage19 = (MethodCoverage) Mockingbird.getProxyObject(MethodCoverage.class);
        Mockingbird.replaceObjectForRecording(MethodCoverage.class, "<init>(java.lang.String,float)", methodCoverage19);
        Mockingbird.setReturnValue(false, methodCoverages, "add", "(java.lang.Object)boolean", new Object[] {methodCoverage19}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, methodNames, "size", "()int", new Object[] {}, new Integer(50), 1);
        Mockingbird.setReturnValue(false, methodNames, "get", "(int)java.lang.Object", new Object[] {new Integer(19)}, "testString", 1);
        ArrayList arrayList20 = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.setReturnValue(false, covPoints, "get", "(java.lang.Object)java.lang.Object", new Object[] {new Integer(19)}, arrayList20, 1);
        Iterator iterator20 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.setReturnValue(false, arrayList20, "iterator", "()java.util.Iterator", new Object[] {}, iterator20, 1);
        Mockingbird.setReturnValue(false, iterator20, "hasNext", "()boolean", new Object[] {}, Boolean.FALSE, 1);
        MethodCoverage methodCoverage20 = (MethodCoverage) Mockingbird.getProxyObject(MethodCoverage.class);
        Mockingbird.replaceObjectForRecording(MethodCoverage.class, "<init>(java.lang.String,float)", methodCoverage20);
        Mockingbird.setReturnValue(false, methodCoverages, "add", "(java.lang.Object)boolean", new Object[] {methodCoverage20}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, methodNames, "size", "()int", new Object[] {}, new Integer(50), 1);
        Mockingbird.setReturnValue(false, methodNames, "get", "(int)java.lang.Object", new Object[] {new Integer(20)}, "testString", 1);
        ArrayList arrayList21 = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.setReturnValue(false, covPoints, "get", "(java.lang.Object)java.lang.Object", new Object[] {new Integer(20)}, arrayList21, 1);
        Iterator iterator21 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.setReturnValue(false, arrayList21, "iterator", "()java.util.Iterator", new Object[] {}, iterator21, 1);
        Mockingbird.setReturnValue(false, iterator21, "hasNext", "()boolean", new Object[] {}, Boolean.FALSE, 1);
        MethodCoverage methodCoverage21 = (MethodCoverage) Mockingbird.getProxyObject(MethodCoverage.class);
        Mockingbird.replaceObjectForRecording(MethodCoverage.class, "<init>(java.lang.String,float)", methodCoverage21);
        Mockingbird.setReturnValue(false, methodCoverages, "add", "(java.lang.Object)boolean", new Object[] {methodCoverage21}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, methodNames, "size", "()int", new Object[] {}, new Integer(50), 1);
        Mockingbird.setReturnValue(false, methodNames, "get", "(int)java.lang.Object", new Object[] {new Integer(21)}, ".", 1);
        ArrayList arrayList22 = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.setReturnValue(false, covPoints, "get", "(java.lang.Object)java.lang.Object", new Object[] {new Integer(21)}, arrayList22, 1);
        Iterator iterator22 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.setReturnValue(false, arrayList22, "iterator", "()java.util.Iterator", new Object[] {}, iterator22, 1);
        Mockingbird.setReturnValue(false, iterator22, "hasNext", "()boolean", new Object[] {}, Boolean.FALSE, 1);
        MethodCoverage methodCoverage22 = (MethodCoverage) Mockingbird.getProxyObject(MethodCoverage.class);
        Mockingbird.replaceObjectForRecording(MethodCoverage.class, "<init>(java.lang.String,float)", methodCoverage22);
        Mockingbird.setReturnValue(false, methodCoverages, "add", "(java.lang.Object)boolean", new Object[] {methodCoverage22}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, methodNames, "size", "()int", new Object[] {}, new Integer(50), 1);
        Mockingbird.setReturnValue(false, methodNames, "get", "(int)java.lang.Object", new Object[] {new Integer(22)}, "testString", 1);
        ArrayList arrayList23 = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.setReturnValue(false, covPoints, "get", "(java.lang.Object)java.lang.Object", new Object[] {new Integer(22)}, arrayList23, 1);
        Iterator iterator23 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.setReturnValue(false, arrayList23, "iterator", "()java.util.Iterator", new Object[] {}, iterator23, 1);
        Mockingbird.setReturnValue(false, iterator23, "hasNext", "()boolean", new Object[] {}, Boolean.FALSE, 1);
        MethodCoverage methodCoverage23 = (MethodCoverage) Mockingbird.getProxyObject(MethodCoverage.class);
        Mockingbird.replaceObjectForRecording(MethodCoverage.class, "<init>(java.lang.String,float)", methodCoverage23);
        Mockingbird.setReturnValue(false, methodCoverages, "add", "(java.lang.Object)boolean", new Object[] {methodCoverage23}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, methodNames, "size", "()int", new Object[] {}, new Integer(50), 1);
        Mockingbird.setReturnValue(false, methodNames, "get", "(int)java.lang.Object", new Object[] {new Integer(23)}, "testString", 1);
        ArrayList arrayList24 = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.setReturnValue(false, covPoints, "get", "(java.lang.Object)java.lang.Object", new Object[] {new Integer(23)}, arrayList24, 1);
        Iterator iterator24 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.setReturnValue(false, arrayList24, "iterator", "()java.util.Iterator", new Object[] {}, iterator24, 1);
        Mockingbird.setReturnValue(false, iterator24, "hasNext", "()boolean", new Object[] {}, Boolean.FALSE, 1);
        MethodCoverage methodCoverage24 = (MethodCoverage) Mockingbird.getProxyObject(MethodCoverage.class);
        Mockingbird.replaceObjectForRecording(MethodCoverage.class, "<init>(java.lang.String,float)", methodCoverage24);
        Mockingbird.setReturnValue(false, methodCoverages, "add", "(java.lang.Object)boolean", new Object[] {methodCoverage24}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, methodNames, "size", "()int", new Object[] {}, new Integer(50), 1);
        Mockingbird.setReturnValue(false, methodNames, "get", "(int)java.lang.Object", new Object[] {new Integer(24)}, "testString", 1);
        ArrayList arrayList25 = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.setReturnValue(false, covPoints, "get", "(java.lang.Object)java.lang.Object", new Object[] {new Integer(24)}, arrayList25, 1);
        Iterator iterator25 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.setReturnValue(false, arrayList25, "iterator", "()java.util.Iterator", new Object[] {}, iterator25, 1);
        Mockingbird.setReturnValue(false, iterator25, "hasNext", "()boolean", new Object[] {}, Boolean.FALSE, 1);
        MethodCoverage methodCoverage25 = (MethodCoverage) Mockingbird.getProxyObject(MethodCoverage.class);
        Mockingbird.replaceObjectForRecording(MethodCoverage.class, "<init>(java.lang.String,float)", methodCoverage25);
        Mockingbird.setReturnValue(false, methodCoverages, "add", "(java.lang.Object)boolean", new Object[] {methodCoverage25}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, methodNames, "size", "()int", new Object[] {}, new Integer(50), 1);
        Mockingbird.setReturnValue(false, methodNames, "get", "(int)java.lang.Object", new Object[] {new Integer(25)}, "testString", 1);
        ArrayList arrayList26 = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.setReturnValue(false, covPoints, "get", "(java.lang.Object)java.lang.Object", new Object[] {new Integer(25)}, arrayList26, 1);
        Iterator iterator26 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.setReturnValue(false, arrayList26, "iterator", "()java.util.Iterator", new Object[] {}, iterator26, 1);
        Mockingbird.setReturnValue(false, iterator26, "hasNext", "()boolean", new Object[] {}, Boolean.FALSE, 1);
        MethodCoverage methodCoverage26 = (MethodCoverage) Mockingbird.getProxyObject(MethodCoverage.class);
        Mockingbird.replaceObjectForRecording(MethodCoverage.class, "<init>(java.lang.String,float)", methodCoverage26);
        Mockingbird.setReturnValue(false, methodCoverages, "add", "(java.lang.Object)boolean", new Object[] {methodCoverage26}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, methodNames, "size", "()int", new Object[] {}, new Integer(50), 1);
        Mockingbird.setReturnValue(false, methodNames, "get", "(int)java.lang.Object", new Object[] {new Integer(26)}, "", 1);
        Mockingbird.setReturnValue(false, covPoints, "get", "(java.lang.Object)java.lang.Object", new Object[] {new Integer(26)}, null, 1);
        MethodCoverage methodCoverage27 = (MethodCoverage) Mockingbird.getProxyObject(MethodCoverage.class);
        Mockingbird.replaceObjectForRecording(MethodCoverage.class, "<init>(java.lang.String,float)", methodCoverage27);
        Mockingbird.setReturnValue(false, methodCoverages, "add", "(java.lang.Object)boolean", new Object[] {methodCoverage27}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, methodNames, "size", "()int", new Object[] {}, new Integer(50), 1);
        Mockingbird.setReturnValue(false, methodNames, "get", "(int)java.lang.Object", new Object[] {new Integer(27)}, "testString", 1);
        ArrayList arrayList27 = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.setReturnValue(false, covPoints, "get", "(java.lang.Object)java.lang.Object", new Object[] {new Integer(27)}, arrayList27, 1);
        Iterator iterator27 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.setReturnValue(false, arrayList27, "iterator", "()java.util.Iterator", new Object[] {}, iterator27, 1);
        Mockingbird.setReturnValue(false, iterator27, "hasNext", "()boolean", new Object[] {}, Boolean.FALSE, 1);
        MethodCoverage methodCoverage28 = (MethodCoverage) Mockingbird.getProxyObject(MethodCoverage.class);
        Mockingbird.replaceObjectForRecording(MethodCoverage.class, "<init>(java.lang.String,float)", methodCoverage28);
        Mockingbird.setReturnValue(false, methodCoverages, "add", "(java.lang.Object)boolean", new Object[] {methodCoverage28}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, methodNames, "size", "()int", new Object[] {}, new Integer(50), 1);
        Mockingbird.setReturnValue(false, methodNames, "get", "(int)java.lang.Object", new Object[] {new Integer(28)}, "testString", 1);
        ArrayList arrayList28 = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.setReturnValue(false, covPoints, "get", "(java.lang.Object)java.lang.Object", new Object[] {new Integer(28)}, arrayList28, 1);
        Iterator iterator28 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.setReturnValue(false, arrayList28, "iterator", "()java.util.Iterator", new Object[] {}, iterator28, 1);
        Mockingbird.setReturnValue(false, iterator28, "hasNext", "()boolean", new Object[] {}, Boolean.FALSE, 1);
        MethodCoverage methodCoverage29 = (MethodCoverage) Mockingbird.getProxyObject(MethodCoverage.class);
        Mockingbird.replaceObjectForRecording(MethodCoverage.class, "<init>(java.lang.String,float)", methodCoverage29);
        Mockingbird.setReturnValue(false, methodCoverages, "add", "(java.lang.Object)boolean", new Object[] {methodCoverage29}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, methodNames, "size", "()int", new Object[] {}, new Integer(50), 1);
        Mockingbird.setReturnValue(false, methodNames, "get", "(int)java.lang.Object", new Object[] {new Integer(29)}, "testString", 1);
        ArrayList arrayList29 = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.setReturnValue(false, covPoints, "get", "(java.lang.Object)java.lang.Object", new Object[] {new Integer(29)}, arrayList29, 1);
        Iterator iterator29 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.setReturnValue(false, arrayList29, "iterator", "()java.util.Iterator", new Object[] {}, iterator29, 1);
        Mockingbird.setReturnValue(false, iterator29, "hasNext", "()boolean", new Object[] {}, Boolean.FALSE, 1);
        MethodCoverage methodCoverage30 = (MethodCoverage) Mockingbird.getProxyObject(MethodCoverage.class);
        Mockingbird.replaceObjectForRecording(MethodCoverage.class, "<init>(java.lang.String,float)", methodCoverage30);
        Mockingbird.setReturnValue(false, methodCoverages, "add", "(java.lang.Object)boolean", new Object[] {methodCoverage30}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, methodNames, "size", "()int", new Object[] {}, new Integer(50), 1);
        Mockingbird.setReturnValue(false, methodNames, "get", "(int)java.lang.Object", new Object[] {new Integer(30)}, "Illegal\\ Capacity: ", 1);
        ArrayList arrayList30 = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.setReturnValue(false, covPoints, "get", "(java.lang.Object)java.lang.Object", new Object[] {new Integer(30)}, arrayList30, 1);
        Iterator iterator30 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.setReturnValue(false, arrayList30, "iterator", "()java.util.Iterator", new Object[] {}, iterator30, 1);
        Mockingbird.setReturnValue(false, iterator30, "hasNext", "()boolean", new Object[] {}, Boolean.FALSE, 1);
        MethodCoverage methodCoverage31 = (MethodCoverage) Mockingbird.getProxyObject(MethodCoverage.class);
        Mockingbird.replaceObjectForRecording(MethodCoverage.class, "<init>(java.lang.String,float)", methodCoverage31);
        Mockingbird.setReturnValue(false, methodCoverages, "add", "(java.lang.Object)boolean", new Object[] {methodCoverage31}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, methodNames, "size", "()int", new Object[] {}, new Integer(50), 1);
        Mockingbird.setReturnValue(false, methodNames, "get", "(int)java.lang.Object", new Object[] {new Integer(31)}, "testString", 1);
        ArrayList arrayList31 = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.setReturnValue(false, covPoints, "get", "(java.lang.Object)java.lang.Object", new Object[] {new Integer(31)}, arrayList31, 1);
        Iterator iterator31 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.setReturnValue(false, arrayList31, "iterator", "()java.util.Iterator", new Object[] {}, iterator31, 1);
        Mockingbird.setReturnValue(false, iterator31, "hasNext", "()boolean", new Object[] {}, Boolean.FALSE, 1);
        MethodCoverage methodCoverage32 = (MethodCoverage) Mockingbird.getProxyObject(MethodCoverage.class);
        Mockingbird.replaceObjectForRecording(MethodCoverage.class, "<init>(java.lang.String,float)", methodCoverage32);
        Mockingbird.setReturnValue(false, methodCoverages, "add", "(java.lang.Object)boolean", new Object[] {methodCoverage32}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, methodNames, "size", "()int", new Object[] {}, new Integer(50), 1);
        Mockingbird.setReturnValue(false, methodNames, "get", "(int)java.lang.Object", new Object[] {new Integer(32)}, "aJbcdefghijklmnopqrstuvwxyz", 1);
        ArrayList arrayList32 = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.setReturnValue(false, covPoints, "get", "(java.lang.Object)java.lang.Object", new Object[] {new Integer(32)}, arrayList32, 1);
        Iterator iterator32 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.setReturnValue(false, arrayList32, "iterator", "()java.util.Iterator", new Object[] {}, iterator32, 1);
        Mockingbird.setReturnValue(false, iterator32, "hasNext", "()boolean", new Object[] {}, Boolean.FALSE, 1);
        MethodCoverage methodCoverage33 = (MethodCoverage) Mockingbird.getProxyObject(MethodCoverage.class);
        Mockingbird.replaceObjectForRecording(MethodCoverage.class, "<init>(java.lang.String,float)", methodCoverage33);
        Mockingbird.setReturnValue(false, methodCoverages, "add", "(java.lang.Object)boolean", new Object[] {methodCoverage33}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, methodNames, "size", "()int", new Object[] {}, new Integer(50), 1);
        Mockingbird.setReturnValue(false, methodNames, "get", "(int)java.lang.Object", new Object[] {new Integer(33)}, "testString", 1);
        ArrayList arrayList33 = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.setReturnValue(false, covPoints, "get", "(java.lang.Object)java.lang.Object", new Object[] {new Integer(33)}, arrayList33, 1);
        Iterator iterator33 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.setReturnValue(false, arrayList33, "iterator", "()java.util.Iterator", new Object[] {}, iterator33, 1);
        Mockingbird.setReturnValue(false, iterator33, "hasNext", "()boolean", new Object[] {}, Boolean.FALSE, 1);
        MethodCoverage methodCoverage34 = (MethodCoverage) Mockingbird.getProxyObject(MethodCoverage.class);
        Mockingbird.replaceObjectForRecording(MethodCoverage.class, "<init>(java.lang.String,float)", methodCoverage34);
        Mockingbird.setReturnValue(false, methodCoverages, "add", "(java.lang.Object)boolean", new Object[] {methodCoverage34}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, methodNames, "size", "()int", new Object[] {}, new Integer(50), 1);
        Mockingbird.setReturnValue(false, methodNames, "get", "(int)java.lang.Object", new Object[] {new Integer(34)}, "testString", 1);
        ArrayList arrayList34 = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.setReturnValue(false, covPoints, "get", "(java.lang.Object)java.lang.Object", new Object[] {new Integer(34)}, arrayList34, 1);
        Iterator iterator34 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.setReturnValue(false, arrayList34, "iterator", "()java.util.Iterator", new Object[] {}, iterator34, 1);
        Mockingbird.setReturnValue(false, iterator34, "hasNext", "()boolean", new Object[] {}, Boolean.FALSE, 1);
        MethodCoverage methodCoverage35 = (MethodCoverage) Mockingbird.getProxyObject(MethodCoverage.class);
        Mockingbird.replaceObjectForRecording(MethodCoverage.class, "<init>(java.lang.String,float)", methodCoverage35);
        Mockingbird.setReturnValue(false, methodCoverages, "add", "(java.lang.Object)boolean", new Object[] {methodCoverage35}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, methodNames, "size", "()int", new Object[] {}, new Integer(50), 1);
        Mockingbird.setReturnValue(false, methodNames, "get", "(int)java.lang.Object", new Object[] {new Integer(35)}, "testString", 1);
        ArrayList arrayList35 = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.setReturnValue(false, covPoints, "get", "(java.lang.Object)java.lang.Object", new Object[] {new Integer(35)}, arrayList35, 1);
        Iterator iterator35 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.setReturnValue(false, arrayList35, "iterator", "()java.util.Iterator", new Object[] {}, iterator35, 1);
        Mockingbird.setReturnValue(false, iterator35, "hasNext", "()boolean", new Object[] {}, Boolean.FALSE, 1);
        MethodCoverage methodCoverage36 = (MethodCoverage) Mockingbird.getProxyObject(MethodCoverage.class);
        Mockingbird.replaceObjectForRecording(MethodCoverage.class, "<init>(java.lang.String,float)", methodCoverage36);
        Mockingbird.setReturnValue(false, methodCoverages, "add", "(java.lang.Object)boolean", new Object[] {methodCoverage36}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, methodNames, "size", "()int", new Object[] {}, new Integer(50), 1);
        Mockingbird.setReturnValue(false, methodNames, "get", "(int)java.lang.Object", new Object[] {new Integer(36)}, "testString", 1);
        ArrayList arrayList36 = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.setReturnValue(false, covPoints, "get", "(java.lang.Object)java.lang.Object", new Object[] {new Integer(36)}, arrayList36, 1);
        Iterator iterator36 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.setReturnValue(false, arrayList36, "iterator", "()java.util.Iterator", new Object[] {}, iterator36, 1);
        Mockingbird.setReturnValue(false, iterator36, "hasNext", "()boolean", new Object[] {}, Boolean.FALSE, 1);
        MethodCoverage methodCoverage37 = (MethodCoverage) Mockingbird.getProxyObject(MethodCoverage.class);
        Mockingbird.replaceObjectForRecording(MethodCoverage.class, "<init>(java.lang.String,float)", methodCoverage37);
        Mockingbird.setReturnValue(false, methodCoverages, "add", "(java.lang.Object)boolean", new Object[] {methodCoverage37}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, methodNames, "size", "()int", new Object[] {}, new Integer(50), 1);
        Mockingbird.setReturnValue(false, methodNames, "get", "(int)java.lang.Object", new Object[] {new Integer(37)}, "testString", 1);
        ArrayList arrayList37 = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.setReturnValue(false, covPoints, "get", "(java.lang.Object)java.lang.Object", new Object[] {new Integer(37)}, arrayList37, 1);
        Iterator iterator37 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.setReturnValue(false, arrayList37, "iterator", "()java.util.Iterator", new Object[] {}, iterator37, 1);
        Mockingbird.setReturnValue(false, iterator37, "hasNext", "()boolean", new Object[] {}, Boolean.FALSE, 1);
        MethodCoverage methodCoverage38 = (MethodCoverage) Mockingbird.getProxyObject(MethodCoverage.class);
        Mockingbird.replaceObjectForRecording(MethodCoverage.class, "<init>(java.lang.String,float)", methodCoverage38);
        Mockingbird.setReturnValue(false, methodCoverages, "add", "(java.lang.Object)boolean", new Object[] {methodCoverage38}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, methodNames, "size", "()int", new Object[] {}, new Integer(50), 1);
        Mockingbird.setReturnValue(false, methodNames, "get", "(int)java.lang.Object", new Object[] {new Integer(38)}, "1,", 1);
        ArrayList arrayList38 = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.setReturnValue(false, covPoints, "get", "(java.lang.Object)java.lang.Object", new Object[] {new Integer(38)}, arrayList38, 1);
        Iterator iterator38 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.setReturnValue(false, arrayList38, "iterator", "()java.util.Iterator", new Object[] {}, iterator38, 1);
        Mockingbird.setReturnValue(false, iterator38, "hasNext", "()boolean", new Object[] {}, Boolean.FALSE, 1);
        MethodCoverage methodCoverage39 = (MethodCoverage) Mockingbird.getProxyObject(MethodCoverage.class);
        Mockingbird.replaceObjectForRecording(MethodCoverage.class, "<init>(java.lang.String,float)", methodCoverage39);
        Mockingbird.setReturnValue(false, methodCoverages, "add", "(java.lang.Object)boolean", new Object[] {methodCoverage39}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, methodNames, "size", "()int", new Object[] {}, new Integer(50), 1);
        Mockingbird.setReturnValue(false, methodNames, "get", "(int)java.lang.Object", new Object[] {new Integer(39)}, "testString", 1);
        ArrayList arrayList39 = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.setReturnValue(false, covPoints, "get", "(java.lang.Object)java.lang.Object", new Object[] {new Integer(39)}, arrayList39, 1);
        Iterator iterator39 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.setReturnValue(false, arrayList39, "iterator", "()java.util.Iterator", new Object[] {}, iterator39, 1);
        Mockingbird.setReturnValue(false, iterator39, "hasNext", "()boolean", new Object[] {}, Boolean.FALSE, 1);
        MethodCoverage methodCoverage40 = (MethodCoverage) Mockingbird.getProxyObject(MethodCoverage.class);
        Mockingbird.replaceObjectForRecording(MethodCoverage.class, "<init>(java.lang.String,float)", methodCoverage40);
        Mockingbird.setReturnValue(false, methodCoverages, "add", "(java.lang.Object)boolean", new Object[] {methodCoverage40}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, methodNames, "size", "()int", new Object[] {}, new Integer(50), 1);
        Mockingbird.setReturnValue(false, methodNames, "get", "(int)java.lang.Object", new Object[] {new Integer(40)}, "testString", 1);
        ArrayList arrayList40 = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.setReturnValue(false, covPoints, "get", "(java.lang.Object)java.lang.Object", new Object[] {new Integer(40)}, arrayList40, 1);
        Iterator iterator40 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.setReturnValue(false, arrayList40, "iterator", "()java.util.Iterator", new Object[] {}, iterator40, 1);
        Mockingbird.setReturnValue(false, iterator40, "hasNext", "()boolean", new Object[] {}, Boolean.FALSE, 1);
        MethodCoverage methodCoverage41 = (MethodCoverage) Mockingbird.getProxyObject(MethodCoverage.class);
        Mockingbird.replaceObjectForRecording(MethodCoverage.class, "<init>(java.lang.String,float)", methodCoverage41);
        Mockingbird.setReturnValue(false, methodCoverages, "add", "(java.lang.Object)boolean", new Object[] {methodCoverage41}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, methodNames, "size", "()int", new Object[] {}, new Integer(50), 1);
        Mockingbird.setReturnValue(false, methodNames, "get", "(int)java.lang.Object", new Object[] {new Integer(41)}, "testString", 1);
        ArrayList arrayList41 = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.setReturnValue(false, covPoints, "get", "(java.lang.Object)java.lang.Object", new Object[] {new Integer(41)}, arrayList41, 1);
        Iterator iterator41 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.setReturnValue(false, arrayList41, "iterator", "()java.util.Iterator", new Object[] {}, iterator41, 1);
        Mockingbird.setReturnValue(false, iterator41, "hasNext", "()boolean", new Object[] {}, Boolean.FALSE, 1);
        MethodCoverage methodCoverage42 = (MethodCoverage) Mockingbird.getProxyObject(MethodCoverage.class);
        Mockingbird.replaceObjectForRecording(MethodCoverage.class, "<init>(java.lang.String,float)", methodCoverage42);
        Mockingbird.setReturnValue(false, methodCoverages, "add", "(java.lang.Object)boolean", new Object[] {methodCoverage42}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, methodNames, "size", "()int", new Object[] {}, new Integer(50), 1);
        Mockingbird.setReturnValue(false, methodNames, "get", "(int)java.lang.Object", new Object[] {new Integer(42)}, "testString", 1);
        ArrayList arrayList42 = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.setReturnValue(false, covPoints, "get", "(java.lang.Object)java.lang.Object", new Object[] {new Integer(42)}, arrayList42, 1);
        Iterator iterator42 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.setReturnValue(false, arrayList42, "iterator", "()java.util.Iterator", new Object[] {}, iterator42, 1);
        Mockingbird.setReturnValue(false, iterator42, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator42, "next", "()java.lang.Object", new Object[] {}, Mockingbird.getProxyObject(Object.class), 1);
        Mockingbird.enterTestMode(SuperRunnerCoverageReader.class);
        try {
            superRunnerCoverageReader.createMethodCoverages(methodCoverages, methodNames, covPoints);
            fail("Expected ClassCastException to be thrown");
        } catch (ClassCastException ex) {
            assertEquals("ex.getClass()", ClassCastException.class, ex.getClass());
            assertThrownBy(SuperRunnerCoverageReader.class, ex);
            assertEquals("methodCoverages.size()", 0, methodCoverages.size());
            assertEquals("covPoints.size()", 0, covPoints.size());
            assertEquals("methodNames.size()", 0, methodNames.size());
        }
    }
    
    public void testCreateMethodCoveragesThrowsNullPointerException() throws Throwable {
        SuperRunnerCoverageReader superRunnerCoverageReader = new SuperRunnerCoverageReader(null);
        List arrayList = new ArrayList(100);
        try {
            superRunnerCoverageReader.createMethodCoverages(arrayList, null, new HashMap(100, 100.0F));
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(SuperRunnerCoverageReader.class, ex);
        }
    }
    
    public void testCreateMethodCoveragesThrowsNullPointerException1() throws Throwable {
        SuperRunnerCoverageReader superRunnerCoverageReader = new SuperRunnerCoverageReader(null);
        List arrayList = new ArrayList(100);
        arrayList.add("unknown");
        Map hashMap = new HashMap(100, 100.0F);
        hashMap.put(new Integer(0), new LinkedList());
        try {
            superRunnerCoverageReader.createMethodCoverages(null, arrayList, hashMap);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(SuperRunnerCoverageReader.class, ex);
        }
    }
    
    public void testCreateMethodCoveragesThrowsNullPointerException2() throws Throwable {
        SuperRunnerCoverageReader superRunnerCoverageReader = new SuperRunnerCoverageReader(null);
        List arrayList = new ArrayList(1000);
        arrayList.add("testString");
        try {
            superRunnerCoverageReader.createMethodCoverages(new ArrayList(100), arrayList, null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(SuperRunnerCoverageReader.class, ex);
        }
    }
    
    public void testCreateMethodCoveragesThrowsNullPointerException3() throws Throwable {
        SuperRunnerCoverageReader superRunnerCoverageReader = new SuperRunnerCoverageReader(null);
        List arrayList = new ArrayList(100);
        arrayList.add("Ilqlegal Capacity: ");
        try {
            superRunnerCoverageReader.createMethodCoverages(null, arrayList, new HashMap(100, 100.0F));
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(SuperRunnerCoverageReader.class, ex);
        }
    }
    
    public void testMakeFullyQualifiedMethodNameThrowsNullPointerException() throws Throwable {
        SuperRunnerCoverageReader superRunnerCoverageReader = new SuperRunnerCoverageReader(null);
        try {
            callPrivateMethod("org.crap4j.external.SuperRunnerCoverageReader", "makeFullyQualifiedMethodName", new Class[] {String.class, String.class}, superRunnerCoverageReader, new Object[] {null, "testSuperRunnerCoverageReaderMethodName"});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(SuperRunnerCoverageReader.class, ex);
        }
    }
    
    public void testReadCoveragePointsThrowsEOFException() throws Throwable {
        SuperRunnerCoverageReader superRunnerCoverageReader = new SuperRunnerCoverageReader(null);
        DataInput dataInputStream = new DataInputStream(new ByteArrayInputStream("mark/rset not supported".getBytes()));
        try {
            callPrivateMethod("org.crap4j.external.SuperRunnerCoverageReader", "readCoveragePoints", new Class[] {DataInput.class}, superRunnerCoverageReader, new Object[] {dataInputStream});
            fail("Expected EOFException to be thrown");
        } catch (EOFException ex) {
            assertEquals("ex.getClass()", EOFException.class, ex.getClass());
            assertThrownBy(DataInputStream.class, ex);
            assertEquals("(DataInputStream) dataInputStream.available()", 0, ((InputStream) dataInputStream).available());
        }
    }
    
    public void testReadCoveragePointsThrowsEOFException1() throws Throwable {
        SuperRunnerCoverageReader superRunnerCoverageReader = new SuperRunnerCoverageReader(null);
        byte[] bytes = new byte[0];
        DataInput dataInputStream = new DataInputStream(new ByteArrayInputStream(bytes));
        try {
            callPrivateMethod("org.crap4j.external.SuperRunnerCoverageReader", "readCoveragePoints", new Class[] {DataInput.class}, superRunnerCoverageReader, new Object[] {dataInputStream});
            fail("Expected EOFException to be thrown");
        } catch (EOFException ex) {
            assertEquals("ex.getClass()", EOFException.class, ex.getClass());
            assertThrownBy(DataInputStream.class, ex);
            assertEquals("(DataInputStream) dataInputStream.available()", 0, ((InputStream) dataInputStream).available());
        }
    }
    
    public void testReadCoveragePointsThrowsNullPointerException() throws Throwable {
        SuperRunnerCoverageReader superRunnerCoverageReader = new SuperRunnerCoverageReader(null);
        DataInput dataInputStream = new DataInputStream(null);
        try {
            callPrivateMethod("org.crap4j.external.SuperRunnerCoverageReader", "readCoveragePoints", new Class[] {DataInput.class}, superRunnerCoverageReader, new Object[] {dataInputStream});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(DataInputStream.class, ex);
        }
    }
    
    public void testReadFileThrowsNullPointerException() throws Throwable {
        SuperRunnerCoverageReader superRunnerCoverageReader = new SuperRunnerCoverageReader(null);
        try {
            superRunnerCoverageReader.readFile(new File("testSuperRunnerCoverageReaderParam1"));
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(SuperRunnerCoverageReader.class, ex);
            assertNull("superRunnerCoverageReader.project", getPrivateField(superRunnerCoverageReader, "project"));
        }
    }
    
    public void testReadMethodsThrowsEOFException() throws Throwable {
        SuperRunnerCoverageReader superRunnerCoverageReader = new SuperRunnerCoverageReader(null);
        DataInput dataInputStream = new DataInputStream(new ByteArrayInputStream(" y ".getBytes()));
        try {
            callPrivateMethod("org.crap4j.external.SuperRunnerCoverageReader", "readMethods", new Class[] {DataInput.class, String.class}, superRunnerCoverageReader, new Object[] {dataInputStream, "testSuperRunnerCoverageReaderClassName"});
            fail("Expected EOFException to be thrown");
        } catch (EOFException ex) {
            assertEquals("ex.getClass()", EOFException.class, ex.getClass());
            assertThrownBy(DataInputStream.class, ex);
            assertEquals("(DataInputStream) dataInputStream.available()", 0, ((InputStream) dataInputStream).available());
        }
    }
    
    public void testReadMethodsThrowsEOFException1() throws Throwable {
        SuperRunnerCoverageReader superRunnerCoverageReader = new SuperRunnerCoverageReader(null);
        DataInput dataInputStream = new DataInputStream(new ByteArrayInputStream("testString".getBytes()));
        try {
            callPrivateMethod("org.crap4j.external.SuperRunnerCoverageReader", "readMethods", new Class[] {DataInput.class, String.class}, superRunnerCoverageReader, new Object[] {dataInputStream, "testSuperRunnerCoverageReaderClassName"});
            fail("Expected EOFException to be thrown");
        } catch (EOFException ex) {
            assertEquals("ex.getClass()", EOFException.class, ex.getClass());
            assertThrownBy(DataInputStream.class, ex);
            assertEquals("(DataInputStream) dataInputStream.available()", 0, ((InputStream) dataInputStream).available());
        }
    }
    
    public void testReadMethodsThrowsNullPointerException() throws Throwable {
        SuperRunnerCoverageReader superRunnerCoverageReader = new SuperRunnerCoverageReader(null);
        DataInput dataInputStream = new DataInputStream(null);
        try {
            callPrivateMethod("org.crap4j.external.SuperRunnerCoverageReader", "readMethods", new Class[] {DataInput.class, String.class}, superRunnerCoverageReader, new Object[] {dataInputStream, "testSuperRunnerCoverageReaderClassName"});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(DataInputStream.class, ex);
        }
    }
    
    public void testReadThrowsNullPointerException() throws Throwable {
        SuperRunnerCoverageReader superRunnerCoverageReader = new SuperRunnerCoverageReader(null);
        DataInput in = new DataInputStream(new ByteArrayInputStream("mark/rset not supported".getBytes()));
        try {
            superRunnerCoverageReader.read(in);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(SuperRunnerCoverageReader.class, ex);
            assertNull("superRunnerCoverageReader.project", getPrivateField(superRunnerCoverageReader, "project"));
        }
    }
    
    public void testXreadThrowsEOFException() throws Throwable {
        try {
            new SuperRunnerCoverageReader(null).Xread(new DataInputStream(new ByteArrayInputStream("testString".getBytes())));
            fail("Expected EOFException to be thrown");
        } catch (EOFException ex) {
            assertEquals("ex.getClass()", EOFException.class, ex.getClass());
            assertThrownBy(DataInputStream.class, ex);
        }
    }
    
    public void testXreadThrowsNullPointerException() throws Throwable {
        SuperRunnerCoverageReader superRunnerCoverageReader = new SuperRunnerCoverageReader(null);
        try {
            superRunnerCoverageReader.Xread(new DataInputStream(null));
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(DataInputStream.class, ex);
        }
    }
}

