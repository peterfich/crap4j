/**
 * Generated by Agitar build: JUnitFactory Version 2.1.0.000576 (Build date: Oct 19, 2007) [2.1.0.000576]
 * JDK Version: 1.5.0_11
 *
 * Generated on Nov 1, 2007 12:03:20 AM
 * Time to generate: 01:58.096 seconds
 *
 */

package org.crap4j;

import com.agitar.lib.junit.AgitarTestCase;
import com.agitar.lib.mockingbird.Mockingbird;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FilePermission;
import java.io.InputStream;
import java.io.Reader;
import java.text.NumberFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;
import java.util.Iterator;
import java.util.List;
import java.util.zip.ZipFile;
import javax.xml.transform.Result;
import javax.xml.transform.Source;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerConfigurationException;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.stream.StreamResult;
import javax.xml.transform.stream.StreamSource;
import org.crap4j.gauge.CrapImageGenerator;
import org.crap4j.gauge.NewCrapImageGenerator;
import org.crap4j.util.FileUtil;
import org.crap4j.util.FormatUtil;
import org.crap4j.util.MyStringBuilder;
import org.crap4j.util.StreamCopier;

public class SystemCrapStatsAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return SystemCrapStats.class;
    }
    
    public void testConstructor() throws Throwable {
        MethodComplexity complexity2 = new MethodComplexity("testSystemCrapStatsParam1", "testSystemCrapStatsParam2", "testSystemCrapStatsParam3", "testSystemCrapStatsParam4", "testSystemCrapStatsParam5", 100, "testSystemCrapStatsParam7");
        List crapValues = new ArrayList(100);
        MethodCrap methodCrap = new MethodCrap("testSystemCrapStatsMethodSignature", 0.0F, complexity2);
        crapValues.add(methodCrap);
        crapValues.add(methodCrap);
        SystemCrapStats systemCrapStats = new SystemCrapStats(crapValues, "testSystemCrapStatsName", null, 100.0F, 1000.0F, 0.0F);
        assertEquals("systemCrapStats.toString()", "testSystemCrapStatsName\n_____________________\nTotal Crap: 20200.00, Crap: 10100.00, Median: 10100.00, Average: 10100.00, Std Dev: 0.00, Method Count: 2, crapMethodCount: 2.00, crapMethodPercent: 100.00%", systemCrapStats.toString());
        assertEquals("systemCrapStats.crapPercentWarningThreshold", 1000.0F, ((Number) getPrivateField(systemCrapStats, "crapPercentWarningThreshold")).floatValue(), 1.0E-6F);
        assertEquals("systemCrapStats.getCrapNumber()", 10100.0F, systemCrapStats.getCrapNumber(), 1.0E-6F);
        assertEquals("systemCrapStats.getStdDev()", 0.0, systemCrapStats.getStdDev(), 1.0E-6);
        assertEquals("systemCrapStats.crapMethodCount", new Integer(2), getPrivateField(systemCrapStats, "crapMethodCount"));
        assertEquals("systemCrapStats.crapThreshold", 100.0F, ((Number) getPrivateField(systemCrapStats, "crapThreshold")).floatValue(), 1.0E-6F);
        assertEquals("systemCrapStats.crapWorkLoad", 202, ((Number) getPrivateField(systemCrapStats, "crapWorkLoad")).intValue());
        assertNull("systemCrapStats.crapProject", getPrivateField(systemCrapStats, "crapProject"));
        assertSame("systemCrapStats.getSubjects()", crapValues, systemCrapStats.getSubjects());
        assertEquals("systemCrapStats.getSubjectCount()", 2, systemCrapStats.getSubjectCount());
        assertEquals("systemCrapStats.crapPercentCriticalThreshold", 0.0F, ((Number) getPrivateField(systemCrapStats, "crapPercentCriticalThreshold")).floatValue(), 1.0E-6F);
        assertEquals("systemCrapStats.getAverage()", 10100.0F, systemCrapStats.getAverage(), 1.0E-6F);
        assertEquals("systemCrapStats.getMedian()", 10100.0F, systemCrapStats.getMedian(), 1.0E-6F);
        assertEquals("systemCrapStats.getTotal()", 20200.0F, systemCrapStats.getTotal(), 1.0E-6F);
    }
    
    public void testConstructor1() throws Throwable {
        MethodComplexity methodComplexity = new MethodComplexity("testSystemCrapStatsParam1", "testSystemCrapStatsParam2", "testSystemCrapStatsParam3", "testSystemCrapStatsParam4", "testSystemCrapStatsParam5", 0, "testSystemCrapStatsParam7");
        List arrayList = new ArrayList(100);
        arrayList.add(new MethodCrap("testSystemCrapStatsParam1", 0.0F, methodComplexity));
        SystemCrapStats systemCrapStats = new SystemCrapStats(arrayList, "testSystemCrapStatsParam2", null, 100.0F, 1000.0F, 0.0F);
        assertEquals("systemCrapStats.toString()", "testSystemCrapStatsParam2\n_____________________\nTotal Crap: 0.00, Crap: 0.00, Median: 0.00, Average: 0.00, Std Dev: 0.00, Method Count: 1, crapMethodCount: 0.00, crapMethodPercent: 0.00%", systemCrapStats.toString());
        assertEquals("systemCrapStats.crapPercentWarningThreshold", 1000.0F, ((Number) getPrivateField(systemCrapStats, "crapPercentWarningThreshold")).floatValue(), 1.0E-6F);
        assertEquals("systemCrapStats.getCrapNumber()", 0.0F, systemCrapStats.getCrapNumber(), 1.0E-6F);
        assertEquals("systemCrapStats.getStdDev()", 0.0, systemCrapStats.getStdDev(), 1.0E-6);
        assertEquals("systemCrapStats.crapMethodCount", new Integer(0), getPrivateField(systemCrapStats, "crapMethodCount"));
        assertEquals("systemCrapStats.crapThreshold", 100.0F, ((Number) getPrivateField(systemCrapStats, "crapThreshold")).floatValue(), 1.0E-6F);
        assertEquals("systemCrapStats.crapWorkLoad", 0, ((Number) getPrivateField(systemCrapStats, "crapWorkLoad")).intValue());
        assertNull("systemCrapStats.crapProject", getPrivateField(systemCrapStats, "crapProject"));
        assertSame("systemCrapStats.getSubjects()", arrayList, systemCrapStats.getSubjects());
        assertEquals("systemCrapStats.getSubjectCount()", 1, systemCrapStats.getSubjectCount());
        assertEquals("systemCrapStats.crapPercentCriticalThreshold", 0.0F, ((Number) getPrivateField(systemCrapStats, "crapPercentCriticalThreshold")).floatValue(), 1.0E-6F);
        assertEquals("systemCrapStats.getAverage()", 0.0F, systemCrapStats.getAverage(), 1.0E-6F);
        assertEquals("systemCrapStats.getMedian()", 0.0F, systemCrapStats.getMedian(), 1.0E-6F);
        assertEquals("systemCrapStats.getTotal()", 0.0F, systemCrapStats.getTotal(), 1.0E-6F);
    }
    
    public void testConstructor2() throws Throwable {
        MethodComplexity complexity2 = new MethodComplexity("testSystemCrapStatsMethodSignature", "testSystemCrapStatsPkgclassName", "testSystemCrapStatsMethodName", "testSystemCrapStatsMethodDescriptor", "testSystemCrapStatsJava5Signature", 0, "testSystemCrapStatsPrettyMethodSignature");
        List crapValues = new ArrayList(100);
        MethodComplexity complexity2_2 = new MethodComplexity("testSystemCrapStatsMethodSignature1", "testSystemCrapStatsPkgclassName1", "testSystemCrapStatsMethodName1", "testSystemCrapStatsMethodDescriptor1", "testSystemCrapStatsJava5Signature1", 1, "testSystemCrapStatsPrettyMethodSignature1");
        crapValues.add(new MethodCrap("testSystemCrapStatsMethodSignature1", 1.0F, complexity2_2));
        crapValues.add(new MethodCrap("testSystemCrapStatsMethodSignature", 0.0F, complexity2));
        SystemCrapStats systemCrapStats = new SystemCrapStats(crapValues, "testSystemCrapStatsName", null, 100.0F, 1000.0F, 0.0F);
        assertEquals("systemCrapStats.toString()", "testSystemCrapStatsName\n_____________________\nTotal Crap: 1.00, Crap: 0.50, Median: 1.00, Average: 0.50, Std Dev: 0.50, Method Count: 2, crapMethodCount: 0.00, crapMethodPercent: 0.00%", systemCrapStats.toString());
        assertEquals("systemCrapStats.crapPercentWarningThreshold", 1000.0F, ((Number) getPrivateField(systemCrapStats, "crapPercentWarningThreshold")).floatValue(), 1.0E-6F);
        assertEquals("systemCrapStats.getCrapNumber()", 0.5F, systemCrapStats.getCrapNumber(), 1.0E-6F);
        assertEquals("systemCrapStats.getStdDev()", 0.5, systemCrapStats.getStdDev(), 1.0E-6);
        assertEquals("systemCrapStats.crapMethodCount", new Integer(0), getPrivateField(systemCrapStats, "crapMethodCount"));
        assertEquals("systemCrapStats.crapThreshold", 100.0F, ((Number) getPrivateField(systemCrapStats, "crapThreshold")).floatValue(), 1.0E-6F);
        assertEquals("systemCrapStats.crapWorkLoad", 0, ((Number) getPrivateField(systemCrapStats, "crapWorkLoad")).intValue());
        assertNull("systemCrapStats.crapProject", getPrivateField(systemCrapStats, "crapProject"));
        assertSame("systemCrapStats.getSubjects()", crapValues, systemCrapStats.getSubjects());
        assertEquals("systemCrapStats.getSubjectCount()", 2, systemCrapStats.getSubjectCount());
        assertEquals("systemCrapStats.crapPercentCriticalThreshold", 0.0F, ((Number) getPrivateField(systemCrapStats, "crapPercentCriticalThreshold")).floatValue(), 1.0E-6F);
        assertEquals("systemCrapStats.getAverage()", 0.5F, systemCrapStats.getAverage(), 1.0E-6F);
        assertEquals("systemCrapStats.getMedian()", 1.0F, systemCrapStats.getMedian(), 1.0E-6F);
        assertEquals("systemCrapStats.getTotal()", 1.0F, systemCrapStats.getTotal(), 1.0E-6F);
    }
    
    public void testConstructor3() throws Throwable {
        List arrayList = new ArrayList(100);
        SystemCrapStats systemCrapStats = new SystemCrapStats(arrayList, "testSystemCrapStatsParam2", null, 100.0F, 1000.0F, 0.0F);
        assertEquals("systemCrapStats.toString()", "testSystemCrapStatsParam2\n_____________________\nTotal Crap: 0.00, Crap: \uFFFD, Median: 0.00, Average: \uFFFD, Std Dev: \uFFFD, Method Count: 0, crapMethodCount: 0.00, crapMethodPercent: \uFFFD%", systemCrapStats.toString());
        assertEquals("systemCrapStats.crapPercentWarningThreshold", 1000.0F, ((Number) getPrivateField(systemCrapStats, "crapPercentWarningThreshold")).floatValue(), 1.0E-6F);
        assertEquals("systemCrapStats.crapMethodCount", new Integer(0), getPrivateField(systemCrapStats, "crapMethodCount"));
        assertEquals("systemCrapStats.crapThreshold", 100.0F, ((Number) getPrivateField(systemCrapStats, "crapThreshold")).floatValue(), 1.0E-6F);
        assertEquals("systemCrapStats.crapWorkLoad", 0, ((Number) getPrivateField(systemCrapStats, "crapWorkLoad")).intValue());
        assertNull("systemCrapStats.crapProject", getPrivateField(systemCrapStats, "crapProject"));
        assertSame("systemCrapStats.getSubjects()", arrayList, systemCrapStats.getSubjects());
        assertEquals("systemCrapStats.getSubjectCount()", 0, systemCrapStats.getSubjectCount());
        assertEquals("systemCrapStats.crapPercentCriticalThreshold", 0.0F, ((Number) getPrivateField(systemCrapStats, "crapPercentCriticalThreshold")).floatValue(), 1.0E-6F);
        assertEquals("systemCrapStats.getMedian()", 0.0F, systemCrapStats.getMedian(), 1.0E-6F);
        assertEquals("systemCrapStats.getTotal()", 0.0F, systemCrapStats.getTotal(), 1.0E-6F);
    }
    
    public void testConstructor4() throws Throwable {
        MethodComplexity complexity2 = new MethodComplexity("testSystemCrapStatsMethodSignature", "testSystemCrapStatsPkgclassName", "testSystemCrapStatsMethodName", "testSystemCrapStatsMethodDescriptor", "testSystemCrapStatsJava5Signature", 100, "testSystemCrapStatsPrettyMethodSignature");
        List crapValues = new ArrayList(100);
        MethodComplexity complexity2_2 = new MethodComplexity("testSystemCrapStatsMethodSignature1", "testSystemCrapStatsPkgclassName1", "testSystemCrapStatsMethodName1", "testSystemCrapStatsMethodDescriptor1", "testSystemCrapStatsJava5Signature1", 0, "testSystemCrapStatsPrettyMethodSignature1");
        crapValues.add(new MethodCrap("testSystemCrapStatsMethodSignature", 0.0F, complexity2));
        crapValues.add(new MethodCrap("testSystemCrapStatsMethodSignature1", 1.0F, complexity2_2));
        SystemCrapStats systemCrapStats = new SystemCrapStats(crapValues, "testSystemCrapStatsName", null, 100.0F, 1000.0F, 0.0F);
        assertEquals("systemCrapStats.toString()", "testSystemCrapStatsName\n_____________________\nTotal Crap: 10100.00, Crap: 5050.00, Median: 10100.00, Average: 5050.00, Std Dev: 5050.00, Method Count: 2, crapMethodCount: 1.00, crapMethodPercent: 50.00%", systemCrapStats.toString());
        assertEquals("systemCrapStats.crapPercentWarningThreshold", 1000.0F, ((Number) getPrivateField(systemCrapStats, "crapPercentWarningThreshold")).floatValue(), 1.0E-6F);
        assertEquals("systemCrapStats.getCrapNumber()", 5050.0F, systemCrapStats.getCrapNumber(), 1.0E-6F);
        assertEquals("systemCrapStats.getStdDev()", 5050.0, systemCrapStats.getStdDev(), 1.0E-6);
        assertEquals("systemCrapStats.crapMethodCount", new Integer(1), getPrivateField(systemCrapStats, "crapMethodCount"));
        assertEquals("systemCrapStats.crapThreshold", 100.0F, ((Number) getPrivateField(systemCrapStats, "crapThreshold")).floatValue(), 1.0E-6F);
        assertEquals("systemCrapStats.crapWorkLoad", 101, ((Number) getPrivateField(systemCrapStats, "crapWorkLoad")).intValue());
        assertNull("systemCrapStats.crapProject", getPrivateField(systemCrapStats, "crapProject"));
        assertSame("systemCrapStats.getSubjects()", crapValues, systemCrapStats.getSubjects());
        assertEquals("systemCrapStats.getSubjectCount()", 2, systemCrapStats.getSubjectCount());
        assertEquals("systemCrapStats.crapPercentCriticalThreshold", 0.0F, ((Number) getPrivateField(systemCrapStats, "crapPercentCriticalThreshold")).floatValue(), 1.0E-6F);
        assertEquals("systemCrapStats.getAverage()", 5050.0F, systemCrapStats.getAverage(), 1.0E-6F);
        assertEquals("systemCrapStats.getMedian()", 10100.0F, systemCrapStats.getMedian(), 1.0E-6F);
        assertEquals("systemCrapStats.getTotal()", 10100.0F, systemCrapStats.getTotal(), 1.0E-6F);
    }
    
    public void testConstructor5() throws Throwable {
        MethodComplexity methodComplexity = new MethodComplexity("testSystemCrapStatsParam1", "testSystemCrapStatsParam2", "testSystemCrapStatsParam3", "testSystemCrapStatsParam4", "testSystemCrapStatsParam5", 100, "testSystemCrapStatsParam7");
        List arrayList = new ArrayList(100);
        arrayList.add(new MethodCrap("testSystemCrapStatsParam1", 0.0F, methodComplexity));
        SystemCrapStats systemCrapStats = new SystemCrapStats(arrayList, "testSystemCrapStatsParam2", null, 100.0F, 1000.0F, 0.0F);
        assertEquals("systemCrapStats.toString()", "testSystemCrapStatsParam2\n_____________________\nTotal Crap: 10100.00, Crap: 10100.00, Median: 10100.00, Average: 10100.00, Std Dev: 0.00, Method Count: 1, crapMethodCount: 1.00, crapMethodPercent: 100.00%", systemCrapStats.toString());
        assertEquals("systemCrapStats.crapPercentWarningThreshold", 1000.0F, ((Number) getPrivateField(systemCrapStats, "crapPercentWarningThreshold")).floatValue(), 1.0E-6F);
        assertEquals("systemCrapStats.getCrapNumber()", 10100.0F, systemCrapStats.getCrapNumber(), 1.0E-6F);
        assertEquals("systemCrapStats.getStdDev()", 0.0, systemCrapStats.getStdDev(), 1.0E-6);
        assertEquals("systemCrapStats.crapMethodCount", new Integer(1), getPrivateField(systemCrapStats, "crapMethodCount"));
        assertEquals("systemCrapStats.crapThreshold", 100.0F, ((Number) getPrivateField(systemCrapStats, "crapThreshold")).floatValue(), 1.0E-6F);
        assertEquals("systemCrapStats.crapWorkLoad", 101, ((Number) getPrivateField(systemCrapStats, "crapWorkLoad")).intValue());
        assertNull("systemCrapStats.crapProject", getPrivateField(systemCrapStats, "crapProject"));
        assertSame("systemCrapStats.getSubjects()", arrayList, systemCrapStats.getSubjects());
        assertEquals("systemCrapStats.getSubjectCount()", 1, systemCrapStats.getSubjectCount());
        assertEquals("systemCrapStats.crapPercentCriticalThreshold", 0.0F, ((Number) getPrivateField(systemCrapStats, "crapPercentCriticalThreshold")).floatValue(), 1.0E-6F);
        assertEquals("systemCrapStats.getAverage()", 10100.0F, systemCrapStats.getAverage(), 1.0E-6F);
        assertEquals("systemCrapStats.getMedian()", 10100.0F, systemCrapStats.getMedian(), 1.0E-6F);
        assertEquals("systemCrapStats.getTotal()", 10100.0F, systemCrapStats.getTotal(), 1.0E-6F);
    }
    
    public void testAdjustedHeight() throws Throwable {
        SystemCrapStats systemCrapStats = new SystemCrapStats(new ArrayList(100), "testSystemCrapStatsName", null, 100.0F, 1000.0F, 0.0F);
        float result = ((Number) callPrivateMethod("org.crap4j.SystemCrapStats", "adjustedHeight", new Class[] {int.class, float.class}, systemCrapStats, new Object[] {new Integer(0), new Float(100.0F)})).floatValue();
        assertEquals("result", 0.0F, result, 1.0E-6F);
    }
    
    public void testAdjustedHeight1() throws Throwable {
        SystemCrapStats systemCrapStats = new SystemCrapStats(new ArrayList(100), "testSystemCrapStatsName", null, 100.0F, 1000.0F, 0.0F);
        float result = ((Number) callPrivateMethod("org.crap4j.SystemCrapStats", "adjustedHeight", new Class[] {int.class, float.class}, systemCrapStats, new Object[] {new Integer(100), new Float(100.0F)})).floatValue();
        assertEquals("result", 10000.0F, result, 1.0E-6F);
    }
    
    public void testComputeCrapWorkLoad() throws Throwable {
        SystemCrapStats systemCrapStats = new SystemCrapStats(new ArrayList(100), "testSystemCrapStatsName", null, 100.0F, 1000.0F, 0.0F);
        int result = ((Number) callPrivateMethod("org.crap4j.SystemCrapStats", "computeCrapWorkLoad", new Class[] {List.class}, systemCrapStats, new Object[] {new ArrayList(1000)})).intValue();
        assertEquals("result", 0, result);
    }
    
    public void testComputeCrapWorkLoad1() throws Throwable {
        MethodComplexity complexity2 = new MethodComplexity("testSystemCrapStatsParam1", "testSystemCrapStatsParam2", "testSystemCrapStatsParam3", "testSystemCrapStatsParam4", "testSystemCrapStatsParam5", 100, "testSystemCrapStatsParam7");
        SystemCrapStats systemCrapStats = new SystemCrapStats(new ArrayList(100), "testSystemCrapStatsName", null, 100.0F, 1000.0F, 0.0F);
        List arrayList = new ArrayList(1000);
        arrayList.add(new MethodCrap("testSystemCrapStatsMethodSignature", 0.0F, complexity2));
        int result = ((Number) callPrivateMethod("org.crap4j.SystemCrapStats", "computeCrapWorkLoad", new Class[] {List.class}, systemCrapStats, new Object[] {arrayList})).intValue();
        assertEquals("result", 101, result);
    }
    
    public void testComputeMedian() throws Throwable {
        SystemCrapStats systemCrapStats = new SystemCrapStats(new ArrayList(100), "testSystemCrapStatsName", null, 100.0F, 1000.0F, 0.0F);
        float result = ((Number) callPrivateMethod("org.crap4j.SystemCrapStats", "computeMedian", new Class[] {}, systemCrapStats, new Object[] {})).floatValue();
        assertEquals("result", 0.0F, result, 1.0E-6F);
    }
    
    public void testComputeMedian1() throws Throwable {
        MethodComplexity complexity2 = new MethodComplexity("testSystemCrapStatsParam1", "testSystemCrapStatsParam2", "testSystemCrapStatsParam3", "testSystemCrapStatsParam4", "testSystemCrapStatsParam5", 100, "testSystemCrapStatsParam7");
        MethodComplexity complexity2_2 = new MethodComplexity("testSystemCrapStatsParam11", "testSystemCrapStatsParam21", "testSystemCrapStatsParam31", "testSystemCrapStatsParam41", "testSystemCrapStatsParam51", 1000, "testSystemCrapStatsParam71");
        List crapValues = new ArrayList(100);
        crapValues.add(new MethodCrap("testSystemCrapStatsMethodSignature1", 1.0F, complexity2));
        crapValues.add(new MethodCrap("testSystemCrapStatsMethodSignature", 0.0F, complexity2_2));
        SystemCrapStats systemCrapStats = new SystemCrapStats(crapValues, "testSystemCrapStatsName", null, 100.0F, 1000.0F, 0.0F);
        float result = ((Number) callPrivateMethod("org.crap4j.SystemCrapStats", "computeMedian", new Class[] {}, systemCrapStats, new Object[] {})).floatValue();
        assertEquals("result", 1001000.0F, result, 1.0E-6F);
        assertSame("systemCrapStats.getSubjects()", crapValues, systemCrapStats.getSubjects());
    }
    
    public void testComputeMedian2() throws Throwable {
        List crapValues = new ArrayList(100);
        MethodComplexity complexity2 = new MethodComplexity("testSystemCrapStatsMethodSignature", "testSystemCrapStatsPkgclassName", "testSystemCrapStatsMethodName", "testSystemCrapStatsMethodDescriptor", "testSystemCrapStatsJava5Signature", 100, "testSystemCrapStatsPrettyMethodSignature");
        crapValues.add(new MethodCrap("testSystemCrapStatsMethodSignature", 0.0F, complexity2));
        SystemCrapStats systemCrapStats = new SystemCrapStats(crapValues, "testSystemCrapStatsName", null, 100.0F, 1000.0F, 0.0F);
        float result = ((Number) callPrivateMethod("org.crap4j.SystemCrapStats", "computeMedian", new Class[] {}, systemCrapStats, new Object[] {})).floatValue();
        assertEquals("result", 10100.0F, result, 1.0E-6F);
        assertSame("systemCrapStats.getSubjects()", crapValues, systemCrapStats.getSubjects());
    }
    
    public void testComputeStdDev() throws Throwable {
        MethodComplexity complexity2 = new MethodComplexity("testSystemCrapStatsParam1", "testSystemCrapStatsParam2", "testSystemCrapStatsParam3", "testSystemCrapStatsParam4", "testSystemCrapStatsParam5", 100, "testSystemCrapStatsParam7");
        MethodComplexity complexity2_2 = new MethodComplexity("testSystemCrapStatsParam11", "testSystemCrapStatsParam21", "testSystemCrapStatsParam31", "testSystemCrapStatsParam41", "testSystemCrapStatsParam51", 1000, "testSystemCrapStatsParam71");
        List crapValues = new ArrayList(100);
        crapValues.add(new MethodCrap("testSystemCrapStatsMethodSignature", 0.0F, complexity2_2));
        crapValues.add(new MethodCrap("testSystemCrapStatsMethodSignature1", 1.0F, complexity2));
        SystemCrapStats systemCrapStats = new SystemCrapStats(crapValues, "testSystemCrapStatsName", null, 100.0F, 1000.0F, 0.0F);
        double result = ((Number) callPrivateMethod("org.crap4j.SystemCrapStats", "computeStdDev", new Class[] {}, systemCrapStats, new Object[] {})).doubleValue();
        assertEquals("result", 500449.9960315716, result, 1.0E-6);
        assertSame("systemCrapStats.getSubjects()", crapValues, systemCrapStats.getSubjects());
    }
    
    public void testComputeStdDev1() throws Throwable {
        MethodComplexity complexity2 = new MethodComplexity("testSystemCrapStatsParam1", "testSystemCrapStatsParam2", "testSystemCrapStatsParam3", "testSystemCrapStatsParam4", "testSystemCrapStatsParam5", 100, "testSystemCrapStatsParam7");
        List crapValues = new ArrayList(100);
        crapValues.add(new MethodCrap("testSystemCrapStatsMethodSignature", 0.0F, complexity2));
        SystemCrapStats systemCrapStats = new SystemCrapStats(crapValues, "testSystemCrapStatsName", null, 100.0F, 1000.0F, 0.0F);
        double result = ((Number) callPrivateMethod("org.crap4j.SystemCrapStats", "computeStdDev", new Class[] {}, systemCrapStats, new Object[] {})).doubleValue();
        assertEquals("result", 0.0, result, 1.0E-6);
        assertSame("systemCrapStats.getSubjects()", crapValues, systemCrapStats.getSubjects());
    }
    
    public void testComputeStdDev2() throws Throwable {
        SystemCrapStats systemCrapStats = new SystemCrapStats(new ArrayList(100), "testSystemCrapStatsName", null, 100.0F, 1000.0F, 0.0F);
        callPrivateMethod("org.crap4j.SystemCrapStats", "computeStdDev", new Class[] {}, systemCrapStats, new Object[] {});
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testComputeTotalCrap() throws Throwable {
        SystemCrapStats systemCrapStats = new SystemCrapStats(new ArrayList(100), "testSystemCrapStatsName", null, 100.0F, 1000.0F, 0.0F);
        float result = ((Number) callPrivateMethod("org.crap4j.SystemCrapStats", "computeTotalCrap", new Class[] {List.class}, systemCrapStats, new Object[] {new ArrayList(1000)})).floatValue();
        assertEquals("result", 0.0F, result, 1.0E-6F);
    }
    
    public void testComputeTotalCrap1() throws Throwable {
        MethodComplexity complexity2 = new MethodComplexity("testSystemCrapStatsParam1", "testSystemCrapStatsParam2", "testSystemCrapStatsParam3", "testSystemCrapStatsParam4", "testSystemCrapStatsParam5", 100, "testSystemCrapStatsParam7");
        SystemCrapStats systemCrapStats = new SystemCrapStats(new ArrayList(100), "testSystemCrapStatsName", null, 100.0F, 1000.0F, 0.0F);
        List arrayList = new ArrayList(1000);
        arrayList.add(new MethodCrap("testSystemCrapStatsMethodSignature", 0.0F, complexity2));
        float result = ((Number) callPrivateMethod("org.crap4j.SystemCrapStats", "computeTotalCrap", new Class[] {List.class}, systemCrapStats, new Object[] {arrayList})).floatValue();
        assertEquals("result", 10100.0F, result, 1.0E-6F);
    }
    
    public void testComputeVariance() throws Throwable {
        MethodComplexity complexity2 = new MethodComplexity("testSystemCrapStatsParam1", "testSystemCrapStatsParam2", "testSystemCrapStatsParam3", "testSystemCrapStatsParam4", "testSystemCrapStatsParam5", 100, "testSystemCrapStatsParam7");
        List crapValues = new ArrayList(100);
        crapValues.add(new MethodCrap("testSystemCrapStatsMethodSignature", 0.0F, complexity2));
        SystemCrapStats systemCrapStats = new SystemCrapStats(crapValues, "testSystemCrapStatsName", null, 100.0F, 1000.0F, 0.0F);
        float result = ((Number) callPrivateMethod("org.crap4j.SystemCrapStats", "computeVariance", new Class[] {}, systemCrapStats, new Object[] {})).floatValue();
        assertEquals("result", 0.0F, result, 1.0E-6F);
        assertSame("systemCrapStats.getSubjects()", crapValues, systemCrapStats.getSubjects());
    }
    
    public void testComputeVariance1() throws Throwable {
        MethodComplexity complexity2 = new MethodComplexity("testSystemCrapStatsParam1", "testSystemCrapStatsParam2", "testSystemCrapStatsParam3", "testSystemCrapStatsParam4", "testSystemCrapStatsParam5", 100, "testSystemCrapStatsParam7");
        List crapValues = new ArrayList(100);
        MethodComplexity complexity2_2 = new MethodComplexity("testSystemCrapStatsParam11", "testSystemCrapStatsParam21", "testSystemCrapStatsParam31", "testSystemCrapStatsParam41", "testSystemCrapStatsParam51", 1000, "testSystemCrapStatsParam71");
        crapValues.add(new MethodCrap("testSystemCrapStatsMethodSignature", 0.0F, complexity2));
        crapValues.add(new MethodCrap("testSystemCrapStatsMethodSignature1", 1.0F, complexity2_2));
        SystemCrapStats systemCrapStats = new SystemCrapStats(crapValues, "testSystemCrapStatsName", null, 100.0F, 1000.0F, 0.0F);
        float result = ((Number) callPrivateMethod("org.crap4j.SystemCrapStats", "computeVariance", new Class[] {}, systemCrapStats, new Object[] {})).floatValue();
        assertEquals("result", 4.1405E7F, result, 1.0E-6F);
        assertSame("systemCrapStats.getSubjects()", crapValues, systemCrapStats.getSubjects());
    }
    
    public void testComputeVariance2() throws Throwable {
        SystemCrapStats systemCrapStats = new SystemCrapStats(new ArrayList(100), "testSystemCrapStatsName", null, 100.0F, 1000.0F, 0.0F);
        float result = ((Number) callPrivateMethod("org.crap4j.SystemCrapStats", "computeVariance", new Class[] {}, systemCrapStats, new Object[] {})).floatValue();
        assertEquals("result", 0.0F, result, 1.0E-6F);
    }
    
    public void testCopyFile() throws Throwable {
        File outFile = (File) Mockingbird.getProxyObject(File.class);
        byte[] bytes = new byte[3];
        InputStream stream = new ByteArrayInputStream(bytes);
        SystemCrapStats systemCrapStats = new SystemCrapStats(new ArrayList(100), "testSystemCrapStatsName", null, 100.0F, 1000.0F, 0.0F);
        Mockingbird.enterRecordingMode();
        Mockingbird.replaceObjectForRecording(FileOutputStream.class, "<init>(java.io.File)", Mockingbird.getProxyObject(FileOutputStream.class));
        Mockingbird.replaceObjectForRecording(DataOutputStream.class, "<init>(java.io.OutputStream)", Mockingbird.getProxyObject(DataOutputStream.class));
        Mockingbird.replaceObjectForRecording(BufferedOutputStream.class, "<init>(java.io.OutputStream)", Mockingbird.getProxyObject(BufferedOutputStream.class));
        Mockingbird.replaceObjectForRecording(StreamCopier.class, "<init>(java.io.InputStream,java.io.OutputStream,boolean)", Mockingbird.getProxyObject(StreamCopier.class));
        Mockingbird.enterTestMode(SystemCrapStats.class);
        systemCrapStats.copyFile(stream, outFile);
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testCopyFile1() throws Throwable {
        SystemCrapStats systemCrapStats = new SystemCrapStats(new ArrayList(100), "testSystemCrapStatsName", null, 100.0F, 1000.0F, 0.0F);
        File outFile = new File((File) Mockingbird.getProxyObject(File.class), "testSystemCrapStatsParam2");
        Mockingbird.enterRecordingMode();
        Mockingbird.replaceObjectForRecording(DataInputStream.class, "<init>(java.io.InputStream)", Mockingbird.getProxyObject(DataInputStream.class));
        Mockingbird.replaceObjectForRecording(BufferedInputStream.class, "<init>(java.io.InputStream)", Mockingbird.getProxyObject(BufferedInputStream.class));
        Mockingbird.setConstructorForException(FileOutputStream.class, "<init>(java.io.File)", (Throwable) Mockingbird.getProxyObject(FileNotFoundException.class));
        Mockingbird.enterTestMode(SystemCrapStats.class);
        systemCrapStats.copyFile(null, outFile);
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testCountCrapMethods() throws Throwable {
        SystemCrapStats systemCrapStats = new SystemCrapStats(new ArrayList(1000), "testSystemCrapStatsName", null, 100.0F, 1000.0F, 0.0F);
        int result = ((Number) callPrivateMethod("org.crap4j.SystemCrapStats", "countCrapMethods", new Class[] {List.class}, systemCrapStats, new Object[] {new ArrayList(100)})).intValue();
        assertEquals("result", 0, result);
    }
    
    public void testCountCrapMethods1() throws Throwable {
        SystemCrapStats systemCrapStats = new SystemCrapStats(new ArrayList(100), "testSystemCrapStatsName", null, 100.0F, 1000.0F, 0.0F);
        List arrayList = new ArrayList(1000);
        MethodComplexity complexity2 = new MethodComplexity("testSystemCrapStatsMethodSignature", "testSystemCrapStatsPkgclassName", "testSystemCrapStatsMethodName", "testSystemCrapStatsMethodDescriptor", "testSystemCrapStatsJava5Signature", 100, "testSystemCrapStatsPrettyMethodSignature");
        arrayList.add(new MethodCrap("testSystemCrapStatsMethodSignature", 0.0F, complexity2));
        int result = ((Number) callPrivateMethod("org.crap4j.SystemCrapStats", "countCrapMethods", new Class[] {List.class}, systemCrapStats, new Object[] {arrayList})).intValue();
        assertEquals("result", 1, result);
    }
    
    public void testCrapBetween() throws Throwable {
        MethodComplexity complexity2 = new MethodComplexity("testSystemCrapStatsMethodSignature", "testSystemCrapStatsPkgclassName", "testSystemCrapStatsMethodName", "testSystemCrapStatsMethodDescriptor", "testSystemCrapStatsJava5Signature", 100, "testSystemCrapStatsPrettyMethodSignature");
        List crapValues = new ArrayList(100);
        MethodComplexity complexity2_2 = new MethodComplexity("testSystemCrapStatsMethodSignature1", "testSystemCrapStatsPkgclassName1", "testSystemCrapStatsMethodName1", "testSystemCrapStatsMethodDescriptor1", "testSystemCrapStatsJava5Signature1", 0, "testSystemCrapStatsPrettyMethodSignature1");
        crapValues.add(new MethodCrap("testSystemCrapStatsMethodSignature", 0.0F, complexity2));
        crapValues.add(new MethodCrap("testSystemCrapStatsMethodSignature1", 1.0F, complexity2_2));
        SystemCrapStats systemCrapStats = new SystemCrapStats(crapValues, "testSystemCrapStatsName", null, 100.0F, 1000.0F, 0.0F);
        int result = ((Number) callPrivateMethod("org.crap4j.SystemCrapStats", "crapBetween", new Class[] {float.class, float.class}, systemCrapStats, new Object[] {new Float(100.0F), new Float(1000.0F)})).intValue();
        assertEquals("result", 0, result);
        assertSame("systemCrapStats.getSubjects()", crapValues, systemCrapStats.getSubjects());
    }
    
    public void testCrapBetween1() throws Throwable {
        MethodComplexity complexity2 = new MethodComplexity("testSystemCrapStatsMethodSignature", "testSystemCrapStatsPkgclassName", "testSystemCrapStatsMethodName", "testSystemCrapStatsMethodDescriptor", "testSystemCrapStatsJava5Signature", 0, "testSystemCrapStatsPrettyMethodSignature");
        List crapValues = new ArrayList(100);
        crapValues.add(new MethodCrap("testSystemCrapStatsMethodSignature", 0.0F, complexity2));
        SystemCrapStats systemCrapStats = new SystemCrapStats(crapValues, "testSystemCrapStatsName", null, 100.0F, 1000.0F, 0.0F);
        int result = ((Number) callPrivateMethod("org.crap4j.SystemCrapStats", "crapBetween", new Class[] {float.class, float.class}, systemCrapStats, new Object[] {new Float(0.0F), new Float(100.0F)})).intValue();
        assertEquals("result", 1, result);
        assertSame("systemCrapStats.getSubjects()", crapValues, systemCrapStats.getSubjects());
    }
    
    public void testCrapBetween2() throws Throwable {
        ArrayList crapValues = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, crapValues, "size", "()int", new Object[] {}, new Integer(4), 1);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.setReturnValue(false, crapValues, "iterator", "()java.util.Iterator", new Object[] {}, iterator, 1);
        Mockingbird.setReturnValue(false, iterator, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        MethodCrap methodCrap = (MethodCrap) Mockingbird.getProxyObject(MethodCrap.class);
        Mockingbird.setReturnValue(false, iterator, "next", "()java.lang.Object", new Object[] {}, methodCrap, 1);
        Mockingbird.setReturnValue(methodCrap.getCrap(), 1.6409155F);
        Mockingbird.setReturnValue(false, iterator, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator, "next", "()java.lang.Object", new Object[] {}, methodCrap, 1);
        Mockingbird.setReturnValue(methodCrap.getCrap(), 1.6409155F);
        Mockingbird.setReturnValue(false, iterator, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        MethodCrap methodCrap2 = (MethodCrap) Mockingbird.getProxyObject(MethodCrap.class);
        Mockingbird.setReturnValue(false, iterator, "next", "()java.lang.Object", new Object[] {}, methodCrap2, 1);
        Mockingbird.setReturnValue(methodCrap2.getCrap(), 10100.0F);
        Mockingbird.setReturnValue(false, iterator, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        MethodCrap methodCrap3 = (MethodCrap) Mockingbird.getProxyObject(MethodCrap.class);
        Mockingbird.setReturnValue(false, iterator, "next", "()java.lang.Object", new Object[] {}, methodCrap3, 1);
        Mockingbird.setReturnValue(methodCrap3.getCrap(), 100.0F);
        Mockingbird.setReturnValue(false, iterator, "hasNext", "()boolean", new Object[] {}, Boolean.FALSE, 1);
        Mockingbird.setReturnValue(false, crapValues, "size", "()int", new Object[] {}, new Integer(4), 1);
        Mockingbird.setReturnValue(false, crapValues, "size", "()int", new Object[] {}, new Integer(4), 1);
        Mockingbird.setReturnValue(false, crapValues, "get", "(int)java.lang.Object", new Object[] {new Integer(0)}, methodCrap, 1);
        Mockingbird.setReturnValue(methodCrap.getCrap(), 1.6409155F);
        Mockingbird.setReturnValue(false, crapValues, "size", "()int", new Object[] {}, new Integer(4), 1);
        Mockingbird.setReturnValue(false, crapValues, "get", "(int)java.lang.Object", new Object[] {new Integer(1)}, methodCrap, 1);
        Mockingbird.setReturnValue(methodCrap.getCrap(), 1.6409155F);
        Mockingbird.setReturnValue(false, crapValues, "size", "()int", new Object[] {}, new Integer(4), 1);
        Mockingbird.setReturnValue(false, crapValues, "get", "(int)java.lang.Object", new Object[] {new Integer(2)}, methodCrap2, 1);
        Mockingbird.setReturnValue(methodCrap2.getCrap(), 10100.0F);
        Mockingbird.setReturnValue(false, crapValues, "size", "()int", new Object[] {}, new Integer(4), 1);
        Mockingbird.setReturnValue(false, crapValues, "get", "(int)java.lang.Object", new Object[] {new Integer(3)}, methodCrap3, 1);
        Mockingbird.setReturnValue(methodCrap3.getCrap(), 100.0F);
        Mockingbird.setReturnValue(false, crapValues, "size", "()int", new Object[] {}, new Integer(4), 1);
        Mockingbird.setReturnValue(false, crapValues, "size", "()int", new Object[] {}, new Integer(4), 1);
        Mockingbird.setReturnValue(false, crapValues, "size", "()int", new Object[] {}, new Integer(4), 1);
        Mockingbird.setReturnValue(false, crapValues, "get", "(int)java.lang.Object", new Object[] {new Integer(0)}, methodCrap, 1);
        Mockingbird.setReturnValue(methodCrap.getCrap(), 1.6409155F);
        Mockingbird.setReturnValue(false, crapValues, "size", "()int", new Object[] {}, new Integer(4), 1);
        Mockingbird.setReturnValue(false, crapValues, "get", "(int)java.lang.Object", new Object[] {new Integer(1)}, methodCrap, 1);
        Mockingbird.setReturnValue(methodCrap.getCrap(), 1.6409155F);
        Mockingbird.setReturnValue(false, crapValues, "size", "()int", new Object[] {}, new Integer(4), 1);
        Mockingbird.setReturnValue(false, crapValues, "get", "(int)java.lang.Object", new Object[] {new Integer(2)}, methodCrap2, 1);
        Mockingbird.setReturnValue(methodCrap2.getCrap(), 10100.0F);
        Mockingbird.setReturnValue(false, crapValues, "size", "()int", new Object[] {}, new Integer(4), 1);
        Mockingbird.setReturnValue(false, crapValues, "get", "(int)java.lang.Object", new Object[] {new Integer(3)}, methodCrap3, 1);
        Mockingbird.setReturnValue(methodCrap3.getCrap(), 100.0F);
        Mockingbird.setReturnValue(false, crapValues, "size", "()int", new Object[] {}, new Integer(4), 1);
        Iterator iterator2 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.setReturnValue(false, crapValues, "iterator", "()java.util.Iterator", new Object[] {}, iterator2, 1);
        Mockingbird.setReturnValue(false, iterator2, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator2, "next", "()java.lang.Object", new Object[] {}, methodCrap, 1);
        Mockingbird.setReturnValue(methodCrap.getCrap(), 1.6409155F);
        Mockingbird.setReturnValue(false, iterator2, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator2, "next", "()java.lang.Object", new Object[] {}, methodCrap, 1);
        Mockingbird.setReturnValue(methodCrap.getCrap(), 1.6409155F);
        Mockingbird.setReturnValue(false, iterator2, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator2, "next", "()java.lang.Object", new Object[] {}, methodCrap2, 1);
        Mockingbird.setReturnValue(methodCrap2.getCrap(), 10100.0F);
        Mockingbird.setReturnValue(false, iterator2, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator2, "next", "()java.lang.Object", new Object[] {}, methodCrap3, 1);
        Mockingbird.setReturnValue(methodCrap3.getCrap(), 100.0F);
        Mockingbird.setReturnValue(false, iterator2, "hasNext", "()boolean", new Object[] {}, Boolean.FALSE, 1);
        Iterator iterator3 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.setReturnValue(false, crapValues, "iterator", "()java.util.Iterator", new Object[] {}, iterator3, 1);
        Mockingbird.setReturnValue(false, iterator3, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator3, "next", "()java.lang.Object", new Object[] {}, methodCrap, 1);
        Mockingbird.setReturnValue(methodCrap.getCrapLoad(100.0F), 0);
        Mockingbird.setReturnValue(false, iterator3, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator3, "next", "()java.lang.Object", new Object[] {}, methodCrap, 1);
        Mockingbird.setReturnValue(methodCrap.getCrapLoad(1000.0F), 0);
        Mockingbird.setReturnValue(false, iterator3, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator3, "next", "()java.lang.Object", new Object[] {}, methodCrap2, 1);
        Mockingbird.setReturnValue(methodCrap2.getCrapLoad(0.0F), 103);
        Mockingbird.setReturnValue(false, iterator3, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator3, "next", "()java.lang.Object", new Object[] {}, methodCrap3, 1);
        Mockingbird.setReturnValue(methodCrap3.getCrapLoad(-1.0F), 3);
        Mockingbird.setReturnValue(false, iterator3, "hasNext", "()boolean", new Object[] {}, Boolean.FALSE, 1);
        Mockingbird.enterTestMode(SystemCrapStats.class);
        SystemCrapStats systemCrapStats = new SystemCrapStats(crapValues, "testSystemCrapStatsName", null, 100.0F, 1000.0F, 0.0F);
        Mockingbird.enterRecordingMode();
        Iterator iterator4 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.setReturnValue(false, crapValues, "iterator", "()java.util.Iterator", new Object[] {}, iterator4, 1);
        Mockingbird.setReturnValue(false, iterator4, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator4, "next", "()java.lang.Object", new Object[] {}, methodCrap, 1);
        Mockingbird.setReturnValue(methodCrap.getCrap(), 1.6409155F);
        Mockingbird.setReturnValue(methodCrap.getCrap(), 1.6409155F);
        Mockingbird.setReturnValue(false, iterator4, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator4, "next", "()java.lang.Object", new Object[] {}, methodCrap, 1);
        Mockingbird.setReturnValue(methodCrap.getCrap(), 1.6409155F);
        Mockingbird.setReturnValue(methodCrap.getCrap(), 1.6409155F);
        Mockingbird.setReturnValue(false, iterator4, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator4, "next", "()java.lang.Object", new Object[] {}, methodCrap2, 1);
        Mockingbird.setReturnValue(methodCrap2.getCrap(), 10100.0F);
        Mockingbird.setReturnValue(methodCrap2.getCrap(), 10100.0F);
        Mockingbird.setReturnValue(false, iterator4, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator4, "next", "()java.lang.Object", new Object[] {}, methodCrap3, 1);
        Mockingbird.setReturnValue(methodCrap3.getCrap(), 100.0F);
        Mockingbird.setReturnValue(methodCrap3.getCrap(), 100.0F);
        Mockingbird.setReturnValue(false, iterator4, "hasNext", "()boolean", new Object[] {}, Boolean.FALSE, 1);
        Mockingbird.enterTestMode(SystemCrapStats.class);
        int result = ((Number) callPrivateMethod("org.crap4j.SystemCrapStats", "crapBetween", new Class[] {float.class, float.class}, systemCrapStats, new Object[] {new Float(0.0F), new Float(100.0F)})).intValue();
        assertEquals("result", 2, result);
        assertSame("systemCrapStats.getSubjects()", crapValues, systemCrapStats.getSubjects());
    }
    
    public void testCrapBetween3() throws Throwable {
        MethodComplexity complexity2 = new MethodComplexity("testSystemCrapStatsParam1", "testSystemCrapStatsParam2", "testSystemCrapStatsParam3", "testSystemCrapStatsParam4", "testSystemCrapStatsParam5", 100, "testSystemCrapStatsParam7");
        List crapValues = new ArrayList(100);
        crapValues.add(new MethodCrap("testSystemCrapStatsMethodSignature", 0.0F, complexity2));
        SystemCrapStats systemCrapStats = new SystemCrapStats(crapValues, "testSystemCrapStatsName", null, 100.0F, 1000.0F, 0.0F);
        int result = ((Number) callPrivateMethod("org.crap4j.SystemCrapStats", "crapBetween", new Class[] {float.class, float.class}, systemCrapStats, new Object[] {new Float(100.0F), new Float(1000.0F)})).intValue();
        assertEquals("result", 0, result);
        assertSame("systemCrapStats.getSubjects()", crapValues, systemCrapStats.getSubjects());
    }
    
    public void testCrapBetween4() throws Throwable {
        List crapValues = new ArrayList(100);
        MethodComplexity complexity2 = new MethodComplexity("testSystemCrapStatsMethodSignature", "testSystemCrapStatsPkgclassName", "testSystemCrapStatsMethodName", "testSystemCrapStatsMethodDescriptor", "testSystemCrapStatsJava5Signature", 0, "testSystemCrapStatsPrettyMethodSignature");
        crapValues.add(new MethodCrap("testSystemCrapStatsMethodSignature", 0.0F, complexity2));
        SystemCrapStats systemCrapStats = new SystemCrapStats(crapValues, "testSystemCrapStatsName", null, 100.0F, 1000.0F, 0.0F);
        int result = ((Number) callPrivateMethod("org.crap4j.SystemCrapStats", "crapBetween", new Class[] {float.class, float.class}, systemCrapStats, new Object[] {new Float(100.0F), new Float(1000.0F)})).intValue();
        assertEquals("result", 0, result);
        assertSame("systemCrapStats.getSubjects()", crapValues, systemCrapStats.getSubjects());
    }
    
    public void testCrapBetween5() throws Throwable {
        List crapValues = new ArrayList(100);
        SystemCrapStats systemCrapStats = new SystemCrapStats(crapValues, "testSystemCrapStatsName", null, 100.0F, 1000.0F, 0.0F);
        int result = ((Number) callPrivateMethod("org.crap4j.SystemCrapStats", "crapBetween", new Class[] {float.class, float.class}, systemCrapStats, new Object[] {new Float(100.0F), new Float(1000.0F)})).intValue();
        assertEquals("result", 0, result);
        assertSame("systemCrapStats.getSubjects()", crapValues, systemCrapStats.getSubjects());
    }
    
    public void testCrapGE() throws Throwable {
        MethodComplexity complexity2 = new MethodComplexity("testSystemCrapStatsParam1", "testSystemCrapStatsParam2", "testSystemCrapStatsParam3", "testSystemCrapStatsParam4", "testSystemCrapStatsParam5", 100, "testSystemCrapStatsParam7");
        List crapValues = new ArrayList(100);
        crapValues.add(new MethodCrap("testSystemCrapStatsMethodSignature", 0.0F, complexity2));
        SystemCrapStats systemCrapStats = new SystemCrapStats(crapValues, "testSystemCrapStatsName", null, 100.0F, 1000.0F, 0.0F);
        int result = ((Number) callPrivateMethod("org.crap4j.SystemCrapStats", "crapGE", new Class[] {float.class}, systemCrapStats, new Object[] {new Float(100.0F)})).intValue();
        assertEquals("result", 1, result);
        assertSame("systemCrapStats.getSubjects()", crapValues, systemCrapStats.getSubjects());
    }
    
    public void testCrapGE1() throws Throwable {
        MethodComplexity complexity2 = new MethodComplexity("testSystemCrapStatsParam1", "testSystemCrapStatsParam2", "testSystemCrapStatsParam3", "testSystemCrapStatsParam4", "testSystemCrapStatsParam5", 100, "testSystemCrapStatsParam7");
        List crapValues = new ArrayList(100);
        crapValues.add(new MethodCrap("testSystemCrapStatsMethodSignature", 1.0F, complexity2));
        SystemCrapStats systemCrapStats = new SystemCrapStats(crapValues, "testSystemCrapStatsName", null, 100.0F, 1000.0F, 0.0F);
        int result = ((Number) callPrivateMethod("org.crap4j.SystemCrapStats", "crapGE", new Class[] {float.class}, systemCrapStats, new Object[] {new Float(1000.0F)})).intValue();
        assertEquals("result", 0, result);
        assertSame("systemCrapStats.getSubjects()", crapValues, systemCrapStats.getSubjects());
    }
    
    public void testCrapGE2() throws Throwable {
        List crapValues = new ArrayList(100);
        SystemCrapStats systemCrapStats = new SystemCrapStats(crapValues, "testSystemCrapStatsName", null, 100.0F, 1000.0F, 0.0F);
        int result = ((Number) callPrivateMethod("org.crap4j.SystemCrapStats", "crapGE", new Class[] {float.class}, systemCrapStats, new Object[] {new Float(100.0F)})).intValue();
        assertEquals("result", 0, result);
        assertSame("systemCrapStats.getSubjects()", crapValues, systemCrapStats.getSubjects());
    }
    
    public void testCrapGE3() throws Throwable {
        MethodComplexity complexity2 = new MethodComplexity("testSystemCrapStatsParam1", "testSystemCrapStatsParam2", "testSystemCrapStatsParam3", "testSystemCrapStatsParam4", "testSystemCrapStatsParam5", 0, "testSystemCrapStatsParam7");
        MethodComplexity complexity2_2 = new MethodComplexity("testSystemCrapStatsParam11", "testSystemCrapStatsParam21", "testSystemCrapStatsParam31", "testSystemCrapStatsParam41", "testSystemCrapStatsParam51", 10, "testSystemCrapStatsParam71");
        MethodCrap methodCrap = new MethodCrap("testSystemCrapStatsMethodSignature", 0.0F, complexity2);
        List crapValues = new ArrayList(100);
        crapValues.add(new MethodCrap("testSystemCrapStatsMethodSignature1", 0.0F, complexity2_2));
        crapValues.add(methodCrap);
        SystemCrapStats systemCrapStats = new SystemCrapStats(crapValues, "testSystemCrapStatsName", null, 100.0F, 1000.0F, 0.0F);
        int result = ((Number) callPrivateMethod("org.crap4j.SystemCrapStats", "crapGE", new Class[] {float.class}, systemCrapStats, new Object[] {new Float(100.0F)})).intValue();
        assertEquals("result", 1, result);
        assertSame("systemCrapStats.getSubjects()", crapValues, systemCrapStats.getSubjects());
    }
    
    public void testCrapLessThan() throws Throwable {
        List crapValues = new ArrayList(100);
        SystemCrapStats systemCrapStats = new SystemCrapStats(crapValues, "testSystemCrapStatsName", null, 100.0F, 1000.0F, 0.0F);
        int result = ((Number) callPrivateMethod("org.crap4j.SystemCrapStats", "crapLessThan", new Class[] {float.class}, systemCrapStats, new Object[] {new Float(100.0F)})).intValue();
        assertEquals("result", 0, result);
        assertSame("systemCrapStats.getSubjects()", crapValues, systemCrapStats.getSubjects());
    }
    
    public void testCrapLessThan1() throws Throwable {
        List crapValues = new ArrayList(100);
        MethodComplexity complexity2 = new MethodComplexity("testSystemCrapStatsMethodSignature", "testSystemCrapStatsPkgclassName", "testSystemCrapStatsMethodName", "testSystemCrapStatsMethodDescriptor", "testSystemCrapStatsJava5Signature", 100, "testSystemCrapStatsPrettyMethodSignature");
        crapValues.add(new MethodCrap("testSystemCrapStatsMethodSignature", 0.0F, complexity2));
        SystemCrapStats systemCrapStats = new SystemCrapStats(crapValues, "testSystemCrapStatsName", null, 100.0F, 1000.0F, 0.0F);
        int result = ((Number) callPrivateMethod("org.crap4j.SystemCrapStats", "crapLessThan", new Class[] {float.class}, systemCrapStats, new Object[] {new Float(100.0F)})).intValue();
        assertEquals("result", 0, result);
        assertSame("systemCrapStats.getSubjects()", crapValues, systemCrapStats.getSubjects());
    }
    
    public void testCrapLessThanWithAggressiveMocks() throws Throwable {
        SystemCrapStats systemCrapStats = (SystemCrapStats) Mockingbird.getProxyObject(SystemCrapStats.class, true);
        List list = (List) Mockingbird.getProxyObject(List.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Crap crap = (Crap) Mockingbird.getProxyObject(Crap.class);
        Crap crap2 = (Crap) Mockingbird.getProxyObject(Crap.class);
        setPrivateField(systemCrapStats, "crapSubjects", list);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(list.iterator(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), crap);
        Mockingbird.setReturnValue(crap.getCrap(), Float.MIN_VALUE);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), crap2);
        Mockingbird.setReturnValue(crap2.getCrap(), 2.8E-45F);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.enterTestMode(SystemCrapStats.class);
        int result = ((Number) callPrivateMethod("org.crap4j.SystemCrapStats", "crapLessThan", new Class[] {float.class}, systemCrapStats, new Object[] {new Float(2.8E-45F)})).intValue();
        assertEquals("result", 1, result);
        assertNotNull("systemCrapStats.getSubjects()", systemCrapStats.getSubjects());
    }
    
    public void testCrapMethodPercent() throws Throwable {
        SystemCrapStats systemCrapStats = new SystemCrapStats(new ArrayList(100), "testSystemCrapStatsName", null, 100.0F, 1000.0F, 0.0F);
        callPrivateMethod("org.crap4j.SystemCrapStats", "crapMethodPercent", new Class[] {}, systemCrapStats, new Object[] {});
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testCrapScores() throws Throwable {
        SystemCrapStats systemCrapStats = new SystemCrapStats(new ArrayList(100), "testSystemCrapStatsName", null, 100.0F, 1000.0F, 0.0F);
        float[] result = (float[]) callPrivateMethod("org.crap4j.SystemCrapStats", "crapScores", new Class[] {List.class}, systemCrapStats, new Object[] {new ArrayList(1000)});
        assertEquals("result.length", 0, result.length);
    }
    
    public void testCrapScores1() throws Throwable {
        MethodComplexity complexity2 = new MethodComplexity("testSystemCrapStatsMethodSignature", "testSystemCrapStatsPkgclassName", "testSystemCrapStatsMethodName", "testSystemCrapStatsMethodDescriptor", "testSystemCrapStatsJava5Signature", 100, "testSystemCrapStatsPrettyMethodSignature");
        List crapValues = new ArrayList(100);
        crapValues.add(new MethodCrap("testSystemCrapStatsMethodSignature", 0.0F, complexity2));
        SystemCrapStats systemCrapStats = new SystemCrapStats(crapValues, "testSystemCrapStatsName", null, 100.0F, 1000.0F, 0.0F);
        float[] result = (float[]) callPrivateMethod("org.crap4j.SystemCrapStats", "crapScores", new Class[] {List.class}, systemCrapStats, new Object[] {new ArrayList(1000)});
        assertEquals("result.length", 1, result.length);
        assertEquals("(float[]) result[0]", 0.0F, ((float[]) result)[0], 1.0E-6F);
    }
    
    public void testCrapScores2() throws Throwable {
        MethodComplexity complexity2 = new MethodComplexity("testSystemCrapStatsParam1", "testSystemCrapStatsParam2", "testSystemCrapStatsParam3", "testSystemCrapStatsParam4", "testSystemCrapStatsParam5", 100, "testSystemCrapStatsParam7");
        MethodComplexity complexity2_2 = new MethodComplexity("testSystemCrapStatsParam11", "testSystemCrapStatsParam21", "testSystemCrapStatsParam31", "testSystemCrapStatsParam41", "testSystemCrapStatsParam51", 1000, "testSystemCrapStatsParam71");
        MethodCrap methodCrap = new MethodCrap("testSystemCrapStatsMethodSignature", 0.0F, complexity2);
        List crapValues = new ArrayList(100);
        crapValues.add(new MethodCrap("testSystemCrapStatsMethodSignature1", 1.0F, complexity2_2));
        SystemCrapStats systemCrapStats = new SystemCrapStats(crapValues, "testSystemCrapStatsName", null, 100.0F, 1000.0F, 0.0F);
        List arrayList = new ArrayList(1000);
        arrayList.add(methodCrap);
        float[] result = (float[]) callPrivateMethod("org.crap4j.SystemCrapStats", "crapScores", new Class[] {List.class}, systemCrapStats, new Object[] {arrayList});
        assertEquals("result.length", 1, result.length);
        assertEquals("(float[]) result[0]", 10100.0F, ((float[]) result)[0], 1.0E-6F);
    }
    
    public void testGenerateBarPictureWithAggressiveMocks() throws Throwable {
        SystemCrapStats systemCrapStats = (SystemCrapStats) Mockingbird.getProxyObject(SystemCrapStats.class, true);
        CrapProject crapProject = (CrapProject) Mockingbird.getProxyObject(CrapProject.class);
        Mockingbird.enterRecordingMode();
        NewCrapImageGenerator newCrapImageGenerator = (NewCrapImageGenerator) Mockingbird.getProxyObject(NewCrapImageGenerator.class);
        Mockingbird.replaceObjectForRecording(NewCrapImageGenerator.class, "<init>(float,java.lang.String,java.lang.String,boolean,float)", newCrapImageGenerator);
        setPrivateField(systemCrapStats, "crapMethodCount", new Integer(0));
        setPrivateField(systemCrapStats, "methodCount", new Integer(1));
        setPrivateField(systemCrapStats, "crapProject", crapProject);
        setPrivateField(systemCrapStats, "crapPercentCriticalThreshold", new Float(3.3592705E29F));
        setPrivateField(crapProject, "outputDir", "");
        newCrapImageGenerator.makeGaugeAndWriteToFile();
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(SystemCrapStats.class);
        systemCrapStats.generateBarPicture();
        assertEquals("systemCrapStats.getSubjectCount()", 1, systemCrapStats.getSubjectCount());
    }
    
    public void testGenerateHtmlWithAggressiveMocks() throws Throwable {
        SystemCrapStats systemCrapStats = (SystemCrapStats) Mockingbird.getProxyObject(SystemCrapStats.class, true);
        CrapProject crapProject = (CrapProject) Mockingbird.getProxyObject(CrapProject.class);
        TransformerException transformerException = (TransformerException) Mockingbird.getProxyObject(TransformerException.class);
        setPrivateField(systemCrapStats, "crapProject", crapProject);
        setPrivateField(crapProject, "outputDir", "");
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(systemCrapStats.getRelativeResource("g_backbar.gif"), null);
        File file = (File) Mockingbird.getProxyObject(File.class);
        Mockingbird.replaceObjectForRecording(File.class, "<init>(java.lang.String,java.lang.String)", file);
        systemCrapStats.copyFile(null, file);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(systemCrapStats.getRelativeResource("g_colorbar3.jpg"), null);
        File file2 = (File) Mockingbird.getProxyObject(File.class);
        Mockingbird.replaceObjectForRecording(File.class, "<init>(java.lang.String,java.lang.String)", file2);
        systemCrapStats.copyFile(null, file2);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(crapProject.getReportFile(), null);
        StreamSource streamSource = new StreamSource();
        Mockingbird.replaceObjectForRecording(StreamSource.class, "<init>(java.io.File)", streamSource);
        Mockingbird.setReturnValue(systemCrapStats.getRelativeResource("report.xslt"), null);
        Mockingbird.setReturnValue(crapProject.getReportHtmlFile(), null);
        Mockingbird.setReturnValue(false, systemCrapStats, "makeHtml", "(javax.xml.transform.stream.StreamSource,java.io.InputStream,java.io.File)void", new Object[] {streamSource, null, null}, null, 1);
        Mockingbird.setReturnValue(systemCrapStats.getRelativeResource("detail_crap.xslt"), null);
        File file3 = (File) Mockingbird.getProxyObject(File.class);
        Mockingbird.replaceObjectForRecording(File.class, "<init>(java.lang.String,java.lang.String)", file3);
        Mockingbird.setReturnValue(false, systemCrapStats, "makeHtml", "(javax.xml.transform.stream.StreamSource,java.io.InputStream,java.io.File)void", new Object[] {streamSource, null, file3}, null, 1);
        Mockingbird.setReturnValue(systemCrapStats.getRelativeResource("detail_crap_load.xslt"), null);
        File file4 = (File) Mockingbird.getProxyObject(File.class);
        Mockingbird.replaceObjectForRecording(File.class, "<init>(java.lang.String,java.lang.String)", file4);
        Mockingbird.setReturnValue(false, systemCrapStats, "makeHtml", "(javax.xml.transform.stream.StreamSource,java.io.InputStream,java.io.File)void", new Object[] {streamSource, null, file4}, null, 1);
        Mockingbird.setReturnValue(systemCrapStats.getRelativeResource("detail_complexity.xslt"), null);
        File file5 = (File) Mockingbird.getProxyObject(File.class);
        Mockingbird.replaceObjectForRecording(File.class, "<init>(java.lang.String,java.lang.String)", file5);
        Mockingbird.setReturnValue(false, systemCrapStats, "makeHtml", "(javax.xml.transform.stream.StreamSource,java.io.InputStream,java.io.File)void", new Object[] {streamSource, null, file5}, null, 1);
        Mockingbird.setReturnValue(systemCrapStats.getRelativeResource("detail_coverage.xslt"), null);
        File file6 = (File) Mockingbird.getProxyObject(File.class);
        Mockingbird.replaceObjectForRecording(File.class, "<init>(java.lang.String,java.lang.String)", file6);
        Mockingbird.setException(false, systemCrapStats, "makeHtml", "(javax.xml.transform.stream.StreamSource,java.io.InputStream,java.io.File)void", new Object[] {streamSource, null, file6}, transformerException, 1);
        Mockingbird.setReturnValue(false, transformerException, "printStackTrace", "()void", new Object[] {}, null, 1);
        Mockingbird.enterTestMode(SystemCrapStats.class);
        systemCrapStats.generateHtml();
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testGenerateHtmlWithAggressiveMocks1() throws Throwable {
        SystemCrapStats systemCrapStats = (SystemCrapStats) Mockingbird.getProxyObject(SystemCrapStats.class, true);
        CrapProject crapProject = (CrapProject) Mockingbird.getProxyObject(CrapProject.class);
        setPrivateField(systemCrapStats, "crapProject", crapProject);
        setPrivateField(crapProject, "outputDir", "");
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(systemCrapStats.getRelativeResource("g_backbar.gif"), null);
        File file = (File) Mockingbird.getProxyObject(File.class);
        Mockingbird.replaceObjectForRecording(File.class, "<init>(java.lang.String,java.lang.String)", file);
        systemCrapStats.copyFile(null, file);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(systemCrapStats.getRelativeResource("g_colorbar3.jpg"), null);
        File file2 = (File) Mockingbird.getProxyObject(File.class);
        Mockingbird.replaceObjectForRecording(File.class, "<init>(java.lang.String,java.lang.String)", file2);
        systemCrapStats.copyFile(null, file2);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(crapProject.getReportFile(), null);
        StreamSource streamSource = new StreamSource();
        Mockingbird.replaceObjectForRecording(StreamSource.class, "<init>(java.io.File)", streamSource);
        Mockingbird.setReturnValue(systemCrapStats.getRelativeResource("report.xslt"), null);
        Mockingbird.setReturnValue(crapProject.getReportHtmlFile(), null);
        Mockingbird.setReturnValue(false, systemCrapStats, "makeHtml", "(javax.xml.transform.stream.StreamSource,java.io.InputStream,java.io.File)void", new Object[] {streamSource, null, null}, null, 1);
        Mockingbird.setReturnValue(systemCrapStats.getRelativeResource("detail_crap.xslt"), null);
        File file3 = (File) Mockingbird.getProxyObject(File.class);
        Mockingbird.replaceObjectForRecording(File.class, "<init>(java.lang.String,java.lang.String)", file3);
        Mockingbird.setReturnValue(false, systemCrapStats, "makeHtml", "(javax.xml.transform.stream.StreamSource,java.io.InputStream,java.io.File)void", new Object[] {streamSource, null, file3}, null, 1);
        Mockingbird.setReturnValue(systemCrapStats.getRelativeResource("detail_crap_load.xslt"), null);
        File file4 = (File) Mockingbird.getProxyObject(File.class);
        Mockingbird.replaceObjectForRecording(File.class, "<init>(java.lang.String,java.lang.String)", file4);
        Mockingbird.setReturnValue(false, systemCrapStats, "makeHtml", "(javax.xml.transform.stream.StreamSource,java.io.InputStream,java.io.File)void", new Object[] {streamSource, null, file4}, null, 1);
        Mockingbird.setReturnValue(systemCrapStats.getRelativeResource("detail_complexity.xslt"), null);
        File file5 = (File) Mockingbird.getProxyObject(File.class);
        Mockingbird.replaceObjectForRecording(File.class, "<init>(java.lang.String,java.lang.String)", file5);
        Mockingbird.setReturnValue(false, systemCrapStats, "makeHtml", "(javax.xml.transform.stream.StreamSource,java.io.InputStream,java.io.File)void", new Object[] {streamSource, null, file5}, null, 1);
        Mockingbird.setReturnValue(systemCrapStats.getRelativeResource("detail_coverage.xslt"), null);
        File file6 = (File) Mockingbird.getProxyObject(File.class);
        Mockingbird.replaceObjectForRecording(File.class, "<init>(java.lang.String,java.lang.String)", file6);
        Mockingbird.setReturnValue(false, systemCrapStats, "makeHtml", "(javax.xml.transform.stream.StreamSource,java.io.InputStream,java.io.File)void", new Object[] {streamSource, null, file6}, null, 1);
        Mockingbird.enterTestMode(SystemCrapStats.class);
        systemCrapStats.generateHtml();
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testGeneratePictureWithAggressiveMocks() throws Throwable {
        SystemCrapStats systemCrapStats = (SystemCrapStats) Mockingbird.getProxyObject(SystemCrapStats.class, true);
        CrapProject crapProject = (CrapProject) Mockingbird.getProxyObject(CrapProject.class);
        Mockingbird.enterRecordingMode();
        CrapImageGenerator crapImageGenerator = (CrapImageGenerator) Mockingbird.getProxyObject(CrapImageGenerator.class);
        Mockingbird.replaceObjectForRecording(CrapImageGenerator.class, "<init>(float,java.lang.String,java.lang.String,float,float)", crapImageGenerator);
        setPrivateField(systemCrapStats, "crapMethodCount", new Integer(0));
        setPrivateField(systemCrapStats, "methodCount", new Integer(1));
        setPrivateField(systemCrapStats, "crapProject", crapProject);
        setPrivateField(systemCrapStats, "crapPercentWarningThreshold", new Float(2.8E-45F));
        setPrivateField(systemCrapStats, "crapPercentCriticalThreshold", new Float(2.8E-45F));
        setPrivateField(crapProject, "outputDir", "");
        crapImageGenerator.makeGaugeAndWriteToFile();
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(SystemCrapStats.class);
        systemCrapStats.generatePicture();
        assertEquals("systemCrapStats.getSubjectCount()", 1, systemCrapStats.getSubjectCount());
    }
    
    public void testGetAverage() throws Throwable {
        SystemCrapStats systemCrapStats = new SystemCrapStats(new ArrayList(100), "testSystemCrapStatsName", null, 100.0F, 1000.0F, 0.0F);
        systemCrapStats.getAverage();
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testGetCrapNumber() throws Throwable {
        SystemCrapStats systemCrapStats = new SystemCrapStats(new ArrayList(100), "testSystemCrapStatsName", null, 100.0F, 1000.0F, 0.0F);
        systemCrapStats.getCrapNumber();
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testGetMedian() throws Throwable {
        SystemCrapStats systemCrapStats = new SystemCrapStats(new ArrayList(100), "testSystemCrapStatsName", null, 100.0F, 1000.0F, 0.0F);
        float result = systemCrapStats.getMedian();
        assertEquals("result", 0.0F, result, 1.0E-6F);
    }
    
    public void testGetMedian1() throws Throwable {
        MethodComplexity complexity2 = new MethodComplexity("testSystemCrapStatsParam1", "testSystemCrapStatsParam2", "testSystemCrapStatsParam3", "testSystemCrapStatsParam4", "testSystemCrapStatsParam5", 100, "testSystemCrapStatsParam7");
        List crapValues = new ArrayList(100);
        crapValues.add(new MethodCrap("testSystemCrapStatsMethodSignature", 0.0F, complexity2));
        SystemCrapStats systemCrapStats = new SystemCrapStats(crapValues, "testSystemCrapStatsName", null, 100.0F, 1000.0F, 0.0F);
        float result = systemCrapStats.getMedian();
        assertEquals("result", 10100.0F, result, 1.0E-6F);
    }
    
    public void testGetRelativeResource() throws Throwable {
        SystemCrapStats systemCrapStats = new SystemCrapStats(new ArrayList(100), "testSystemCrapStatsName", null, 100.0F, 1000.0F, 0.0F);
        InputStream result = systemCrapStats.getRelativeResource("testSystemCrapStatsFile");
        assertNull("result", result);
    }
    
    public void testGetStdDev() throws Throwable {
        SystemCrapStats systemCrapStats = new SystemCrapStats(new ArrayList(100), "testSystemCrapStatsParam2", null, 100.0F, 1000.0F, 0.0F);
        systemCrapStats.getStdDev();
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testGetSubjectCount() throws Throwable {
        SystemCrapStats systemCrapStats = new SystemCrapStats(new ArrayList(100), "testSystemCrapStatsName", null, 100.0F, 1000.0F, 0.0F);
        int result = systemCrapStats.getSubjectCount();
        assertEquals("result", 0, result);
    }
    
    public void testGetSubjects() throws Throwable {
        List arrayList = new ArrayList(100);
        SystemCrapStats systemCrapStats = new SystemCrapStats(arrayList, "testSystemCrapStatsParam2", null, 100.0F, 1000.0F, 0.0F);
        List result = systemCrapStats.getSubjects();
        assertSame("result", arrayList, result);
    }
    
    public void testGetTotal() throws Throwable {
        SystemCrapStats systemCrapStats = new SystemCrapStats(new ArrayList(100), "testSystemCrapStatsParam2", null, 100.0F, 1000.0F, 0.0F);
        float result = systemCrapStats.getTotal();
        assertEquals("result", 0.0F, result, 1.0E-6F);
    }
    
    public void testMakeHist() throws Throwable {
        SystemCrapStats systemCrapStats = new SystemCrapStats(new ArrayList(100), "testSystemCrapStatsName", null, 100.0F, 1000.0F, 0.0F);
        MyStringBuilder myStringBuilder = new MyStringBuilder();
        callPrivateMethod("org.crap4j.SystemCrapStats", "makeHist", new Class[] {MyStringBuilder.class, String.class, String.class, String.class}, systemCrapStats, new Object[] {myStringBuilder, "testSystemCrapStatsPlace", "testSystemCrapStatsValue", "testSystemCrapStatsHeight"});
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testMakeHtmlWithAggressiveMocks() throws Throwable {
        SystemCrapStats systemCrapStats = (SystemCrapStats) Mockingbird.getProxyObject(SystemCrapStats.class, true);
        TransformerFactory transformerFactory = (TransformerFactory) Mockingbird.getProxyObject(TransformerFactory.class);
        Transformer transformer = (Transformer) Mockingbird.getProxyObject(Transformer.class);
        Mockingbird.enterRecordingMode();
        Source streamSource = new StreamSource();
        Mockingbird.replaceObjectForRecording(StreamSource.class, "<init>(java.io.InputStream)", streamSource);
        Mockingbird.setReturnValue(true, TransformerFactory.class, "newInstance", "()javax.xml.transform.TransformerFactory", new Object[] {}, transformerFactory, 1);
        Mockingbird.setReturnValue(transformerFactory.newTransformer(streamSource), transformer);
        Result streamResult = new StreamResult();
        Mockingbird.replaceObjectForRecording(StreamResult.class, "<init>(java.io.File)", streamResult);
        transformer.transform(null, streamResult);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(SystemCrapStats.class);
        callPrivateMethod("org.crap4j.SystemCrapStats", "makeHtml", new Class[] {StreamSource.class, InputStream.class, File.class}, systemCrapStats, new Object[] {null, null, null});
        assertTrue("Test call resulted in expected outcome", true);
        // dependencies on static and environment state led to removal of 1 assertion
    }
    
    public void testPrintAllSubjectComplexities() throws Throwable {
        List arrayList = new ArrayList(100);
        SystemCrapStats systemCrapStats = new SystemCrapStats(arrayList, "testSystemCrapStatsParam2", null, 100.0F, 1000.0F, 0.0F);
        systemCrapStats.printAllSubjectComplexities();
        assertSame("systemCrapStats.getSubjects()", arrayList, systemCrapStats.getSubjects());
    }
    
    public void testPrintAllSubjectComplexities1() throws Throwable {
        MethodComplexity complexity2 = new MethodComplexity("testSystemCrapStatsParam1", "testSystemCrapStatsParam2", "testSystemCrapStatsParam3", "testSystemCrapStatsParam4", "testSystemCrapStatsParam5", 100, "testSystemCrapStatsParam7");
        List crapValues = new ArrayList(100);
        crapValues.add(new MethodCrap("testSystemCrapStatsMethodSignature", 0.0F, complexity2));
        SystemCrapStats systemCrapStats = new SystemCrapStats(crapValues, "testSystemCrapStatsName", null, 100.0F, 1000.0F, 0.0F);
        systemCrapStats.printAllSubjectComplexities();
        assertSame("systemCrapStats.getSubjects()", crapValues, systemCrapStats.getSubjects());
    }
    
    public void testToString() throws Throwable {
        SystemCrapStats systemCrapStats = new SystemCrapStats(new ArrayList(100), "testSystemCrapStatsName", null, 100.0F, 1000.0F, 0.0F);
        String result = systemCrapStats.toString();
        assertEquals("result", "testSystemCrapStatsName\n_____________________\nTotal Crap: 0.00, Crap: \uFFFD, Median: 0.00, Average: \uFFFD, Std Dev: \uFFFD, Method Count: 0, crapMethodCount: 0.00, crapMethodPercent: \uFFFD%", result);
    }
    
    public void testValidateParams() throws Throwable {
        SystemCrapStats systemCrapStats = new SystemCrapStats(new ArrayList(100), "testSystemCrapStatsName", null, 100.0F, 1000.0F, 0.0F);
        callPrivateMethod("org.crap4j.SystemCrapStats", "validateParams", new Class[] {List.class}, systemCrapStats, new Object[] {new ArrayList(1000)});
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testWriteReportWithAggressiveMocks() throws Throwable {
        SystemCrapStats systemCrapStats = (SystemCrapStats) Mockingbird.getProxyObject(SystemCrapStats.class, true);
        List list = (List) Mockingbird.getProxyObject(List.class);
        CrapProject crapProject = (CrapProject) Mockingbird.getProxyObject(CrapProject.class);
        Mockingbird.enterRecordingMode();
        MyStringBuilder myStringBuilder = (MyStringBuilder) Mockingbird.getProxyObject(MyStringBuilder.class);
        Mockingbird.replaceObjectForRecording(MyStringBuilder.class, "<init>()", myStringBuilder);
        NumberFormat numberFormat = (NumberFormat) Mockingbird.getProxyObject(NumberFormat.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Crap crap = (Crap) Mockingbird.getProxyObject(Crap.class);
        Crap crap2 = (Crap) Mockingbird.getProxyObject(Crap.class);
        TransformerException transformerException = (TransformerException) Mockingbird.getProxyObject(TransformerException.class);
        setPrivateField(systemCrapStats, "name", "");
        setPrivateField(systemCrapStats, "total", new Float(2.8E-45F));
        setPrivateField(systemCrapStats, "crapNumber", new Float(2.8E-45F));
        setPrivateField(systemCrapStats, "median", new Float(2.8E-45F));
        setPrivateField(systemCrapStats, "average", new Float(2.8E-45F));
        setPrivateField(systemCrapStats, "stdDev", new Double(2.802596928649634E-45));
        setPrivateField(systemCrapStats, "methodCount", new Integer(0));
        setPrivateField(systemCrapStats, "crapMethodCount", new Integer(0));
        setPrivateField(systemCrapStats, "crapWorkLoad", new Integer(0));
        setPrivateField(systemCrapStats, "crapSubjects", list);
        setPrivateField(systemCrapStats, "crapThreshold", new Float(0.0F));
        setPrivateField(systemCrapStats, "crapPercentWarningThreshold", new Float(2.8E-45F));
        setPrivateField(systemCrapStats, "crapProject", crapProject);
        setPrivateField(systemCrapStats, "crapPercentCriticalThreshold", new Float(3.3592705E29F));
        setPrivateField(crapProject, "outputDir", "");
        Comparator comparator = Crap.comparator;
        Mockingbird.setReturnValue(myStringBuilder.start("<crap_result>"), null);
        crapProject.toXml(myStringBuilder);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(myStringBuilder.start("<stats>"), null);
        Mockingbird.setReturnValue(true, CrapProject.class, "itemToXml", "(org.crap4j.util.MyStringBuilder,java.lang.String,java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(FormatUtil.getNumberFormatter(), numberFormat);
        Mockingbird.setReturnValue(false, numberFormat, "format", "(double)java.lang.String", new Object[] {new Double(2.802596928649634E-45)}, "", 1);
        Mockingbird.setReturnValue(true, CrapProject.class, "itemToXml", "(org.crap4j.util.MyStringBuilder,java.lang.String,java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(false, numberFormat, "format", "(double)java.lang.String", new Object[] {new Double(2.802596928649634E-45)}, "", 1);
        Mockingbird.setReturnValue(true, CrapProject.class, "itemToXml", "(org.crap4j.util.MyStringBuilder,java.lang.String,java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(false, numberFormat, "format", "(double)java.lang.String", new Object[] {new Double(2.802596928649634E-45)}, "", 1);
        Mockingbird.setReturnValue(true, CrapProject.class, "itemToXml", "(org.crap4j.util.MyStringBuilder,java.lang.String,java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(false, numberFormat, "format", "(double)java.lang.String", new Object[] {new Double(2.802596928649634E-45)}, "", 1);
        Mockingbird.setReturnValue(true, CrapProject.class, "itemToXml", "(org.crap4j.util.MyStringBuilder,java.lang.String,java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(false, numberFormat, "format", "(double)java.lang.String", new Object[] {new Double(2.802596928649634E-45)}, "", 1);
        Mockingbird.setReturnValue(true, CrapProject.class, "itemToXml", "(org.crap4j.util.MyStringBuilder,java.lang.String,java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(true, Integer.class, "toString", "(int)java.lang.String", new Object[] {new Integer(0)}, "", 1);
        Mockingbird.setReturnValue(true, CrapProject.class, "itemToXml", "(org.crap4j.util.MyStringBuilder,java.lang.String,java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(true, Integer.class, "toString", "(int)java.lang.String", new Object[] {new Integer(0)}, "", 1);
        Mockingbird.setReturnValue(true, CrapProject.class, "itemToXml", "(org.crap4j.util.MyStringBuilder,java.lang.String,java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(false, systemCrapStats, "crapMethodPercent", "()float", new Object[] {}, new Float(2.8E-45F), 1);
        Mockingbird.setReturnValue(false, numberFormat, "format", "(double)java.lang.String", new Object[] {new Double(2.802596928649634E-45)}, "", 1);
        Mockingbird.setReturnValue(true, CrapProject.class, "itemToXml", "(org.crap4j.util.MyStringBuilder,java.lang.String,java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(true, Integer.class, "toString", "(int)java.lang.String", new Object[] {new Integer(0)}, "", 1);
        Mockingbird.setReturnValue(true, CrapProject.class, "itemToXml", "(org.crap4j.util.MyStringBuilder,java.lang.String,java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(true, Integer.class, "toString", "(int)java.lang.String", new Object[] {new Integer(0)}, "", 1);
        Mockingbird.setReturnValue(true, CrapProject.class, "itemToXml", "(org.crap4j.util.MyStringBuilder,java.lang.String,java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(myStringBuilder.start("<histogram>"), null);
        Mockingbird.setReturnValue(false, systemCrapStats, "crapLessThan", "(float)int", new Object[] {new Float(2.0F)}, new Integer(0), 1);
        Mockingbird.setReturnValue(false, systemCrapStats, "crapBetween", "(float,float)int", new Object[] {new Float(2.0F), new Float(4.0F)}, new Integer(0), 1);
        Mockingbird.setReturnValue(false, systemCrapStats, "crapBetween", "(float,float)int", new Object[] {new Float(4.0F), new Float(8.0F)}, new Integer(0), 1);
        Mockingbird.setReturnValue(false, systemCrapStats, "crapBetween", "(float,float)int", new Object[] {new Float(8.0F), new Float(16.0F)}, new Integer(0), 1);
        Mockingbird.setReturnValue(false, systemCrapStats, "crapBetween", "(float,float)int", new Object[] {new Float(16.0F), new Float(32.0F)}, new Integer(0), 1);
        Mockingbird.setReturnValue(false, systemCrapStats, "crapBetween", "(float,float)int", new Object[] {new Float(32.0F), new Float(64.0F)}, new Integer(0), 1);
        Mockingbird.setReturnValue(false, systemCrapStats, "crapBetween", "(float,float)int", new Object[] {new Float(64.0F), new Float(128.0F)}, new Integer(0), 1);
        Mockingbird.setReturnValue(false, systemCrapStats, "crapBetween", "(float,float)int", new Object[] {new Float(128.0F), new Float(256.0F)}, new Integer(0), 1);
        Mockingbird.setReturnValue(false, systemCrapStats, "crapGE", "(float)int", new Object[] {new Float(256.0F)}, new Integer(1), 1);
        Mockingbird.setReturnValue(true, Arrays.class, "sort", "(int[])void", null, 1);
        Mockingbird.setReturnValue(true, Integer.class, "toString", "(int)java.lang.String", new Object[] {new Integer(0)}, "", 1);
        Mockingbird.setReturnValue(false, systemCrapStats, "adjustedHeight", "(int,float)float", new Object[] {new Integer(0), new Float(170.0F)}, new Float(2.8E-45F), 1);
        Mockingbird.setReturnValue(false, numberFormat, "format", "(double)java.lang.String", new Object[] {new Double(2.802596928649634E-45)}, "", 1);
        Mockingbird.setReturnValue(false, systemCrapStats, "makeHist", "(org.crap4j.util.MyStringBuilder,java.lang.String,java.lang.String,java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(true, Integer.class, "toString", "(int)java.lang.String", new Object[] {new Integer(0)}, "", 1);
        Mockingbird.setReturnValue(false, systemCrapStats, "adjustedHeight", "(int,float)float", new Object[] {new Integer(0), new Float(170.0F)}, new Float(2.8E-45F), 1);
        Mockingbird.setReturnValue(false, numberFormat, "format", "(double)java.lang.String", new Object[] {new Double(2.802596928649634E-45)}, "", 1);
        Mockingbird.setReturnValue(false, systemCrapStats, "makeHist", "(org.crap4j.util.MyStringBuilder,java.lang.String,java.lang.String,java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(true, Integer.class, "toString", "(int)java.lang.String", new Object[] {new Integer(0)}, "", 1);
        Mockingbird.setReturnValue(false, systemCrapStats, "adjustedHeight", "(int,float)float", new Object[] {new Integer(0), new Float(170.0F)}, new Float(2.8E-45F), 1);
        Mockingbird.setReturnValue(false, numberFormat, "format", "(double)java.lang.String", new Object[] {new Double(2.802596928649634E-45)}, "", 1);
        Mockingbird.setReturnValue(false, systemCrapStats, "makeHist", "(org.crap4j.util.MyStringBuilder,java.lang.String,java.lang.String,java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(true, Integer.class, "toString", "(int)java.lang.String", new Object[] {new Integer(0)}, "", 1);
        Mockingbird.setReturnValue(false, systemCrapStats, "adjustedHeight", "(int,float)float", new Object[] {new Integer(0), new Float(170.0F)}, new Float(2.8E-45F), 1);
        Mockingbird.setReturnValue(false, numberFormat, "format", "(double)java.lang.String", new Object[] {new Double(2.802596928649634E-45)}, "", 1);
        Mockingbird.setReturnValue(false, systemCrapStats, "makeHist", "(org.crap4j.util.MyStringBuilder,java.lang.String,java.lang.String,java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(true, Integer.class, "toString", "(int)java.lang.String", new Object[] {new Integer(0)}, "", 1);
        Mockingbird.setReturnValue(false, systemCrapStats, "adjustedHeight", "(int,float)float", new Object[] {new Integer(0), new Float(170.0F)}, new Float(2.8E-45F), 1);
        Mockingbird.setReturnValue(false, numberFormat, "format", "(double)java.lang.String", new Object[] {new Double(2.802596928649634E-45)}, "", 1);
        Mockingbird.setReturnValue(false, systemCrapStats, "makeHist", "(org.crap4j.util.MyStringBuilder,java.lang.String,java.lang.String,java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(true, Integer.class, "toString", "(int)java.lang.String", new Object[] {new Integer(0)}, "", 1);
        Mockingbird.setReturnValue(false, systemCrapStats, "adjustedHeight", "(int,float)float", new Object[] {new Integer(0), new Float(170.0F)}, new Float(2.8E-45F), 1);
        Mockingbird.setReturnValue(false, numberFormat, "format", "(double)java.lang.String", new Object[] {new Double(2.802596928649634E-45)}, "", 1);
        Mockingbird.setReturnValue(false, systemCrapStats, "makeHist", "(org.crap4j.util.MyStringBuilder,java.lang.String,java.lang.String,java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(true, Integer.class, "toString", "(int)java.lang.String", new Object[] {new Integer(0)}, "", 1);
        Mockingbird.setReturnValue(false, systemCrapStats, "adjustedHeight", "(int,float)float", new Object[] {new Integer(0), new Float(170.0F)}, new Float(2.8E-45F), 1);
        Mockingbird.setReturnValue(false, numberFormat, "format", "(double)java.lang.String", new Object[] {new Double(2.802596928649634E-45)}, "", 1);
        Mockingbird.setReturnValue(false, systemCrapStats, "makeHist", "(org.crap4j.util.MyStringBuilder,java.lang.String,java.lang.String,java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(true, Integer.class, "toString", "(int)java.lang.String", new Object[] {new Integer(0)}, "", 1);
        Mockingbird.setReturnValue(false, systemCrapStats, "adjustedHeight", "(int,float)float", new Object[] {new Integer(0), new Float(170.0F)}, new Float(2.8E-45F), 1);
        Mockingbird.setReturnValue(false, numberFormat, "format", "(double)java.lang.String", new Object[] {new Double(2.802596928649634E-45)}, "", 1);
        Mockingbird.setReturnValue(false, systemCrapStats, "makeHist", "(org.crap4j.util.MyStringBuilder,java.lang.String,java.lang.String,java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(true, Integer.class, "toString", "(int)java.lang.String", new Object[] {new Integer(1)}, "", 1);
        Mockingbird.setReturnValue(false, systemCrapStats, "adjustedHeight", "(int,float)float", new Object[] {new Integer(1), new Float(170.0F)}, new Float(2.8E-45F), 1);
        Mockingbird.setReturnValue(false, numberFormat, "format", "(double)java.lang.String", new Object[] {new Double(2.802596928649634E-45)}, "", 1);
        Mockingbird.setReturnValue(false, systemCrapStats, "makeHist", "(org.crap4j.util.MyStringBuilder,java.lang.String,java.lang.String,java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(myStringBuilder.end("</histogram>"), null);
        Mockingbird.setReturnValue(myStringBuilder.end("</stats>"), null);
        Mockingbird.setReturnValue(myStringBuilder.start("<methods>"), null);
        Mockingbird.setReturnValue(true, Collections.class, "sort", "(java.util.List,java.util.Comparator)void", new Object[] {list, comparator}, null, 1);
        Mockingbird.setReturnValue(list.iterator(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), crap);
        crap.toXml(myStringBuilder);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), crap2);
        crap2.toXml(myStringBuilder);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.setReturnValue(myStringBuilder.end("</methods>"), null);
        Mockingbird.setReturnValue(myStringBuilder.end("</crap_result>"), null);
        Mockingbird.setReturnValue(myStringBuilder.toString(), "");
        Mockingbird.setReturnValue(false, systemCrapStats, "getXmlReportFile", "()java.io.File", new Object[] {}, null, 1);
        Mockingbird.setReturnValue(true, FileUtil.class, "writeFile", "(java.io.File,java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(false, systemCrapStats, "crapMethodPercent", "()float", new Object[] {}, new Float(2.8E-45F), 1);
        CrapImageGenerator crapImageGenerator = (CrapImageGenerator) Mockingbird.getProxyObject(CrapImageGenerator.class);
        Mockingbird.replaceObjectForRecording(CrapImageGenerator.class, "<init>(float,java.lang.String,java.lang.String,float,float)", crapImageGenerator);
        crapImageGenerator.makeGaugeAndWriteToFile();
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(false, systemCrapStats, "crapMethodPercent", "()float", new Object[] {}, new Float(2.8E-45F), 1);
        NewCrapImageGenerator newCrapImageGenerator = (NewCrapImageGenerator) Mockingbird.getProxyObject(NewCrapImageGenerator.class);
        Mockingbird.replaceObjectForRecording(NewCrapImageGenerator.class, "<init>(float,java.lang.String,java.lang.String,boolean,float)", newCrapImageGenerator);
        newCrapImageGenerator.makeGaugeAndWriteToFile();
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(false, systemCrapStats, "copyImages", "()void", new Object[] {}, null, 1);
        Mockingbird.setReturnValue(false, systemCrapStats, "getXmlReportFile", "()java.io.File", new Object[] {}, null, 1);
        StreamSource streamSource = new StreamSource();
        Mockingbird.replaceObjectForRecording(StreamSource.class, "<init>(java.io.File)", streamSource);
        Mockingbird.setReturnValue(false, systemCrapStats, "generateMainPage", "(javax.xml.transform.stream.StreamSource)void", new Object[] {streamSource}, null, 1);
        Mockingbird.setReturnValue(false, systemCrapStats, "generateDetailCrapPage", "(javax.xml.transform.stream.StreamSource)void", new Object[] {streamSource}, null, 1);
        Mockingbird.setReturnValue(false, systemCrapStats, "generateDetailCrapLoadPage", "(javax.xml.transform.stream.StreamSource)void", new Object[] {streamSource}, null, 1);
        Mockingbird.setReturnValue(false, systemCrapStats, "generateDetailComplexityPage", "(javax.xml.transform.stream.StreamSource)void", new Object[] {streamSource}, null, 1);
        Mockingbird.setException(false, systemCrapStats, "generateDetailCoveragePage", "(javax.xml.transform.stream.StreamSource)void", new Object[] {streamSource}, transformerException, 1);
        Mockingbird.setReturnValue(false, transformerException, "printStackTrace", "()void", new Object[] {}, null, 1);
        Mockingbird.enterTestMode(SystemCrapStats.class);
        systemCrapStats.writeReport();
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testWriteXmlToFileWithAggressiveMocks() throws Throwable {
        SystemCrapStats systemCrapStats = (SystemCrapStats) Mockingbird.getProxyObject(SystemCrapStats.class, true);
        CrapProject crapProject = (CrapProject) Mockingbird.getProxyObject(CrapProject.class);
        setPrivateField(systemCrapStats, "crapProject", crapProject);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(crapProject.getReportFile(), null);
        FileUtil.writeFile((File) null, "");
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(SystemCrapStats.class);
        systemCrapStats.writeXmlToFile("");
        assertNull("systemCrapStats.crapProject.outputDir()", ((CrapProject) getPrivateField(systemCrapStats, "crapProject")).outputDir());
    }
    
    public void testConstructorThrowsIllegalArgumentException() throws Throwable {
        try {
            new SystemCrapStats(null, "testSystemCrapStatsName", null, 100.0F, 1000.0F, 0.0F);
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertEquals("ex.getMessage()", "Cannot compute for null values", ex.getMessage());
            assertThrownBy(SystemCrapStats.class, ex);
        }
    }
    
    public void testConstructorThrowsNullPointerException() throws Throwable {
        List crapValues = new ArrayList(100);
        crapValues.add(null);
        try {
            new SystemCrapStats(crapValues, "testSystemCrapStatsName", null, 100.0F, 1000.0F, 0.0F);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(SystemCrapStats.class, ex);
            assertEquals("(ArrayList) crapValues.size()", 1, crapValues.size());
        }
    }
    
    public void testComputeCrapWorkLoadThrowsNullPointerException() throws Throwable {
        SystemCrapStats systemCrapStats = new SystemCrapStats(new ArrayList(100), "testSystemCrapStatsName", null, 100.0F, 1000.0F, 0.0F);
        try {
            callPrivateMethod("org.crap4j.SystemCrapStats", "computeCrapWorkLoad", new Class[] {List.class}, systemCrapStats, new Object[] {null});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(SystemCrapStats.class, ex);
        }
    }
    
    public void testComputeTotalCrapThrowsNullPointerException() throws Throwable {
        SystemCrapStats systemCrapStats = new SystemCrapStats(new ArrayList(100), "testSystemCrapStatsName", null, 100.0F, 1000.0F, 0.0F);
        try {
            callPrivateMethod("org.crap4j.SystemCrapStats", "computeTotalCrap", new Class[] {List.class}, systemCrapStats, new Object[] {null});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(SystemCrapStats.class, ex);
        }
    }
    
    public void testCopyFileThrowsNullPointerException() throws Throwable {
        SystemCrapStats systemCrapStats = new SystemCrapStats(new ArrayList(100), "testSystemCrapStatsName", null, 100.0F, 1000.0F, 0.0F);
        byte[] bytes = new byte[1];
        try {
            systemCrapStats.copyFile(new ByteArrayInputStream(bytes), null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertEquals("ex.getMessage()", "name can't be null", ex.getMessage());
            assertThrownBy(FilePermission.class, ex);
        }
    }
    
    public void testCopyImagesThrowsNullPointerException() throws Throwable {
        SystemCrapStats systemCrapStats = new SystemCrapStats(new ArrayList(100), "testSystemCrapStatsName", null, 100.0F, 1000.0F, 0.0F);
        try {
            callPrivateMethod("org.crap4j.SystemCrapStats", "copyImages", new Class[] {}, systemCrapStats, new Object[] {});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(SystemCrapStats.class, ex);
        }
    }
    
    public void testCountCrapMethodsThrowsNullPointerException() throws Throwable {
        ArrayList crapValues = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, crapValues, "size", "()int", new Object[] {}, new Integer(0), 1);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.setReturnValue(false, crapValues, "iterator", "()java.util.Iterator", new Object[] {}, iterator, 1);
        Mockingbird.setReturnValue(false, iterator, "hasNext", "()boolean", new Object[] {}, Boolean.FALSE, 1);
        Mockingbird.setReturnValue(false, crapValues, "size", "()int", new Object[] {}, new Integer(0), 1);
        Mockingbird.setReturnValue(false, crapValues, "size", "()int", new Object[] {}, new Integer(0), 1);
        Mockingbird.setReturnValue(false, crapValues, "size", "()int", new Object[] {}, new Integer(0), 1);
        Mockingbird.setReturnValue(false, crapValues, "size", "()int", new Object[] {}, new Integer(0), 1);
        Iterator iterator2 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.setReturnValue(false, crapValues, "iterator", "()java.util.Iterator", new Object[] {}, iterator2, 1);
        Mockingbird.setReturnValue(false, iterator2, "hasNext", "()boolean", new Object[] {}, Boolean.FALSE, 1);
        Iterator iterator3 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.setReturnValue(false, crapValues, "iterator", "()java.util.Iterator", new Object[] {}, iterator3, 1);
        Mockingbird.setReturnValue(false, iterator3, "hasNext", "()boolean", new Object[] {}, Boolean.FALSE, 1);
        Mockingbird.enterTestMode(SystemCrapStats.class);
        SystemCrapStats systemCrapStats = new SystemCrapStats(crapValues, "testSystemCrapStatsName", null, 100.0F, 1000.0F, 0.0F);
        ArrayList arrayList = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.enterRecordingMode();
        Iterator iterator4 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.setReturnValue(false, arrayList, "iterator", "()java.util.Iterator", new Object[] {}, iterator4, 1);
        Mockingbird.setReturnValue(false, iterator4, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        MethodCrap methodCrap = (MethodCrap) Mockingbird.getProxyObject(MethodCrap.class);
        Mockingbird.setReturnValue(false, iterator4, "next", "()java.lang.Object", new Object[] {}, methodCrap, 1);
        Mockingbird.setReturnValue(methodCrap.getCrap(), 100.0F);
        Mockingbird.setReturnValue(false, iterator4, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        MethodCrap methodCrap2 = (MethodCrap) Mockingbird.getProxyObject(MethodCrap.class);
        Mockingbird.setReturnValue(false, iterator4, "next", "()java.lang.Object", new Object[] {}, methodCrap2, 1);
        Mockingbird.setReturnValue(methodCrap2.getCrap(), 10100.0F);
        Mockingbird.setReturnValue(false, iterator4, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        MethodCrap methodCrap3 = (MethodCrap) Mockingbird.getProxyObject(MethodCrap.class);
        Mockingbird.setReturnValue(false, iterator4, "next", "()java.lang.Object", new Object[] {}, methodCrap3, 1);
        Mockingbird.setReturnValue(methodCrap3.getCrap(), 7390.0F);
        Mockingbird.setReturnValue(false, iterator4, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator4, "next", "()java.lang.Object", new Object[] {}, null, 1);
        Mockingbird.enterTestMode(SystemCrapStats.class);
        try {
            callPrivateMethod("org.crap4j.SystemCrapStats", "countCrapMethods", new Class[] {List.class}, systemCrapStats, new Object[] {arrayList});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(SystemCrapStats.class, ex);
            assertEquals("arrayList.size()", 0, arrayList.size());
        }
    }
    
    public void testCountCrapMethodsThrowsNullPointerException1() throws Throwable {
        SystemCrapStats systemCrapStats = new SystemCrapStats(new ArrayList(100), "testSystemCrapStatsName", null, 100.0F, 1000.0F, 0.0F);
        try {
            callPrivateMethod("org.crap4j.SystemCrapStats", "countCrapMethods", new Class[] {List.class}, systemCrapStats, new Object[] {null});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(SystemCrapStats.class, ex);
        }
    }
    
    public void testCountCrapMethodsThrowsNullPointerException2() throws Throwable {
        List arrayList = new ArrayList(100);
        arrayList.add(null);
        SystemCrapStats systemCrapStats = new SystemCrapStats(new ArrayList(1000), "testSystemCrapStatsName", null, 100.0F, 1000.0F, 0.0F);
        try {
            callPrivateMethod("org.crap4j.SystemCrapStats", "countCrapMethods", new Class[] {List.class}, systemCrapStats, new Object[] {arrayList});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(SystemCrapStats.class, ex);
            assertEquals("(ArrayList) arrayList.size()", 1, arrayList.size());
        }
    }
    
    public void testCrapScoresThrowsArrayIndexOutOfBoundsException() throws Throwable {
        ArrayList crapValues = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, crapValues, "size", "()int", new Object[] {}, new Integer(1), 1);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.setReturnValue(false, crapValues, "iterator", "()java.util.Iterator", new Object[] {}, iterator, 1);
        Mockingbird.setReturnValue(false, iterator, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        MethodCrap methodCrap = (MethodCrap) Mockingbird.getProxyObject(MethodCrap.class);
        Mockingbird.setReturnValue(false, iterator, "next", "()java.lang.Object", new Object[] {}, methodCrap, 1);
        Mockingbird.setReturnValue(methodCrap.getCrap(), 100.0F);
        Mockingbird.setReturnValue(false, iterator, "hasNext", "()boolean", new Object[] {}, Boolean.FALSE, 1);
        Mockingbird.setReturnValue(false, crapValues, "size", "()int", new Object[] {}, new Integer(1), 1);
        Mockingbird.setReturnValue(false, crapValues, "size", "()int", new Object[] {}, new Integer(1), 1);
        Mockingbird.setReturnValue(false, crapValues, "get", "(int)java.lang.Object", new Object[] {new Integer(0)}, methodCrap, 1);
        Mockingbird.setReturnValue(methodCrap.getCrap(), 100.0F);
        Mockingbird.setReturnValue(false, crapValues, "size", "()int", new Object[] {}, new Integer(1), 1);
        Mockingbird.setReturnValue(false, crapValues, "size", "()int", new Object[] {}, new Integer(1), 1);
        Mockingbird.setReturnValue(false, crapValues, "size", "()int", new Object[] {}, new Integer(1), 1);
        Mockingbird.setReturnValue(false, crapValues, "get", "(int)java.lang.Object", new Object[] {new Integer(0)}, methodCrap, 1);
        Mockingbird.setReturnValue(methodCrap.getCrap(), 100.0F);
        Mockingbird.setReturnValue(false, crapValues, "size", "()int", new Object[] {}, new Integer(1), 1);
        Iterator iterator2 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.setReturnValue(false, crapValues, "iterator", "()java.util.Iterator", new Object[] {}, iterator2, 1);
        Mockingbird.setReturnValue(false, iterator2, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator2, "next", "()java.lang.Object", new Object[] {}, methodCrap, 1);
        Mockingbird.setReturnValue(methodCrap.getCrap(), 100.0F);
        Mockingbird.setReturnValue(false, iterator2, "hasNext", "()boolean", new Object[] {}, Boolean.FALSE, 1);
        Iterator iterator3 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.setReturnValue(false, crapValues, "iterator", "()java.util.Iterator", new Object[] {}, iterator3, 1);
        Mockingbird.setReturnValue(false, iterator3, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, iterator3, "next", "()java.lang.Object", new Object[] {}, methodCrap, 1);
        Mockingbird.setReturnValue(methodCrap.getCrapLoad(100.0F), 1000);
        Mockingbird.setReturnValue(false, iterator3, "hasNext", "()boolean", new Object[] {}, Boolean.FALSE, 1);
        Mockingbird.enterTestMode(SystemCrapStats.class);
        SystemCrapStats systemCrapStats = new SystemCrapStats(crapValues, "testSystemCrapStatsName", null, 100.0F, 1000.0F, 0.0F);
        ArrayList arrayList = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, crapValues, "size", "()int", new Object[] {}, new Integer(1), 1);
        Mockingbird.setReturnValue(false, arrayList, "size", "()int", new Object[] {}, new Integer(3), 1);
        MethodCrap methodCrap2 = (MethodCrap) Mockingbird.getProxyObject(MethodCrap.class);
        Mockingbird.setReturnValue(false, arrayList, "get", "(int)java.lang.Object", new Object[] {new Integer(0)}, methodCrap2, 1);
        Mockingbird.setReturnValue(methodCrap2.getCrap(), 10100.0F);
        Mockingbird.setReturnValue(false, arrayList, "size", "()int", new Object[] {}, new Integer(3), 1);
        MethodCrap methodCrap3 = (MethodCrap) Mockingbird.getProxyObject(MethodCrap.class);
        Mockingbird.setReturnValue(false, arrayList, "get", "(int)java.lang.Object", new Object[] {new Integer(1)}, methodCrap3, 1);
        Mockingbird.setReturnValue(methodCrap3.getCrap(), 100.0F);
        Mockingbird.enterTestMode(SystemCrapStats.class);
        try {
            callPrivateMethod("org.crap4j.SystemCrapStats", "crapScores", new Class[] {List.class}, systemCrapStats, new Object[] {arrayList});
            fail("Expected ArrayIndexOutOfBoundsException to be thrown");
        } catch (ArrayIndexOutOfBoundsException ex) {
            assertEquals("ex.getMessage()", "1", ex.getMessage());
            assertThrownBy(SystemCrapStats.class, ex);
            assertSame("systemCrapStats.getSubjects()", crapValues, systemCrapStats.getSubjects());
            assertEquals("arrayList.size()", 0, arrayList.size());
        }
    }
    
    public void testCrapScoresThrowsArrayIndexOutOfBoundsException1() throws Throwable {
        MethodComplexity complexity2 = new MethodComplexity("testSystemCrapStatsParam1", "testSystemCrapStatsParam2", "testSystemCrapStatsParam3", "testSystemCrapStatsParam4", "testSystemCrapStatsParam5", 100, "testSystemCrapStatsParam7");
        MethodCrap methodCrap = new MethodCrap("testSystemCrapStatsMethodSignature", 0.0F, complexity2);
        List crapValues = new ArrayList(100);
        SystemCrapStats systemCrapStats = new SystemCrapStats(crapValues, "testSystemCrapStatsName", null, 100.0F, 1000.0F, 0.0F);
        List arrayList = new ArrayList(1000);
        arrayList.add(methodCrap);
        try {
            callPrivateMethod("org.crap4j.SystemCrapStats", "crapScores", new Class[] {List.class}, systemCrapStats, new Object[] {arrayList});
            fail("Expected ArrayIndexOutOfBoundsException to be thrown");
        } catch (ArrayIndexOutOfBoundsException ex) {
            assertEquals("ex.getMessage()", "0", ex.getMessage());
            assertThrownBy(SystemCrapStats.class, ex);
            assertSame("systemCrapStats.getSubjects()", crapValues, systemCrapStats.getSubjects());
            assertEquals("(ArrayList) arrayList.size()", 1, arrayList.size());
        }
    }
    
    public void testCrapScoresThrowsNullPointerException() throws Throwable {
        List crapValues = new ArrayList(100);
        SystemCrapStats systemCrapStats = new SystemCrapStats(crapValues, "testSystemCrapStatsName", null, 100.0F, 1000.0F, 0.0F);
        List arrayList = new ArrayList(1000);
        arrayList.add(null);
        try {
            callPrivateMethod("org.crap4j.SystemCrapStats", "crapScores", new Class[] {List.class}, systemCrapStats, new Object[] {arrayList});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(SystemCrapStats.class, ex);
            assertSame("systemCrapStats.getSubjects()", crapValues, systemCrapStats.getSubjects());
            assertEquals("(ArrayList) arrayList.size()", 1, arrayList.size());
        }
    }
    
    public void testCrapScoresThrowsNullPointerException1() throws Throwable {
        List crapValues = new ArrayList(100);
        SystemCrapStats systemCrapStats = new SystemCrapStats(crapValues, "testSystemCrapStatsName", null, 100.0F, 1000.0F, 0.0F);
        try {
            callPrivateMethod("org.crap4j.SystemCrapStats", "crapScores", new Class[] {List.class}, systemCrapStats, new Object[] {null});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(SystemCrapStats.class, ex);
            assertSame("systemCrapStats.getSubjects()", crapValues, systemCrapStats.getSubjects());
        }
    }
    
    public void testGenerateBarPictureThrowsNullPointerException() throws Throwable {
        SystemCrapStats systemCrapStats = new SystemCrapStats(new ArrayList(100), "testSystemCrapStatsParam2", null, 100.0F, 1000.0F, 0.0F);
        try {
            systemCrapStats.generateBarPicture();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(SystemCrapStats.class, ex);
        }
    }
    
    public void testGenerateDetailComplexityPageThrowsNullPointerException() throws Throwable {
        SystemCrapStats systemCrapStats = new SystemCrapStats(new ArrayList(100), "testSystemCrapStatsName", null, 100.0F, 1000.0F, 0.0F);
        try {
            callPrivateMethod("org.crap4j.SystemCrapStats", "generateDetailComplexityPage", new Class[] {StreamSource.class}, systemCrapStats, new Object[] {new StreamSource("testSystemCrapStatsParam1")});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(SystemCrapStats.class, ex);
        }
    }
    
    public void testGenerateDetailCoveragePageThrowsNullPointerException() throws Throwable {
        SystemCrapStats systemCrapStats = new SystemCrapStats(new ArrayList(100), "testSystemCrapStatsName", null, 100.0F, 1000.0F, 0.0F);
        try {
            callPrivateMethod("org.crap4j.SystemCrapStats", "generateDetailCoveragePage", new Class[] {StreamSource.class}, systemCrapStats, new Object[] {new StreamSource("testSystemCrapStatsParam1")});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(SystemCrapStats.class, ex);
        }
    }
    
    public void testGenerateDetailCrapLoadPageThrowsNullPointerException() throws Throwable {
        SystemCrapStats systemCrapStats = new SystemCrapStats(new ArrayList(100), "testSystemCrapStatsName", null, 100.0F, 1000.0F, 0.0F);
        try {
            callPrivateMethod("org.crap4j.SystemCrapStats", "generateDetailCrapLoadPage", new Class[] {StreamSource.class}, systemCrapStats, new Object[] {new StreamSource((Reader) null)});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(SystemCrapStats.class, ex);
        }
    }
    
    public void testGenerateDetailCrapPageThrowsNullPointerException() throws Throwable {
        SystemCrapStats systemCrapStats = new SystemCrapStats(new ArrayList(100), "testSystemCrapStatsName", null, 100.0F, 1000.0F, 0.0F);
        try {
            callPrivateMethod("org.crap4j.SystemCrapStats", "generateDetailCrapPage", new Class[] {StreamSource.class}, systemCrapStats, new Object[] {new StreamSource(new File("testSystemCrapStatsParam1"))});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(SystemCrapStats.class, ex);
        }
    }
    
    public void testGenerateHtmlThrowsNullPointerException() throws Throwable {
        SystemCrapStats systemCrapStats = new SystemCrapStats(new ArrayList(100), "testSystemCrapStatsParam2", null, 100.0F, 1000.0F, 0.0F);
        try {
            systemCrapStats.generateHtml();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(SystemCrapStats.class, ex);
            assertNull("systemCrapStats.crapProject", getPrivateField(systemCrapStats, "crapProject"));
        }
    }
    
    public void testGenerateMainPageThrowsNullPointerException() throws Throwable {
        SystemCrapStats systemCrapStats = new SystemCrapStats(new ArrayList(100), "testSystemCrapStatsName", null, 100.0F, 1000.0F, 0.0F);
        try {
            callPrivateMethod("org.crap4j.SystemCrapStats", "generateMainPage", new Class[] {StreamSource.class}, systemCrapStats, new Object[] {new StreamSource((InputStream) null, "testSystemCrapStatsParam2")});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(SystemCrapStats.class, ex);
            assertNull("systemCrapStats.crapProject", getPrivateField(systemCrapStats, "crapProject"));
        }
    }
    
    public void testGeneratePictureThrowsNullPointerException() throws Throwable {
        SystemCrapStats systemCrapStats = new SystemCrapStats(new ArrayList(100), "testSystemCrapStatsParam2", null, 100.0F, 1000.0F, 0.0F);
        try {
            systemCrapStats.generatePicture();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(SystemCrapStats.class, ex);
        }
    }
    
    public void testGetRelativeResourceThrowsNullPointerException() throws Throwable {
        SystemCrapStats systemCrapStats = new SystemCrapStats(new ArrayList(100), "testSystemCrapStatsName", null, 100.0F, 1000.0F, 0.0F);
        try {
            systemCrapStats.getRelativeResource(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertEquals("ex.getMessage()", "name", ex.getMessage());
            assertThrownBy(ZipFile.class, ex);
        }
    }
    
    public void testGetXmlReportFileThrowsNullPointerException() throws Throwable {
        SystemCrapStats systemCrapStats = new SystemCrapStats(new ArrayList(100), "testSystemCrapStatsName", null, 100.0F, 1000.0F, 0.0F);
        try {
            callPrivateMethod("org.crap4j.SystemCrapStats", "getXmlReportFile", new Class[] {}, systemCrapStats, new Object[] {});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(SystemCrapStats.class, ex);
            assertNull("systemCrapStats.crapProject", getPrivateField(systemCrapStats, "crapProject"));
        }
    }
    
    public void testMakeHistThrowsNullPointerException() throws Throwable {
        SystemCrapStats systemCrapStats = new SystemCrapStats(new ArrayList(100), "testSystemCrapStatsName", null, 100.0F, 1000.0F, 0.0F);
        try {
            callPrivateMethod("org.crap4j.SystemCrapStats", "makeHist", new Class[] {MyStringBuilder.class, String.class, String.class, String.class}, systemCrapStats, new Object[] {null, "testSystemCrapStatsPlace", "testSystemCrapStatsValue", "testSystemCrapStatsHeight"});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(SystemCrapStats.class, ex);
        }
    }
    
    public void testMakeHtmlThrowsTransformerConfigurationException() throws Throwable {
        ArrayList crapValues = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, crapValues, "size", "()int", new Object[] {}, new Integer(0), 1);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.setReturnValue(false, crapValues, "iterator", "()java.util.Iterator", new Object[] {}, iterator, 1);
        Mockingbird.setReturnValue(false, iterator, "hasNext", "()boolean", new Object[] {}, Boolean.FALSE, 1);
        Mockingbird.setReturnValue(false, crapValues, "size", "()int", new Object[] {}, new Integer(0), 1);
        Mockingbird.setReturnValue(false, crapValues, "size", "()int", new Object[] {}, new Integer(0), 1);
        Mockingbird.setReturnValue(false, crapValues, "size", "()int", new Object[] {}, new Integer(0), 1);
        Mockingbird.setReturnValue(false, crapValues, "size", "()int", new Object[] {}, new Integer(0), 1);
        Iterator iterator2 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.setReturnValue(false, crapValues, "iterator", "()java.util.Iterator", new Object[] {}, iterator2, 1);
        Mockingbird.setReturnValue(false, iterator2, "hasNext", "()boolean", new Object[] {}, Boolean.FALSE, 1);
        Iterator iterator3 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.setReturnValue(false, crapValues, "iterator", "()java.util.Iterator", new Object[] {}, iterator3, 1);
        Mockingbird.setReturnValue(false, iterator3, "hasNext", "()boolean", new Object[] {}, Boolean.FALSE, 1);
        Mockingbird.enterTestMode(SystemCrapStats.class);
        SystemCrapStats systemCrapStats = new SystemCrapStats(crapValues, "testSystemCrapStatsName", null, 100.0F, 1000.0F, 0.0F);
        StreamSource streamSource = (StreamSource) Mockingbird.getProxyObject(StreamSource.class);
        ByteArrayInputStream byteArrayInputStream = (ByteArrayInputStream) Mockingbird.getProxyObject(ByteArrayInputStream.class);
        File file = (File) Mockingbird.getProxyObject(File.class);
        Mockingbird.enterRecordingMode();
        StreamSource streamSource2 = (StreamSource) Mockingbird.getProxyObject(StreamSource.class);
        Mockingbird.replaceObjectForRecording(StreamSource.class, "<init>(java.io.InputStream)", streamSource2);
        TransformerFactory errorListener = (TransformerFactory) Mockingbird.getProxyObject(TransformerFactory.class);
        Mockingbird.setReturnValue(true, TransformerFactory.class, "newInstance", "()javax.xml.transform.TransformerFactory", new Object[] {}, errorListener, 1);
        Mockingbird.setException(false, errorListener, "newTransformer", "(javax.xml.transform.Source)javax.xml.transform.Transformer", new Object[] {streamSource2}, (Throwable) Mockingbird.getProxyObject(TransformerConfigurationException.class), 1);
        Mockingbird.enterTestMode(SystemCrapStats.class);
        try {
            callPrivateMethod("org.crap4j.SystemCrapStats", "makeHtml", new Class[] {StreamSource.class, InputStream.class, File.class}, systemCrapStats, new Object[] {streamSource, byteArrayInputStream, file});
            fail("Expected TransformerConfigurationException to be thrown");
        } catch (TransformerConfigurationException ex) {
            assertTrue("Test call resulted in expected outcome", true);
        }
    }
    
    public void testToXmlThrowsNullPointerException() throws Throwable {
        List arrayList = new ArrayList(100);
        SystemCrapStats systemCrapStats = new SystemCrapStats(arrayList, "testSystemCrapStatsParam2", null, 100.0F, 1000.0F, 0.0F);
        try {
            systemCrapStats.toXml();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(SystemCrapStats.class, ex);
            assertNull("systemCrapStats.crapProject", getPrivateField(systemCrapStats, "crapProject"));
            assertSame("systemCrapStats.getSubjects()", arrayList, systemCrapStats.getSubjects());
        }
    }
    
    public void testValidateParamsThrowsIllegalArgumentException() throws Throwable {
        SystemCrapStats systemCrapStats = new SystemCrapStats(new ArrayList(100), "testSystemCrapStatsName", null, 100.0F, 1000.0F, 0.0F);
        try {
            callPrivateMethod("org.crap4j.SystemCrapStats", "validateParams", new Class[] {List.class}, systemCrapStats, new Object[] {null});
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertEquals("ex.getMessage()", "Cannot compute for null values", ex.getMessage());
            assertThrownBy(SystemCrapStats.class, ex);
        }
    }
    
    public void testWriteReportThrowsNullPointerException() throws Throwable {
        List arrayList = new ArrayList(100);
        SystemCrapStats systemCrapStats = new SystemCrapStats(arrayList, "testSystemCrapStatsParam2", null, 100.0F, 1000.0F, 0.0F);
        try {
            systemCrapStats.writeReport();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(SystemCrapStats.class, ex);
            assertNull("systemCrapStats.crapProject", getPrivateField(systemCrapStats, "crapProject"));
            assertSame("systemCrapStats.getSubjects()", arrayList, systemCrapStats.getSubjects());
        }
    }
    
    public void testWriteXmlToFileThrowsNullPointerException() throws Throwable {
        SystemCrapStats systemCrapStats = new SystemCrapStats(new ArrayList(100), "testSystemCrapStatsParam2", null, 100.0F, 1000.0F, 0.0F);
        try {
            systemCrapStats.writeXmlToFile("testSystemCrapStatsParam1");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(SystemCrapStats.class, ex);
            assertNull("systemCrapStats.crapProject", getPrivateField(systemCrapStats, "crapProject"));
        }
    }
}

