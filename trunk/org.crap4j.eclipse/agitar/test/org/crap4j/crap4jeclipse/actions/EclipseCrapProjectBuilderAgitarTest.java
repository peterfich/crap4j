/**
 * Generated by Agitar build: JUnitFactory Version 2.0.3.000562 (Build date: Oct 09, 2007) [2.0.3.000562]
 * JDK Version: 1.5.0_11
 *
 * Generated on Oct 15, 2007 5:44:21 PM
 * Time to generate: 00:43.972 seconds
 *
 */

package org.crap4j.crap4jeclipse.actions;

import com.agitar.lib.junit.AgitarTestCase;
import com.agitar.lib.mockingbird.Mockingbird;
import java.io.File;
import java.util.ArrayList;
import java.util.Iterator;
import org.crap4j.CrapProject;
import org.eclipse.core.runtime.CoreException;
import org.eclipse.core.runtime.IPath;
import org.eclipse.jdt.core.IClasspathEntry;
import org.eclipse.jdt.core.IJavaProject;
import org.eclipse.jdt.core.JavaModelException;
import org.eclipse.jdt.internal.core.JavaProject;
import org.eclipse.jdt.launching.IRuntimeClasspathEntry;
import org.eclipse.jdt.launching.JavaRuntime;

public class EclipseCrapProjectBuilderAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return EclipseCrapProjectBuilder.class;
    }
    
    public void testConstructor() throws Throwable {
        IJavaProject iJavaProject = (IJavaProject) Mockingbird.getProxyObject(IJavaProject.class);
        CoreException coreException = (CoreException) Mockingbird.getProxyObject(CoreException.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        IRuntimeClasspathEntry iRuntimeClasspathEntry = (IRuntimeClasspathEntry) Mockingbird.getProxyObject(IRuntimeClasspathEntry.class);
        IClasspathEntry iClasspathEntry = (IClasspathEntry) Mockingbird.getProxyObject(IClasspathEntry.class);
        IRuntimeClasspathEntry iRuntimeClasspathEntry2 = (IRuntimeClasspathEntry) Mockingbird.getProxyObject(IRuntimeClasspathEntry.class);
        IClasspathEntry iClasspathEntry2 = (IClasspathEntry) Mockingbird.getProxyObject(IClasspathEntry.class);
        IRuntimeClasspathEntry iRuntimeClasspathEntry3 = (IRuntimeClasspathEntry) Mockingbird.getProxyObject(IRuntimeClasspathEntry.class);
        IClasspathEntry iClasspathEntry3 = (IClasspathEntry) Mockingbird.getProxyObject(IClasspathEntry.class);
        IRuntimeClasspathEntry iRuntimeClasspathEntry4 = (IRuntimeClasspathEntry) Mockingbird.getProxyObject(IRuntimeClasspathEntry.class);
        IClasspathEntry iClasspathEntry4 = (IClasspathEntry) Mockingbird.getProxyObject(IClasspathEntry.class);
        IPath iPath = (IPath) Mockingbird.getProxyObject(IPath.class);
        IRuntimeClasspathEntry iRuntimeClasspathEntry5 = (IRuntimeClasspathEntry) Mockingbird.getProxyObject(IRuntimeClasspathEntry.class);
        IClasspathEntry iClasspathEntry5 = (IClasspathEntry) Mockingbird.getProxyObject(IClasspathEntry.class);
        IPath iPath2 = (IPath) Mockingbird.getProxyObject(IPath.class);
        File file = (File) Mockingbird.getProxyObject(File.class);
        IRuntimeClasspathEntry iRuntimeClasspathEntry6 = (IRuntimeClasspathEntry) Mockingbird.getProxyObject(IRuntimeClasspathEntry.class);
        IClasspathEntry iClasspathEntry6 = (IClasspathEntry) Mockingbird.getProxyObject(IClasspathEntry.class);
        JavaModelException javaModelException = (JavaModelException) Mockingbird.getProxyObject(JavaModelException.class);
        Iterator iterator2 = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        JavaModelException javaModelException2 = (JavaModelException) Mockingbird.getProxyObject(JavaModelException.class);
        Mockingbird.enterRecordingMode();
        ArrayList arrayList = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList);
        Mockingbird.setException(JavaRuntime.computeUnresolvedRuntimeClasspath(iJavaProject), coreException);
        coreException.printStackTrace();
        Mockingbird.setNormalReturnForVoid();
        ArrayList arrayList2 = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList2);
        Mockingbird.setReturnValue(arrayList.iterator(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), iRuntimeClasspathEntry);
        Mockingbird.setReturnValue(iRuntimeClasspathEntry.getClasspathEntry(), iClasspathEntry);
        Mockingbird.setReturnValue(iClasspathEntry.getEntryKind(), 5);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), iRuntimeClasspathEntry2);
        Mockingbird.setReturnValue(iRuntimeClasspathEntry2.getClasspathEntry(), iClasspathEntry2);
        Mockingbird.setReturnValue(iClasspathEntry2.getEntryKind(), 5);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), iRuntimeClasspathEntry3);
        Mockingbird.setReturnValue(iRuntimeClasspathEntry3.getClasspathEntry(), iClasspathEntry3);
        Mockingbird.setReturnValue(iClasspathEntry3.getEntryKind(), 3);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), iRuntimeClasspathEntry4);
        Mockingbird.setReturnValue(iRuntimeClasspathEntry4.getClasspathEntry(), iClasspathEntry4);
        Mockingbird.setReturnValue(iClasspathEntry4.getEntryKind(), 0);
        Mockingbird.setReturnValue(iRuntimeClasspathEntry4.getPath(), iPath);
        Mockingbird.setReturnValue(iPath.isAbsolute(), false);
        Mockingbird.setReturnValue(EclipseCrapProjectBuilder.class, "getAbsoluteFilePath", "(org.eclipse.core.runtime.IPath)java.lang.String", "", 1);
        Boolean boolean2 = Boolean.FALSE;
        Mockingbird.setReturnValue(false, arrayList2, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), iRuntimeClasspathEntry5);
        Mockingbird.setReturnValue(iRuntimeClasspathEntry5.getClasspathEntry(), iClasspathEntry5);
        Mockingbird.setReturnValue(iClasspathEntry5.getEntryKind(), 0);
        Mockingbird.setReturnValue(iRuntimeClasspathEntry5.getPath(), iPath2);
        Mockingbird.setReturnValue(iPath2.isAbsolute(), true);
        Mockingbird.setReturnValue(iPath2.toFile(), file);
        Mockingbird.setReturnValue(false, file, "getAbsolutePath", "()java.lang.String", new Object[] {}, "", 1);
        Mockingbird.setReturnValue(false, arrayList2, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), iRuntimeClasspathEntry6);
        Mockingbird.setReturnValue(iRuntimeClasspathEntry6.getClasspathEntry(), iClasspathEntry6);
        Mockingbird.setReturnValue(iClasspathEntry6.getEntryKind(), 3);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        ArrayList arrayList3 = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList3);
        Mockingbird.setException(iJavaProject.getResolvedClasspath(true), javaModelException);
        javaModelException.printStackTrace();
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", Mockingbird.getProxyObject(ArrayList.class));
        Mockingbird.setReturnValue(arrayList3.iterator(), iterator2);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), "");
        Boolean boolean3 = Boolean.TRUE;
        Mockingbird.setReturnValue(EclipseCrapProjectBuilder.class, "isTestFolder", "(java.lang.String)boolean", boolean3, 1);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), "");
        Mockingbird.setReturnValue(EclipseCrapProjectBuilder.class, "isTestFolder", "(java.lang.String)boolean", boolean2, 1);
        Mockingbird.setReturnValue(EclipseCrapProjectBuilder.class, "addToList", "(java.util.ArrayList,java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), "");
        Mockingbird.setReturnValue(EclipseCrapProjectBuilder.class, "isTestFolder", "(java.lang.String)boolean", boolean2, 1);
        Mockingbird.setReturnValue(EclipseCrapProjectBuilder.class, "addToList", "(java.util.ArrayList,java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(iterator2.hasNext(), true);
        Mockingbird.setReturnValue(iterator2.next(), "");
        Mockingbird.setReturnValue(EclipseCrapProjectBuilder.class, "isTestFolder", "(java.lang.String)boolean", boolean3, 1);
        Mockingbird.setReturnValue(iterator2.hasNext(), false);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>(java.util.Collection)", Mockingbird.getProxyObject(ArrayList.class));
        Mockingbird.setReturnValue(EclipseCrapProjectBuilder.class, "filterItems", "(java.util.List,java.util.List)void", null, 1);
        Mockingbird.setReturnValue(EclipseCrapProjectBuilder.class, "filterItems", "(java.util.List,java.util.List)void", null, 1);
        Mockingbird.setReturnValue(iJavaProject.getResource(), null);
        Mockingbird.setReturnValue(EclipseCrapProjectBuilder.class, "makeResourceAbsolute", "(org.eclipse.core.resources.IResource)java.lang.String", "", 1);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", Mockingbird.getProxyObject(ArrayList.class));
        Mockingbird.setException(iJavaProject.getPackageFragmentRoots(), javaModelException2);
        Mockingbird.setReturnValue(false, javaModelException2, "printStackTrace", "()void", new Object[] {}, null, 1);
        Mockingbird.replaceObjectForRecording(CrapProject.class, "<init>(java.lang.String,java.util.List,java.util.List,java.util.List,java.util.List,java.lang.String)", Mockingbird.getProxyObject(CrapProject.class));
        Mockingbird.enterTestMode();
        EclipseCrapProjectBuilder eclipseCrapProjectBuilder = new EclipseCrapProjectBuilder(iJavaProject, "");
        assertNull("eclipseCrapProjectBuilder.getCrapProject().outputDir()", eclipseCrapProjectBuilder.getCrapProject().outputDir());
    }
    
    public void testGetCrapProjectWithAggressiveMocks() throws Throwable {
        EclipseCrapProjectBuilder eclipseCrapProjectBuilder = (EclipseCrapProjectBuilder) Mockingbird.getProxyObject(EclipseCrapProjectBuilder.class, true);
        setPrivateField(eclipseCrapProjectBuilder, "crapProject", null);
        Mockingbird.enterTestMode(EclipseCrapProjectBuilder.class);
        CrapProject result = eclipseCrapProjectBuilder.getCrapProject();
        assertNull("result", result);
    }
    
    public void testConstructorThrowsNullPointerException() throws Throwable {
        IJavaProject project = new JavaProject();
        try {
            new EclipseCrapProjectBuilder(project, "testEclipseCrapProjectBuilderOutputDir");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(JavaProject.class, ex);
        }
    }
}

