/**
 * Generated by Agitar build: JUnitFactory Version 2.1.0.000576 (Build date: Oct 19, 2007) [2.1.0.000576]
 * JDK Version: 1.5.0_11
 *
 * Generated on Nov 6, 2007 1:38:26 PM
 * Time to generate: 01:48.695 seconds
 *
 */

package org.crap4j.crap4jeclipse.actions;

import com.agitar.lib.junit.AgitarTestCase;
import com.agitar.lib.mockingbird.Mockingbird;
import java.util.ArrayList;
import java.util.List;
import org.crap4j.AntSuperrunnerCoverageStrategy;
import org.crap4j.Crap4jRunner;
import org.crap4j.CrapProject;
import org.crap4j.Main;
import org.crap4j.crap4jeclipse.Activator;
import org.crap4j.crap4jeclipse.views.Crap4jView;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.IProgressMonitor;
import org.eclipse.core.runtime.NullProgressMonitor;
import org.eclipse.core.runtime.Preferences;
import org.eclipse.core.runtime.Status;

import org.eclipse.jdt.core.IJavaProject;
import org.eclipse.jdt.internal.core.JavaModelManager;
import org.eclipse.jdt.internal.core.JavaProject;
import org.eclipse.jface.viewers.ISelection;
import org.eclipse.jface.viewers.IStructuredSelection;
import org.eclipse.jface.viewers.StructuredSelection;
import org.eclipse.jface.viewers.TreeSelection;
import org.eclipse.ui.IMemento;
import org.eclipse.ui.IWorkingSet;
import org.eclipse.ui.XMLMemento;
import org.eclipse.ui.internal.AggregateWorkingSet;
import org.eclipse.ui.internal.WorkingSet;

public class Crap4jActionAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return Crap4jAction.class;
    }
    
    public void testConstructor() throws Throwable {
        new Crap4jAction();
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    
    
    public void testDispose() throws Throwable {
        new Crap4jAction().dispose();
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testEvaluateSelection() throws Throwable {
        Crap4jAction crap4jAction = new Crap4jAction();
        List arrayList = new ArrayList(100);
        Object[] objects = new Object[1];
        callPrivateMethod("org.crap4j.crap4jeclipse.actions.Crap4jAction", "evaluateSelection", new Class[] {Object[].class, List.class}, crap4jAction, new Object[] {objects, arrayList});
        assertEquals("(ArrayList) arrayList.size()", 0, arrayList.size());
    }
    
    public void testEvaluateSelection1() throws Throwable {
        Crap4jAction crap4jAction = new Crap4jAction();
        IAdaptable[] elements = new IAdaptable[0];
        List arrayList = new ArrayList(100);
        Object[] objects = new Object[2];
        objects[1] = new WorkingSet("testCrap4jActionName", "testCrap4jActionUniqueId", elements);
        callPrivateMethod("org.crap4j.crap4jeclipse.actions.Crap4jAction", "evaluateSelection", new Class[] {Object[].class, List.class}, crap4jAction, new Object[] {objects, arrayList});
        assertEquals("(ArrayList) arrayList.size()", 0, arrayList.size());
    }
    
    public void testEvaluateSelection2() throws Throwable {
        Crap4jAction crap4jAction = new Crap4jAction();
        Object[] objects = new Object[0];
        List arrayList = new ArrayList(100);
        callPrivateMethod("org.crap4j.crap4jeclipse.actions.Crap4jAction", "evaluateSelection", new Class[] {Object[].class, List.class}, crap4jAction, new Object[] {objects, arrayList});
        assertEquals("(ArrayList) arrayList.size()", 0, arrayList.size());
    }
    
    public void testEvaluateSelection3() throws Throwable {
        Crap4jAction crap4jAction = new Crap4jAction();
        Object[] objects = new Object[2];
        IJavaProject iJavaProject = (IJavaProject) Mockingbird.getProxyObject(IJavaProject.class);
        IJavaProject iJavaProject2 = (IJavaProject) Mockingbird.getProxyObject(IJavaProject.class);
        List list = (List) Mockingbird.getProxyObject(List.class);
        objects[0] = iJavaProject;
        objects[1] = iJavaProject2;
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, iJavaProject, "isOpen", "()boolean", Boolean.TRUE, 1);
        Boolean boolean2 = Boolean.FALSE;
        Mockingbird.setReturnValue(false, list, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(false, iJavaProject2, "isOpen", "()boolean", boolean2, 1);
        Mockingbird.enterTestMode(Crap4jAction.class);
        callPrivateMethod("org.crap4j.crap4jeclipse.actions.Crap4jAction", "evaluateSelection", new Class[] {Object[].class, List.class}, crap4jAction, new Object[] {objects, list});
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testGetOpenSelectedProjects() throws Throwable {
        Object[] elements = new IPath[2];
        Crap4jAction crap4jAction = new Crap4jAction();
        ArrayList result = (ArrayList) callPrivateMethod("org.crap4j.crap4jeclipse.actions.Crap4jAction", "getOpenSelectedProjects", new Class[] {ISelection.class}, crap4jAction, new Object[] {new StructuredSelection(elements)});
        assertEquals("result.size()", 0, result.size());
    }
    
    public void testGetOpenSelectedProjects1() throws Throwable {
        Crap4jAction crap4jAction = new Crap4jAction();
        IAdaptable[] elements = new IAdaptable[0];
        Object[] elements2 = new Object[3];
        elements2[1] = new WorkingSet("testCrap4jActionName", "testCrap4jActionUniqueId", elements);
        ArrayList result = (ArrayList) callPrivateMethod("org.crap4j.crap4jeclipse.actions.Crap4jAction", "getOpenSelectedProjects", new Class[] {ISelection.class}, crap4jAction, new Object[] {new StructuredSelection(elements2)});
        assertEquals("result.size()", 0, result.size());
    }
    
    public void testGetOpenSelectedProjects2() throws Throwable {
        Crap4jAction crap4jAction = new Crap4jAction();
        ArrayList result = (ArrayList) callPrivateMethod("org.crap4j.crap4jeclipse.actions.Crap4jAction", "getOpenSelectedProjects", new Class[] {ISelection.class}, crap4jAction, new Object[] {new TreeSelection()});
        assertEquals("result.size()", 0, result.size());
    }
    
    public void testGetOpenSelectedProjects3() throws Throwable {
        Crap4jAction crap4jAction = new Crap4jAction();
        IStructuredSelection iStructuredSelection = (IStructuredSelection) Mockingbird.getProxyObject(IStructuredSelection.class);
        Object[] objects = new Object[2];
        IJavaProject iJavaProject = (IJavaProject) Mockingbird.getProxyObject(IJavaProject.class);
        IJavaProject iJavaProject2 = (IJavaProject) Mockingbird.getProxyObject(IJavaProject.class);
        objects[0] = iJavaProject;
        objects[1] = iJavaProject2;
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(iStructuredSelection.toArray(), objects);
        ArrayList arrayList = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList);
        Boolean boolean2 = Boolean.FALSE;
        Mockingbird.setReturnValue(false, iJavaProject, "isOpen", "()boolean", boolean2, 1);
        Mockingbird.setReturnValue(false, iJavaProject2, "isOpen", "()boolean", Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, arrayList, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.enterTestMode(Crap4jAction.class);
        ArrayList result = (ArrayList) callPrivateMethod("org.crap4j.crap4jeclipse.actions.Crap4jAction", "getOpenSelectedProjects", new Class[] {ISelection.class}, crap4jAction, new Object[] {iStructuredSelection});
        assertEquals("result.size()", 0, result.size());
    }
    
    public void testInit() throws Throwable {
        Crap4jAction crap4jAction = new Crap4jAction();
        crap4jAction.init(null);
        assertNull("crap4jAction.window", getPrivateField(crap4jAction, "window"));
    }
    
    public void testRun() throws Throwable {
        Crap4jAction crap4jAction = new Crap4jAction();
        Object[] elements = new Object[2];
        crap4jAction.selectionChanged(null, new StructuredSelection(elements));
        crap4jAction.run(null);
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testRun1() throws Throwable {
        Crap4jAction crap4jAction = new Crap4jAction();
        crap4jAction.selectionChanged(null, new StructuredSelection());
        crap4jAction.run(null);
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testRun2() throws Throwable {
        new Crap4jAction().run(null);
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testRunJob() throws Throwable {
        Crap4jRunner crap4jRunner = new Crap4jRunner(true, true, false, new EclipseSuperRunnerCoverageStrategy(new TreeSelection()), 100.0F, 1000.0F, 0.0F, "testCrap4jActionServer");
        Crap4jAction crap4jAction = new Crap4jAction();
        callPrivateMethod("org.crap4j.crap4jeclipse.actions.Crap4jAction", "runJob", new Class[] {Crap4jRunner.class, CrapProject.class}, crap4jAction, new Object[] {crap4jRunner, null});
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testRunWithAggressiveMocks() throws Throwable {
        storeStaticField(Activator.class, "plugin");
        Crap4jAction crap4jAction = new Crap4jAction();
        IStructuredSelection iStructuredSelection = (IStructuredSelection) Mockingbird.getProxyObject(IStructuredSelection.class);
        Object[] objects = new Object[2];
        IWorkingSet iWorkingSet = (IWorkingSet) Mockingbird.getProxyObject(IWorkingSet.class);
        IJavaProject iJavaProject = (IJavaProject) Mockingbird.getProxyObject(IJavaProject.class);
        IAdaptable[] iAdaptables = new IAdaptable[0];
        Object[] objects2 = new Object[0];
        Activator activator = (Activator) Mockingbird.getProxyObject(Activator.class);
        Preferences preferences = (Preferences) Mockingbird.getProxyObject(Preferences.class);
        setPrivateField(crap4jAction, "selection", iStructuredSelection);
        objects[0] = iWorkingSet;
        objects[1] = iJavaProject;
        setPrivateField(Activator.class, "plugin", activator);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(iStructuredSelection.toArray(), objects);
        ArrayList arrayList = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList);
        Mockingbird.setReturnValue(false, iWorkingSet, "getElements", "()org.eclipse.core.runtime.IAdaptable[]", iAdaptables, 1);
        Mockingbird.setReturnValue(false, crap4jAction, "evaluateSelection", "(java.lang.Object[],java.util.List)void", new Object[] {iAdaptables, arrayList}, null, 1);
        Mockingbird.setReturnValue(false, iJavaProject, "isOpen", "()boolean", Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, arrayList, "add", "(java.lang.Object)boolean", Boolean.FALSE, 1);
        Mockingbird.setReturnValue(false, arrayList, "size", "()int", new Object[] {}, new Integer(1), 1);
        Mockingbird.setReturnValue(false, arrayList, "size", "()int", new Object[] {}, new Integer(1), 1);
        Mockingbird.setReturnValue(false, arrayList, "toArray", "(java.lang.Object[])java.lang.Object[]", objects2, 1);
        EclipseCrapProjectBuilder eclipseCrapProjectBuilder = (EclipseCrapProjectBuilder) Mockingbird.getProxyObject(EclipseCrapProjectBuilder.class);
        Mockingbird.replaceObjectForRecording(EclipseCrapProjectBuilder.class, "<init>(org.eclipse.jdt.core.IJavaProject,java.lang.String)", eclipseCrapProjectBuilder);
        Mockingbird.replaceObjectForRecording(EclipseSuperRunnerCoverageStrategy.class, "<init>(org.eclipse.jface.viewers.ISelection)", Mockingbird.getProxyObject(EclipseSuperRunnerCoverageStrategy.class));
        setPrivateField(eclipseCrapProjectBuilder, "crapProject", null);
        Mockingbird.setReturnValue(activator.getPluginPreferences(), preferences);
        Mockingbird.setReturnValue(preferences.getFloat("crapThreshold"), 0.0F);
        Mockingbird.setReturnValue(preferences.getFloat("crapPercentWarningThreshold"), 3.3592705E31F);
        Mockingbird.setReturnValue(preferences.getFloat("crapPercentCriticalThreshold"), 3.3592705E31F);
        Mockingbird.setReturnValue(preferences.getBoolean("downloadAverages"), false);
        Mockingbird.setReturnValue(preferences.getString("server"), "");
        Mockingbird.replaceObjectForRecording(Crap4jRunner.class, "<init>(boolean,boolean,boolean,org.crap4j.CoverageGeneratorStrategy,float,float,float,java.lang.String)", Mockingbird.getProxyObject(Crap4jRunner.class));
        Mockingbird.setReturnValue(false, crap4jAction, "runJob", "(org.crap4j.Crap4jRunner,org.crap4j.CrapProject)void", null, 1);
        Mockingbird.enterTestMode(Crap4jAction.class);
        crap4jAction.run(null);
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testSelectionChanged() throws Throwable {
        Crap4jAction crap4jAction = new Crap4jAction();
        ISelection structuredSelection = new StructuredSelection("1 ");
        crap4jAction.selectionChanged(null, structuredSelection);
        assertSame("crap4jAction.selection", structuredSelection, getPrivateField(crap4jAction, "selection"));
    }
    
    public void testSetActivePart() throws Throwable {
        new Crap4jAction().setActivePart(null, new Crap4jView());
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testEvaluateSelectionThrowsIllegalStateException() throws Throwable {
        Crap4jAction crap4jAction = new Crap4jAction();
        IAdaptable[] elements = new IAdaptable[0];
        IWorkingSet aggregateWorkingSet = new AggregateWorkingSet("testCrap4jActionName", "testCrap4jActionLabel", XMLMemento.createWriteRoot("testCrap4jActionType"));
        IWorkingSet[] iWorkingSets = new IWorkingSet[10];
        iWorkingSets[0] = new WorkingSet("testCrap4jActionName", "testCrap4jActionUniqueId", elements);
        iWorkingSets[2] = aggregateWorkingSet;
        List arrayList = new ArrayList(100);
        try {
            callPrivateMethod("org.crap4j.crap4jeclipse.actions.Crap4jAction", "evaluateSelection", new Class[] {Object[].class, List.class}, crap4jAction, new Object[] {iWorkingSets, arrayList});
            fail("Expected IllegalStateException to be thrown");
        } catch (IllegalStateException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(AggregateWorkingSet.class, ex);
            assertEquals("(ArrayList) arrayList.size()", 0, arrayList.size());
        }
    }
    
    public void testEvaluateSelectionThrowsIllegalStateException1() throws Throwable {
        Crap4jAction crap4jAction = new Crap4jAction();
        IWorkingSet aggregateWorkingSet = new AggregateWorkingSet("testCrap4jActionName", "testCrap4jActionLabel", XMLMemento.createWriteRoot("testCrap4jActionType"));
        IWorkingSet[] iWorkingSets = new IWorkingSet[2];
        iWorkingSets[0] = aggregateWorkingSet;
        List arrayList = new ArrayList(100);
        try {
            callPrivateMethod("org.crap4j.crap4jeclipse.actions.Crap4jAction", "evaluateSelection", new Class[] {Object[].class, List.class}, crap4jAction, new Object[] {iWorkingSets, arrayList});
            fail("Expected IllegalStateException to be thrown");
        } catch (IllegalStateException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(AggregateWorkingSet.class, ex);
            assertEquals("(ArrayList) arrayList.size()", 0, arrayList.size());
        }
    }
    
    public void testEvaluateSelectionThrowsIllegalStateException2() throws Throwable {
        Crap4jAction crap4jAction = new Crap4jAction();
        IAdaptable[] elements = new IAdaptable[0];
        IWorkingSet workingSet = new WorkingSet("testCrap4jActionName", "testCrap4jActionUniqueId", elements);
        IWorkingSet aggregateWorkingSet = new AggregateWorkingSet("testCrap4jActionName", "testCrap4jActionLabel", XMLMemento.createWriteRoot("testCrap4jActionType"));
        IWorkingSet[] iWorkingSets = new IWorkingSet[10];
        iWorkingSets[0] = workingSet;
        iWorkingSets[1] = new WorkingSet("testCrap4jActionName1", "testCrap4jActionUniqueId1", elements);
        iWorkingSets[2] = aggregateWorkingSet;
        List arrayList = new ArrayList(100);
        try {
            callPrivateMethod("org.crap4j.crap4jeclipse.actions.Crap4jAction", "evaluateSelection", new Class[] {Object[].class, List.class}, crap4jAction, new Object[] {iWorkingSets, arrayList});
            fail("Expected IllegalStateException to be thrown");
        } catch (IllegalStateException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(AggregateWorkingSet.class, ex);
            assertEquals("(ArrayList) arrayList.size()", 0, arrayList.size());
        }
    }
    
    public void testEvaluateSelectionThrowsNullPointerException() throws Throwable {
        Crap4jAction crap4jAction = new Crap4jAction();
        IWorkingSet workingSet = (IWorkingSet) callPrivateMethod("org.eclipse.ui.internal.WorkingSet", "<init>", new Class[] {String.class, String.class, IMemento.class}, null, new Object[] {"testCrap4jActionName", "testCrap4jActionLabel", null});
        IWorkingSet[] iWorkingSets = new IWorkingSet[4];
        iWorkingSets[1] = workingSet;
        List arrayList = new ArrayList(100);
        try {
            callPrivateMethod("org.crap4j.crap4jeclipse.actions.Crap4jAction", "evaluateSelection", new Class[] {Object[].class, List.class}, crap4jAction, new Object[] {iWorkingSets, arrayList});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(WorkingSet.class, ex);
            assertEquals("(ArrayList) arrayList.size()", 0, arrayList.size());
        }
    }
    
    public void testEvaluateSelectionThrowsNullPointerException1() throws Throwable {
        Crap4jAction crap4jAction = new Crap4jAction();
        Object[] objects = new Object[1];
        objects[0] = new JavaProject();
        List arrayList = new ArrayList(100);
        try {
            callPrivateMethod("org.crap4j.crap4jeclipse.actions.Crap4jAction", "evaluateSelection", new Class[] {Object[].class, List.class}, crap4jAction, new Object[] {objects, arrayList});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(JavaModelManager.class, ex);
            assertEquals("(ArrayList) arrayList.size()", 0, arrayList.size());
        }
    }
    
    public void testEvaluateSelectionThrowsNullPointerException2() throws Throwable {
        Crap4jAction crap4jAction = new Crap4jAction();
        List arrayList = new ArrayList(100);
        try {
            callPrivateMethod("org.crap4j.crap4jeclipse.actions.Crap4jAction", "evaluateSelection", new Class[] {Object[].class, List.class}, crap4jAction, new Object[] {null, arrayList});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(Crap4jAction.class, ex);
            assertEquals("(ArrayList) arrayList.size()", 0, arrayList.size());
        }
    }
    
    public void testGetOpenSelectedProjectsThrowsNullPointerException() throws Throwable {
        Crap4jAction crap4jAction = new Crap4jAction();
        StructuredSelection structuredSelection = (StructuredSelection) Mockingbird.getProxyObject(StructuredSelection.class);
        Mockingbird.enterRecordingMode();
        Object[] objects = new Object[1];
        JavaProject javaProject = (JavaProject) Mockingbird.getProxyObject(JavaProject.class);
        objects[0] = javaProject;
        Mockingbird.setReturnValue(structuredSelection.toArray(), objects);
        Mockingbird.setException(javaProject.isOpen(), (Throwable) Mockingbird.getProxyObject(NullPointerException.class));
        Mockingbird.enterTestMode(Crap4jAction.class);
        try {
            callPrivateMethod("org.crap4j.crap4jeclipse.actions.Crap4jAction", "getOpenSelectedProjects", new Class[] {ISelection.class}, crap4jAction, new Object[] {structuredSelection});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertTrue("Test call resulted in expected outcome", true);
        }
    }
    
    public void testGetOpenSelectedProjectsThrowsNullPointerException1() throws Throwable {
        Crap4jAction crap4jAction = new Crap4jAction();
        try {
            callPrivateMethod("org.crap4j.crap4jeclipse.actions.Crap4jAction", "getOpenSelectedProjects", new Class[] {ISelection.class}, crap4jAction, new Object[] {null});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(Crap4jAction.class, ex);
        }
    }
    
    public void testRunCrap4jOnProjectThrowsArrayIndexOutOfBoundsException() throws Throwable {
        ArrayList arrayList = new ArrayList(100);
        Crap4jAction crap4jAction = new Crap4jAction();
        try {
            callPrivateMethod("org.crap4j.crap4jeclipse.actions.Crap4jAction", "runCrap4jOnProject", new Class[] {ArrayList.class, ISelection.class}, crap4jAction, new Object[] {arrayList, StructuredSelection.EMPTY});
            fail("Expected ArrayIndexOutOfBoundsException to be thrown");
        } catch (ArrayIndexOutOfBoundsException ex) {
            assertEquals("ex.getMessage()", "0", ex.getMessage());
            assertThrownBy(Crap4jAction.class, ex);
            assertEquals("arrayList.size()", 0, arrayList.size());
        }
    }
    
    public void testRunCrap4jOnProjectThrowsNullPointerException() throws Throwable {
        Crap4jAction crap4jAction = new Crap4jAction();
        ArrayList arrayList = new ArrayList(100);
        arrayList.add(new JavaProject());
        try {
            callPrivateMethod("org.crap4j.crap4jeclipse.actions.Crap4jAction", "runCrap4jOnProject", new Class[] {ArrayList.class, ISelection.class}, crap4jAction, new Object[] {arrayList, new StructuredSelection(new ArrayList(1000))});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(JavaProject.class, ex);
            assertEquals("arrayList.size()", 1, arrayList.size());
        }
    }
    
    public void testRunJobThrowsNullPointerException() throws Throwable {
        Main main = (Main) callPrivateMethod("org.crap4j.Main", "<init>", new Class[] {String.class, String.class, String.class, String.class, String.class}, null, new Object[] {"testCrap4jActionCrap4jHome", "testCrap4jActionAgitatorEclipseApiPlugin", "testCrap4jActionAgitatorEclipseCoveragePluginDir", "testCrap4jActionJunitLib", "testCrap4jActionAntHome"});
        Crap4jAction crap4jAction = new Crap4jAction();
        Crap4jRunner crap4jRunner = new Crap4jRunner(true, false, true, new AntSuperrunnerCoverageStrategy(main), 100.0F, 1000.0F, 0.0F, "testCrap4jActionServer");
        try {
            callPrivateMethod("org.crap4j.crap4jeclipse.actions.Crap4jAction", "runJob", new Class[] {Crap4jRunner.class, CrapProject.class}, crap4jAction, new Object[] {crap4jRunner, null});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(AntSuperrunnerCoverageStrategy.class, ex);
        }
    }
    
}

