/**
 * Generated by Agitar build: JUnitFactory Version 2.0.3.000562 (Build date: Oct 09, 2007) [2.0.3.000562]
 * JDK Version: 1.5.0_11
 *
 * Generated on Oct 15, 2007 5:45:10 PM
 * Time to generate: 00:42.049 seconds
 *
 */

package org.crap4j.crap4jeclipse;

import com.agitar.lib.junit.AgitarTestCase;
import com.agitar.lib.mockingbird.Mockingbird;
import org.eclipse.jface.resource.ImageDescriptor;
import org.eclipse.osgi.baseadaptor.BaseData;
import org.eclipse.osgi.framework.internal.core.BundleContextImpl;
import org.eclipse.osgi.framework.internal.core.BundleHost;
import org.eclipse.ui.plugin.AbstractUIPlugin;
import org.osgi.framework.BundleContext;

public class ActivatorAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return Activator.class;
    }
    
    public void testConstructor() throws Throwable {
        Activator activator = new Activator();
        assertNull("activator.preferences", getPrivateField(activator, "preferences"));
        assertFalse("activator.isDebugging()", activator.isDebugging());
        assertSame("activatorActivator.getDefault()", activator, Activator.getDefault());
        assertNull("activator.imageRegistry", getPrivateField(activator, "imageRegistry"));
    }
    
    public void testGetDefault() throws Throwable {
        Activator result = Activator.getDefault();
        assertNotNull("result", result);
    }
    
    public void testGetImageDescriptor() throws Throwable {
        ImageDescriptor result = Activator.getImageDescriptor("testActivatorPath");
        assertNull("result", result);
    }
    
    public void testGetImageDescriptorThrowsIllegalArgumentException() throws Throwable {
        try {
            Activator.getImageDescriptor(null);
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(AbstractUIPlugin.class, ex);
        }
    }
    
    public void testStartThrowsNullPointerException() throws Throwable {
        Activator activator = new Activator();
        BundleHost bundleHost = new BundleHost(new BaseData(100L, null), null);
        BundleContext context = (BundleContext) callPrivateMethod("org.eclipse.osgi.framework.internal.core.BundleContextImpl", "<init>", new Class[] {BundleHost.class}, null, new Object[] {bundleHost});
        try {
            activator.start(context);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(BundleContextImpl.class, ex);
            assertNotNull("activator.bundleListener", getPrivateField(activator, "bundleListener"));
            assertFalse("activator.isDebugging()", activator.isDebugging());
            assertSame("activator.getBundle()", bundleHost, activator.getBundle());
            assertNull("activator.descriptor", getPrivateField(activator, "descriptor"));
            boolean actual = ((Boolean) callPrivateMethod("org.eclipse.osgi.framework.internal.core.BundleContextImpl", "isValid", new Class[] {}, context, new Object[] {})).booleanValue();
            assertTrue("(BundleContextImpl) context.isValid()", actual);
        }
    }
    
    public void testStopThrowsNullPointerException() throws Throwable {
        Activator activator = new Activator();
        BundleContextImpl context = (BundleContextImpl) Mockingbird.getProxyObject(BundleContextImpl.class);
        Mockingbird.enterTestMode(Activator.class);
        try {
            activator.stop(context);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertNull("activator.preferenceStore", getPrivateField(activator, "preferenceStore"));
            assertNull("activator.preferences", getPrivateField(activator, "preferences"));
            assertNull("activatorActivator.getDefault()", Activator.getDefault());
            assertNull("activator.getBundle()", activator.getBundle());
            assertNull("activator.imageRegistry", getPrivateField(activator, "imageRegistry"));
        }
    }
}

