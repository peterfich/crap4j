/**
 * Generated by Agitar build: JUnitFactory Version 2.0.3.000562 (Build date: Oct 09, 2007) [2.0.3.000562]
 * JDK Version: 1.5.0_11
 *
 * Generated on Oct 15, 2007 5:45:14 PM
 * Time to generate: 00:22.863 seconds
 *
 */

package org.crap4j.crap4jeclipse.preferences;

import com.agitar.lib.junit.AgitarTestCase;
import com.agitar.lib.mockingbird.Mockingbird;
import org.crap4j.crap4jeclipse.Activator;
import org.eclipse.jface.preference.IPreferenceStore;

public class PreferenceInitializerAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return PreferenceInitializer.class;
    }
    
    public void testConstructor() throws Throwable {
        new PreferenceInitializer();
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testInitializeDefaultPreferences() throws Throwable {
        storeStaticField(Activator.class, "plugin");
        PreferenceInitializer preferenceInitializer = new PreferenceInitializer();
        Activator activator = (Activator) Mockingbird.getProxyObject(Activator.class);
        IPreferenceStore iPreferenceStore = (IPreferenceStore) Mockingbird.getProxyObject(IPreferenceStore.class);
        setPrivateField(Activator.class, "plugin", activator);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(activator.getPreferenceStore(), iPreferenceStore);
        iPreferenceStore.setDefault("crapThreshold", 30);
        Mockingbird.setNormalReturnForVoid();
        iPreferenceStore.setDefault("crapPercentCriticalThreshold", 15);
        Mockingbird.setNormalReturnForVoid();
        iPreferenceStore.setDefault("crapPercentWarningThreshold", 5);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(PreferenceInitializer.class);
        preferenceInitializer.initializeDefaultPreferences();
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testInitializeDefaultPreferencesThrowsNullPointerException() throws Throwable {
        try {
            new PreferenceInitializer().initializeDefaultPreferences();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(PreferenceInitializer.class, ex);
        }
    }
}

