/**
 * Generated by Agitar build: JUnitFactory Version 2.0.3.000562 (Build date: Oct 09, 2007) [2.0.3.000562]
 * JDK Version: 1.5.0_11
 *
 * Generated on Oct 15, 2007 5:43:54 PM
 * Time to generate: 00:26.428 seconds
 *
 */

package org.crap4j.crap4jeclipse.preferences;

import com.agitar.lib.junit.AgitarTestCase;
import com.agitar.lib.mockingbird.Mockingbird;
import org.crap4j.crap4jeclipse.Activator;
import org.eclipse.jface.preference.FieldEditor;
import org.eclipse.jface.preference.FieldEditorPreferencePage;
import org.eclipse.jface.preference.IntegerFieldEditor;
import org.eclipse.swt.widgets.Composite;

public class Crap4jPreferencePageAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return Crap4jPreferencePage.class;
    }
    
    public void testConstructor() throws Throwable {
        storeStaticField(Activator.class, "plugin");
        Mockingbird.ignoreConstructorExceptions(FieldEditorPreferencePage.class);
        Activator activator = (Activator) Mockingbird.getProxyObject(Activator.class);
        setPrivateField(Activator.class, "plugin", activator);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(activator.getPreferenceStore(), null);
        Mockingbird.enterTestMode();
        Crap4jPreferencePage crap4jPreferencePage = new Crap4jPreferencePage();
        assertNull("crap4jPreferencePage.preferenceStore", getPrivateField(crap4jPreferencePage, "preferenceStore"));
        assertNull("crap4jPreferencePage.fields", getPrivateField(crap4jPreferencePage, "fields"));
        assertEquals("crap4jPreferencePage.getMessageType()", 0, crap4jPreferencePage.getMessageType());
        assertEquals("crap4jPreferencePage.getDescription()", "Preference Page for Crap4j parameters.", crap4jPreferencePage.getDescription());
        assertNull("crap4jPreferencePage.defaultsButton", getPrivateField(crap4jPreferencePage, "defaultsButton"));
        assertEquals("crap4jPreferencePage.style", new Integer(1), getPrivateField(crap4jPreferencePage, "style"));
        assertNull("crap4jPreferencePage.size", getPrivateField(crap4jPreferencePage, "size"));
        assertNull("crap4jPreferencePage.image", getPrivateField(crap4jPreferencePage, "image"));
        assertEquals("crap4jPreferencePage.getTitle()", "", crap4jPreferencePage.getTitle());
        assertNull("crap4jPreferencePage.getContainer()", crap4jPreferencePage.getContainer());
        assertTrue("crap4jPreferencePage.createDefaultAndApplyButton", ((Boolean) getPrivateField(crap4jPreferencePage, "createDefaultAndApplyButton")).booleanValue());
        assertNull("crap4jPreferencePage.imageDescriptor", getPrivateField(crap4jPreferencePage, "imageDescriptor"));
        assertNull("crap4jPreferencePage.invalidFieldEditor", getPrivateField(crap4jPreferencePage, "invalidFieldEditor"));
        assertNull("crap4jPreferencePage.getMessage()", crap4jPreferencePage.getMessage());
        assertNull("crap4jPreferencePage.applyButton", getPrivateField(crap4jPreferencePage, "applyButton"));
        assertTrue("crap4jPreferencePage.isValid()", crap4jPreferencePage.isValid());
        assertNull("crap4jPreferencePage.getErrorMessage()", crap4jPreferencePage.getErrorMessage());
    }
    
    public void testCreateFieldEditorsWithAggressiveMocks() throws Throwable {
        Crap4jPreferencePage crap4jPreferencePage = (Crap4jPreferencePage) Mockingbird.getProxyObject(Crap4jPreferencePage.class, true);
        Mockingbird.enterRecordingMode();
        Composite fieldEditorParent = (Composite) callPrivateMethod("org.eclipse.jface.preference.FieldEditorPreferencePage", "getFieldEditorParent", new Class[] {}, crap4jPreferencePage, new Object[] {});
        Mockingbird.setReturnValue(fieldEditorParent, null);
        IntegerFieldEditor integerFieldEditor = (IntegerFieldEditor) Mockingbird.getProxyObject(IntegerFieldEditor.class);
        Mockingbird.replaceObjectForRecording(IntegerFieldEditor.class, "<init>(java.lang.String,java.lang.String,org.eclipse.swt.widgets.Composite)", integerFieldEditor);
        callPrivateMethod("org.eclipse.jface.preference.FieldEditorPreferencePage", "addField", new Class[] {FieldEditor.class}, crap4jPreferencePage, new Object[] {integerFieldEditor});
        Mockingbird.setNormalReturnForVoid();
        Composite fieldEditorParent2 = (Composite) callPrivateMethod("org.eclipse.jface.preference.FieldEditorPreferencePage", "getFieldEditorParent", new Class[] {}, crap4jPreferencePage, new Object[] {});
        Mockingbird.setReturnValue(fieldEditorParent2, null);
        IntegerFieldEditor integerFieldEditor2 = (IntegerFieldEditor) Mockingbird.getProxyObject(IntegerFieldEditor.class);
        Mockingbird.replaceObjectForRecording(IntegerFieldEditor.class, "<init>(java.lang.String,java.lang.String,org.eclipse.swt.widgets.Composite)", integerFieldEditor2);
        callPrivateMethod("org.eclipse.jface.preference.FieldEditorPreferencePage", "addField", new Class[] {FieldEditor.class}, crap4jPreferencePage, new Object[] {integerFieldEditor2});
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(Crap4jPreferencePage.class);
        crap4jPreferencePage.createFieldEditors();
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testInitWithAggressiveMocks() throws Throwable {
        Crap4jPreferencePage crap4jPreferencePage = (Crap4jPreferencePage) Mockingbird.getProxyObject(Crap4jPreferencePage.class, true);
        Mockingbird.enterTestMode(Crap4jPreferencePage.class);
        crap4jPreferencePage.init(null);
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testConstructorThrowsNullPointerException() throws Throwable {
        try {
            new Crap4jPreferencePage();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            // dependencies on static and environment state led to removal of 1 assertion
        }
    }
}

