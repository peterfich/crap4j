/**
 * Generated by Agitar build: JUnitFactory Version 2.1.0.000576 (Build date: Oct 19, 2007) [2.1.0.000576]
 * JDK Version: 1.5.0_11
 *
 * Generated on Nov 6, 2007 1:38:40 PM
 * Time to generate: 00:23.590 seconds
 *
 */

package org.crap4j.crap4jeclipse;

import com.agitar.lib.junit.AgitarTestCase;
import com.agitar.lib.mockingbird.Mockingbird;
import org.eclipse.core.runtime.Assert;
import org.eclipse.core.runtime.ILog;
import org.eclipse.core.runtime.IStatus;
import org.eclipse.core.runtime.Status;

public class Crap4jEclipseLogAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return Crap4jEclipseLog.class;
    }
    
    public void testConstructor() throws Throwable {
        new Crap4jEclipseLog();
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testCreateStatus() throws Throwable {
        Status result = (Status) callPrivateMethod("org.crap4j.crap4jeclipse.Crap4jEclipseLog", "createStatus", new Class[] {int.class, int.class, String.class, Throwable.class}, null, new Object[] {new Integer(0), new Integer(100), "testCrap4jEclipseLogMessage", new NullPointerException()});
        assertEquals("result.getMessage()", "testCrap4jEclipseLogMessage", result.getMessage());
    }
    
    public void testLog() throws Throwable {
        Throwable nullPointerException = new NullPointerException();
        Mockingbird.enterRecordingMode();
        Crap4jEclipseLog.log(null);
        Mockingbird.setNormalReturnForVoid(true);
        Mockingbird.enterTestMode(Crap4jEclipseLog.class);
        callPrivateMethod("org.crap4j.crap4jeclipse.Crap4jEclipseLog", "log", new Class[] {int.class, int.class, String.class, Throwable.class}, null, new Object[] {new Integer(0), new Integer(100), "testCrap4jEclipseLogMessage", nullPointerException});
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testLog1() throws Throwable {
        IStatus status = Status.OK_STATUS;
        Mockingbird.enterRecordingMode();
        Activator activator = (Activator) Mockingbird.getProxyObject(Activator.class);
        Mockingbird.setReturnValue(Activator.getDefault(), activator);
        ILog log = (ILog) Mockingbird.getProxyObject(ILog.class);
        Mockingbird.setReturnValue(activator.getLog(), log);
        log.log(status);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(Crap4jEclipseLog.class);
        Crap4jEclipseLog.log(status);
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testLogError() throws Throwable {
        Throwable exception = new CloneNotSupportedException();
        Mockingbird.enterRecordingMode();
        Crap4jEclipseLog.logError("Unexpected Exception: ", exception);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(Crap4jEclipseLog.class);
        Crap4jEclipseLog.logError(exception);
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testLogError1() throws Throwable {
        CloneNotSupportedException exception = (CloneNotSupportedException) Mockingbird.getProxyObject(CloneNotSupportedException.class);
        Mockingbird.enterRecordingMode();
        Crap4jEclipseLog.logError("Unexpected Exception: ", exception);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(Crap4jEclipseLog.class);
        Crap4jEclipseLog.logError(exception);
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testLogError2() throws Throwable {
        ClassFormatError exception = (ClassFormatError) Mockingbird.getProxyObject(ClassFormatError.class);
        Mockingbird.enterRecordingMode();
        callPrivateMethod("org.crap4j.crap4jeclipse.Crap4jEclipseLog", "log", new Class[] {int.class, int.class, String.class, Throwable.class}, null, new Object[] {new Integer(4), new Integer(0), "testString", exception});
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(Crap4jEclipseLog.class);
        Crap4jEclipseLog.logError("testString", exception);
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testLogError3() throws Throwable {
        Throwable exception = new ClassFormatError("testCrap4jEclipseLogParam1");
        Mockingbird.enterRecordingMode();
        callPrivateMethod("org.crap4j.crap4jeclipse.Crap4jEclipseLog", "log", new Class[] {int.class, int.class, String.class, Throwable.class}, null, new Object[] {new Integer(4), new Integer(0), "testString", exception});
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(Crap4jEclipseLog.class);
        Crap4jEclipseLog.logError("testString", exception);
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testLogInfo() throws Throwable {
        Mockingbird.enterRecordingMode();
        callPrivateMethod("org.crap4j.crap4jeclipse.Crap4jEclipseLog", "log", new Class[] {int.class, int.class, String.class, Throwable.class}, null, new Object[] {new Integer(1), new Integer(0), "testString", null});
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(Crap4jEclipseLog.class);
        Crap4jEclipseLog.logInfo("testString");
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testLogInfo1() throws Throwable {
        Mockingbird.enterRecordingMode();
        Status status = (Status) Mockingbird.getProxyObject(Status.class);
        Object status2 = callPrivateMethod("org.crap4j.crap4jeclipse.Crap4jEclipseLog", "createStatus", new Class[] {int.class, int.class, String.class, Throwable.class}, null, new Object[] {new Integer(1), new Integer(0), "testString", null});
        Mockingbird.setReturnValue(status2, status);
        Crap4jEclipseLog.log(status);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(Crap4jEclipseLog.class);
        Crap4jEclipseLog.logInfo("testString");
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testLogInfo2() throws Throwable {
        Mockingbird.enterRecordingMode();
        Status status = (Status) Mockingbird.getProxyObject(Status.class);
        Object status2 = callPrivateMethod("org.crap4j.crap4jeclipse.Crap4jEclipseLog", "createStatus", new Class[] {int.class, int.class, String.class, Throwable.class}, null, new Object[] {new Integer(1), new Integer(0), "testString", null});
        Mockingbird.setReturnValue(status2, status);
        Crap4jEclipseLog.log(status);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(Crap4jEclipseLog.class);
        Crap4jEclipseLog.logInfo("testString");
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testCreateStatusThrowsIllegalArgumentException() throws Throwable {
        try {
            callPrivateMethod("org.crap4j.crap4jeclipse.Crap4jEclipseLog", "createStatus", new Class[] {int.class, int.class, String.class, Throwable.class}, null, new Object[] {new Integer(100), new Integer(1000), "testCrap4jEclipseLogMessage", new NullPointerException()});
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertEquals("ex.getMessage()", "", ex.getMessage());
            assertThrownBy(Assert.class, ex);
        }
    }
    
    public void testLogErrorThrowsNullPointerException() throws Throwable {
        try {
            Crap4jEclipseLog.logError(new CloneNotSupportedException());
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(Crap4jEclipseLog.class, ex);
        }
    }
    
    public void testLogErrorThrowsNullPointerException1() throws Throwable {
        try {
            Crap4jEclipseLog.logError("testCrap4jEclipseLogMessage", new ClassFormatError("testCrap4jEclipseLogParam1"));
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(Crap4jEclipseLog.class, ex);
        }
    }
    
    public void testLogInfoThrowsNullPointerException() throws Throwable {
        try {
            Crap4jEclipseLog.logInfo("testCrap4jEclipseLogMessage");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(Crap4jEclipseLog.class, ex);
        }
    }
    
    public void testLogThrowsIllegalArgumentException() throws Throwable {
        ArrayStoreException arrayStoreException = (ArrayStoreException) Mockingbird.getProxyObject(ArrayStoreException.class);
        Mockingbird.enterRecordingMode();
        Object status = callPrivateMethod("org.crap4j.crap4jeclipse.Crap4jEclipseLog", "createStatus", new Class[] {int.class, int.class, String.class, Throwable.class}, null, new Object[] {new Integer(100), new Integer(100), "Unexpected Ex%ception: ", arrayStoreException});
        Mockingbird.setException(status, (Throwable) Mockingbird.getProxyObject(IllegalArgumentException.class));
        Mockingbird.enterTestMode(Crap4jEclipseLog.class);
        try {
            callPrivateMethod("org.crap4j.crap4jeclipse.Crap4jEclipseLog", "log", new Class[] {int.class, int.class, String.class, Throwable.class}, null, new Object[] {new Integer(100), new Integer(100), "Unexpected Ex%ception: ", arrayStoreException});
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertTrue("Test call resulted in expected outcome", true);
        }
    }
    
    public void testLogThrowsIllegalArgumentException1() throws Throwable {
        Throwable arrayStoreException = new ArrayStoreException("testCrap4jEclipseLogParam1");
        Mockingbird.enterRecordingMode();
        Object status = callPrivateMethod("org.crap4j.crap4jeclipse.Crap4jEclipseLog", "createStatus", new Class[] {int.class, int.class, String.class, Throwable.class}, null, new Object[] {new Integer(100), new Integer(100), "Unexpected Ex%ception: ", arrayStoreException});
        Mockingbird.setException(status, (Throwable) Mockingbird.getProxyObject(IllegalArgumentException.class));
        Mockingbird.enterTestMode(Crap4jEclipseLog.class);
        try {
            callPrivateMethod("org.crap4j.crap4jeclipse.Crap4jEclipseLog", "log", new Class[] {int.class, int.class, String.class, Throwable.class}, null, new Object[] {new Integer(100), new Integer(100), "Unexpected Ex%ception: ", arrayStoreException});
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertTrue("Test call resulted in expected outcome", true);
        }
    }
    
    public void testLogThrowsNullPointerException() throws Throwable {
        try {
            callPrivateMethod("org.crap4j.crap4jeclipse.Crap4jEclipseLog", "log", new Class[] {int.class, int.class, String.class, Throwable.class}, null, new Object[] {new Integer(0), new Integer(100), "testCrap4jEclipseLogMessage", new NullPointerException()});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(Crap4jEclipseLog.class, ex);
        }
    }
    
    public void testLogThrowsNullPointerException1() throws Throwable {
        IStatus status = new Status(0, "testCrap4jEclipseLogPluginId", "testCrap4jEclipseLogMessage", new NumberFormatException());
        try {
            Crap4jEclipseLog.log(status);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(Crap4jEclipseLog.class, ex);
        }
    }
}

