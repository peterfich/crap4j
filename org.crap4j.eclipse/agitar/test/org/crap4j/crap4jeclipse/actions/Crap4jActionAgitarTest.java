/**
 * Generated by Agitar build: JUnitFactory Version 2.0.3.000562 (Build date: Oct 09, 2007) [2.0.3.000562]
 * JDK Version: 1.5.0_11
 *
 * Generated on Oct 15, 2007 5:44:26 PM
 * Time to generate: 00:43.383 seconds
 *
 */

package org.crap4j.crap4jeclipse.actions;

import com.agitar.lib.junit.AgitarTestCase;
import com.agitar.lib.mockingbird.Mockingbird;
import java.util.ArrayList;
import java.util.List;
import org.crap4j.AntSuperrunnerCoverageStrategy;
import org.crap4j.Crap4jRunner;
import org.crap4j.crap4jeclipse.Activator;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IProgressMonitor;
import org.eclipse.core.runtime.NullProgressMonitor;
import org.eclipse.core.runtime.Preferences;
import org.eclipse.core.runtime.Status;
import org.eclipse.core.runtime.SubMonitor;
import org.eclipse.core.runtime.SubProgressMonitor;
import org.eclipse.jdt.core.IJavaProject;
import org.eclipse.jface.action.IAction;
import org.eclipse.jface.text.TextSelection;
import org.eclipse.jface.viewers.IStructuredSelection;
import org.eclipse.jface.viewers.StructuredSelection;
import org.eclipse.jface.viewers.TreeSelection;
import org.eclipse.ui.IWorkingSet;

public class Crap4jActionAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return Crap4jAction.class;
    }
    
    public void testConstructor() throws Throwable {
        new Crap4jAction();
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testCrap4jJobConstructor() throws Throwable {
        Crap4jRunner runner = new Crap4jRunner(true, false, new AntSuperrunnerCoverageStrategy(null), 100.0F, 1000.0F, 0.0F);
        Crap4jAction.Crap4jJob crap4jJob = new Crap4jAction().new Crap4jJob(runner, null);
        assertNull("crap4jJob.project", getPrivateField(crap4jJob, "project"));
        assertNull("crap4jJob.thread", getPrivateField(crap4jJob, "thread"));
        assertEquals("crap4jJob.flags", new Integer(0), getPrivateField(crap4jJob, "flags"));
        assertNull("crap4jJob.listeners", getPrivateField(crap4jJob, "listeners"));
        assertSame("crap4jJob.runner", runner, getPrivateField(crap4jJob, "runner"));
        assertEquals("crap4jJob.priority", new Integer(30), getPrivateField(crap4jJob, "priority"));
        assertEquals("crap4jJob.name", "Crap4j Job", getPrivateField(crap4jJob, "name"));
    }
    
    public void testCrap4jJobRun() throws Throwable {
        Crap4jAction.Crap4jJob crap4jJob = new Crap4jAction().new Crap4jJob(null, null);
        IProgressMonitor monitor = new SubProgressMonitor(new NullProgressMonitor(), 100, 1000);
        Status result = (Status) crap4jJob.run(monitor);
        assertEquals("(SubProgressMonitor) monitor.scale", 100.0, ((Number) getPrivateField(monitor, "scale")).doubleValue(), 1.0E-6);
        assertEquals("(SubProgressMonitor) monitor.nestedBeginTasks", 1, ((Number) getPrivateField(monitor, "nestedBeginTasks")).intValue());
        assertEquals("result.getMessage()", "OK", result.getMessage());
    }
    
    public void testCrap4jJobRun1() throws Throwable {
        Crap4jRunner runner = new Crap4jRunner(true, true, new AntSuperrunnerCoverageStrategy(null), 100.0F, 1000.0F, 0.0F);
        Crap4jAction.Crap4jJob crap4jJob = new Crap4jAction().new Crap4jJob(runner, null);
        IProgressMonitor monitor = SubMonitor.convert(new NullProgressMonitor());
        Status result = (Status) crap4jJob.run(monitor);
        assertEquals("(SubMonitor) monitor.totalParent", 0, ((Number) getPrivateField(monitor, "totalParent")).intValue());
        assertEquals("result.getMessage()", "OK", result.getMessage());
    }
    
    public void testDispose() throws Throwable {
        new Crap4jAction().dispose();
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testInit() throws Throwable {
        Crap4jAction crap4jAction = new Crap4jAction();
        crap4jAction.init(null);
        assertNull("crap4jAction.window", getPrivateField(crap4jAction, "window"));
    }
    
    public void testRun() throws Throwable {
        new Crap4jAction().run(null);
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testRun1() throws Throwable {
        Crap4jAction crap4jAction = new Crap4jAction();
        IStructuredSelection iStructuredSelection = (IStructuredSelection) Mockingbird.getProxyObject(IStructuredSelection.class);
        Object[] objects = new Object[2];
        IWorkingSet iWorkingSet = (IWorkingSet) Mockingbird.getProxyObject(IWorkingSet.class);
        IJavaProject iJavaProject = (IJavaProject) Mockingbird.getProxyObject(IJavaProject.class);
        Object[] iAdaptables = new IAdaptable[0];
        setPrivateField(crap4jAction, "selection", iStructuredSelection);
        objects[0] = iWorkingSet;
        objects[1] = iJavaProject;
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(iStructuredSelection.toArray(), objects);
        ArrayList arrayList = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList);
        Mockingbird.setReturnValue(false, iWorkingSet, "getElements", "()org.eclipse.core.runtime.IAdaptable[]", iAdaptables, 1);
        callPrivateMethod("org.crap4j.crap4jeclipse.actions.Crap4jAction", "evaluateSelection", new Class[] {Object[].class, List.class}, crap4jAction, new Object[] {iAdaptables, arrayList});
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(false, iJavaProject, "isOpen", "()boolean", Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, arrayList, "add", "(java.lang.Object)boolean", Boolean.FALSE, 1);
        Mockingbird.setReturnValue(false, arrayList, "size", "()int", new Object[] {}, new Integer(-1), 1);
        Mockingbird.enterTestMode(Crap4jAction.class);
        crap4jAction.run(null);
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testRun2() throws Throwable {
        storeStaticField(Activator.class, "plugin");
        Crap4jAction crap4jAction = new Crap4jAction();
        IStructuredSelection iStructuredSelection = (IStructuredSelection) Mockingbird.getProxyObject(IStructuredSelection.class);
        Object[] objects = new Object[2];
        IWorkingSet iWorkingSet = (IWorkingSet) Mockingbird.getProxyObject(IWorkingSet.class);
        IWorkingSet iWorkingSet2 = (IWorkingSet) Mockingbird.getProxyObject(IWorkingSet.class);
        Object[] iAdaptables = new IAdaptable[0];
        Object[] iAdaptables2 = new IAdaptable[0];
        Object[] objects2 = new Object[0];
        Activator activator = (Activator) Mockingbird.getProxyObject(Activator.class);
        Preferences preferences = (Preferences) Mockingbird.getProxyObject(Preferences.class);
        Exception ex2 = (Exception) Mockingbird.getProxyObject(Exception.class);
        setPrivateField(crap4jAction, "selection", iStructuredSelection);
        objects[0] = iWorkingSet;
        objects[1] = iWorkingSet2;
        setPrivateField(Activator.class, "plugin", activator);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(iStructuredSelection.toArray(), objects);
        ArrayList arrayList = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList);
        Mockingbird.setReturnValue(false, iWorkingSet, "getElements", "()org.eclipse.core.runtime.IAdaptable[]", iAdaptables, 1);
        callPrivateMethod("org.crap4j.crap4jeclipse.actions.Crap4jAction", "evaluateSelection", new Class[] {Object[].class, List.class}, crap4jAction, new Object[] {iAdaptables, arrayList});
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(false, iWorkingSet2, "getElements", "()org.eclipse.core.runtime.IAdaptable[]", iAdaptables2, 1);
        callPrivateMethod("org.crap4j.crap4jeclipse.actions.Crap4jAction", "evaluateSelection", new Class[] {Object[].class, List.class}, crap4jAction, new Object[] {iAdaptables2, arrayList});
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(false, arrayList, "size", "()int", new Object[] {}, new Integer(1), 1);
        Mockingbird.setReturnValue(false, arrayList, "size", "()int", new Object[] {}, new Integer(1), 1);
        Mockingbird.setReturnValue(false, arrayList, "toArray", "(java.lang.Object[])java.lang.Object[]", objects2, 1);
        EclipseCrapProjectBuilder eclipseCrapProjectBuilder = (EclipseCrapProjectBuilder) Mockingbird.getProxyObject(EclipseCrapProjectBuilder.class);
        Mockingbird.replaceObjectForRecording(EclipseCrapProjectBuilder.class, "<init>(org.eclipse.jdt.core.IJavaProject,java.lang.String)", eclipseCrapProjectBuilder);
        Mockingbird.replaceObjectForRecording(EclipseSuperRunnerCoverageStrategy.class, "<init>(org.eclipse.jface.viewers.ISelection)", Mockingbird.getProxyObject(EclipseSuperRunnerCoverageStrategy.class));
        setPrivateField(eclipseCrapProjectBuilder, "crapProject", null);
        Mockingbird.setReturnValue(activator.getPluginPreferences(), preferences);
        Mockingbird.setReturnValue(preferences.getFloat("crapThreshold"), 0.0F);
        Mockingbird.setReturnValue(preferences.getFloat("crapPercentWarningThreshold"), 3.3592705E31F);
        Mockingbird.setReturnValue(preferences.getFloat("crapPercentCriticalThreshold"), 3.3592705E31F);
        Mockingbird.replaceObjectForRecording(Crap4jRunner.class, "<init>(boolean,boolean,org.crap4j.CoverageGeneratorStrategy,float,float,float)", Mockingbird.getProxyObject(Crap4jRunner.class));
        Mockingbird.setException(false, crap4jAction, "runJob", "(org.crap4j.Crap4jRunner,org.crap4j.CrapProject)void", ex2, 1);
        Mockingbird.setReturnValue(false, ex2, "printStackTrace", "()void", new Object[] {}, null, 1);
        Mockingbird.enterTestMode(Crap4jAction.class);
        crap4jAction.run(null);
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testSelectionChanged() throws Throwable {
        Crap4jAction crap4jAction = new Crap4jAction();
        IAction iAction = (IAction) Mockingbird.getProxyObject(IAction.class);
        IStructuredSelection iStructuredSelection = (IStructuredSelection) Mockingbird.getProxyObject(IStructuredSelection.class);
        Object[] objects = new Object[2];
        IWorkingSet iWorkingSet = (IWorkingSet) Mockingbird.getProxyObject(IWorkingSet.class);
        IJavaProject iJavaProject = (IJavaProject) Mockingbird.getProxyObject(IJavaProject.class);
        Object[] iAdaptables = new IAdaptable[0];
        objects[0] = iWorkingSet;
        objects[1] = iJavaProject;
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(iStructuredSelection.toArray(), objects);
        ArrayList arrayList = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList);
        Mockingbird.setReturnValue(false, iWorkingSet, "getElements", "()org.eclipse.core.runtime.IAdaptable[]", iAdaptables, 1);
        callPrivateMethod("org.crap4j.crap4jeclipse.actions.Crap4jAction", "evaluateSelection", new Class[] {Object[].class, List.class}, crap4jAction, new Object[] {iAdaptables, arrayList});
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(false, iJavaProject, "isOpen", "()boolean", Boolean.TRUE, 1);
        Mockingbird.setReturnValue(false, arrayList, "add", "(java.lang.Object)boolean", Boolean.FALSE, 1);
        Mockingbird.setReturnValue(false, arrayList, "size", "()int", new Object[] {}, new Integer(1), 1);
        iAction.setEnabled(true);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(Crap4jAction.class);
        crap4jAction.selectionChanged(iAction, iStructuredSelection);
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testCrap4jJobRunThrowsNullPointerException() throws Throwable {
        Crap4jAction.Crap4jJob crap4jJob = new Crap4jAction().new Crap4jJob(null, null);
        try {
            crap4jJob.run(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(Crap4jAction.Crap4jJob.class, ex);
        }
    }
    
    public void testSelectionChangedThrowsNullPointerException() throws Throwable {
        Crap4jAction crap4jAction = new Crap4jAction();
        try {
            crap4jAction.selectionChanged(null, new StructuredSelection("1 "));
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(Crap4jAction.class, ex);
            assertNull("crap4jAction.selection", getPrivateField(crap4jAction, "selection"));
        }
    }
    
    public void testSelectionChangedThrowsNullPointerException1() throws Throwable {
        Crap4jAction crap4jAction = new Crap4jAction();
        try {
            crap4jAction.selectionChanged(null, new TreeSelection());
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(Crap4jAction.class, ex);
            assertNull("crap4jAction.selection", getPrivateField(crap4jAction, "selection"));
        }
    }
    
    public void testSelectionChangedThrowsNullPointerException2() throws Throwable {
        Crap4jAction crap4jAction = new Crap4jAction();
        try {
            crap4jAction.selectionChanged(null, TextSelection.emptySelection());
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(Crap4jAction.class, ex);
            assertNull("crap4jAction.selection", getPrivateField(crap4jAction, "selection"));
        }
    }
}

