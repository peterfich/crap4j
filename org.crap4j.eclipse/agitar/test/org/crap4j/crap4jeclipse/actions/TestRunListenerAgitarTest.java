/**
 * Generated by Agitar build: JUnitFactory Version 2.0.3.000562 (Build date: Oct 09, 2007) [2.0.3.000562]
 * JDK Version: 1.5.0_11
 *
 * Generated on Oct 15, 2007 5:44:31 PM
 * Time to generate: 00:18.818 seconds
 *
 */

package org.crap4j.crap4jeclipse.actions;

import com.agitar.lib.junit.AgitarTestCase;
import com.agitar.lib.mockingbird.Mockingbird;
import java.util.Collection;
import java.util.Iterator;
import java.util.List;

public class TestRunListenerAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return TestRunListener.class;
    }
    
    public void testConstructor() throws Throwable {
        new TestRunListener();
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testAddListener() throws Throwable {
        TestRunListener.addListener(null);
        assertEquals("TestRunListener.listeners.size()", 1, ((Collection) getPrivateField(TestRunListener.class, "listeners")).size());
    }
    
    public void testAddListener1() throws Throwable {
        storeStaticField(TestRunListener.class, "listeners");
        List list = (List) Mockingbird.getProxyObject(List.class);
        setPrivateField(TestRunListener.class, "listeners", list);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(list.contains(null), false);
        Mockingbird.setReturnValue(list.add(null), false);
        Mockingbird.enterTestMode(TestRunListener.class);
        TestRunListener.addListener(null);
        assertNotNull("TestRunListener.listeners", getPrivateField(TestRunListener.class, "listeners"));
    }
    
    public void testRemoveListener() throws Throwable {
        TestRunListener.removeListener(null);
        assertEquals("TestRunListener.listeners.size()", 0, ((Collection) getPrivateField(TestRunListener.class, "listeners")).size());
    }
    
    public void testTestEnded() throws Throwable {
        new TestRunListener().testEnded("testTestRunListenerTestId", "testTestRunListenerTestName");
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testTestFailed() throws Throwable {
        new TestRunListener().testFailed(100, "testTestRunListenerTestId", "testTestRunListenerTestName", "testTestRunListenerTrace");
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testTestReran() throws Throwable {
        new TestRunListener().testReran("testTestRunListenerTestId", "testTestRunListenerTestClass", "testTestRunListenerTestName", 100, "testTestRunListenerTrace");
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testTestRunEnded() throws Throwable {
        TestRunListener testRunListener = new TestRunListener();
        testRunListener.testRunEnded(100L);
        assertEquals("testRunListenerTestRunListener.listeners.size()", 0, ((Collection) getPrivateField(TestRunListener.class, "listeners")).size());
    }
    
    public void testTestRunEnded1() throws Throwable {
        TestRunListener testRunListener = new TestRunListener();
        List list = (List) Mockingbird.getProxyObject(List.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Crap4jTestListenerListener crap4jTestListenerListener = (Crap4jTestListenerListener) Mockingbird.getProxyObject(Crap4jTestListenerListener.class);
        Crap4jTestListenerListener crap4jTestListenerListener2 = (Crap4jTestListenerListener) Mockingbird.getProxyObject(Crap4jTestListenerListener.class);
        Mockingbird.enterRecordingMode();
        List copyOfListeners = (List) callPrivateMethod("org.crap4j.crap4jeclipse.actions.TestRunListener", "getCopyOfListeners", new Class[] {}, testRunListener, new Object[] {});
        Mockingbird.setReturnValue(copyOfListeners, list);
        Mockingbird.setReturnValue(list.iterator(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), crap4jTestListenerListener);
        crap4jTestListenerListener.finished();
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), crap4jTestListenerListener2);
        crap4jTestListenerListener2.finished();
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.enterTestMode(TestRunListener.class);
        testRunListener.testRunEnded(0L);
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testTestRunStarted() throws Throwable {
        new TestRunListener().testRunStarted(100);
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testTestRunStopped() throws Throwable {
        TestRunListener testRunListener = new TestRunListener();
        testRunListener.testRunStopped(100L);
        assertEquals("testRunListenerTestRunListener.listeners.size()", 0, ((Collection) getPrivateField(TestRunListener.class, "listeners")).size());
    }
    
    public void testTestRunStopped1() throws Throwable {
        TestRunListener testRunListener = new TestRunListener();
        List list = (List) Mockingbird.getProxyObject(List.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Crap4jTestListenerListener crap4jTestListenerListener = (Crap4jTestListenerListener) Mockingbird.getProxyObject(Crap4jTestListenerListener.class);
        Crap4jTestListenerListener crap4jTestListenerListener2 = (Crap4jTestListenerListener) Mockingbird.getProxyObject(Crap4jTestListenerListener.class);
        Mockingbird.enterRecordingMode();
        List copyOfListeners = (List) callPrivateMethod("org.crap4j.crap4jeclipse.actions.TestRunListener", "getCopyOfListeners", new Class[] {}, testRunListener, new Object[] {});
        Mockingbird.setReturnValue(copyOfListeners, list);
        Mockingbird.setReturnValue(list.iterator(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), crap4jTestListenerListener);
        crap4jTestListenerListener.cancelled();
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), crap4jTestListenerListener2);
        crap4jTestListenerListener2.cancelled();
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.enterTestMode(TestRunListener.class);
        testRunListener.testRunStopped(0L);
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testTestRunTerminated() throws Throwable {
        TestRunListener testRunListener = new TestRunListener();
        testRunListener.testRunTerminated();
        assertEquals("testRunListenerTestRunListener.listeners.size()", 0, ((Collection) getPrivateField(TestRunListener.class, "listeners")).size());
    }
    
    public void testTestStarted() throws Throwable {
        new TestRunListener().testStarted("testTestRunListenerTestId", "testTestRunListenerTestName");
        assertTrue("Test call resulted in expected outcome", true);
    }
}

